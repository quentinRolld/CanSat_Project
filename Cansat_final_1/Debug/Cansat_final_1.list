
Cansat_final_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d7a4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000850  0800d948  0800d948  0001d948  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e198  0800e198  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e198  0800e198  0001e198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e1a0  0800e1a0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e1a0  0800e1a0  0001e1a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e1a4  0800e1a4  0001e1a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800e1a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004720  200001e8  0800e38c  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004908  0800e38c  00024908  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cc36  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042f4  00000000  00000000  0003ce4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001670  00000000  00000000  00041140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014b0  00000000  00000000  000427b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bdad  00000000  00000000  00043c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e225  00000000  00000000  0005fa0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c745  00000000  00000000  0007dc32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011a377  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f1c  00000000  00000000  0011a3c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d92c 	.word	0x0800d92c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800d92c 	.word	0x0800d92c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2uiz>:
 8000b3c:	004a      	lsls	r2, r1, #1
 8000b3e:	d211      	bcs.n	8000b64 <__aeabi_d2uiz+0x28>
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d211      	bcs.n	8000b6a <__aeabi_d2uiz+0x2e>
 8000b46:	d50d      	bpl.n	8000b64 <__aeabi_d2uiz+0x28>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d40e      	bmi.n	8000b70 <__aeabi_d2uiz+0x34>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b6e:	d102      	bne.n	8000b76 <__aeabi_d2uiz+0x3a>
 8000b70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b74:	4770      	bx	lr
 8000b76:	f04f 0000 	mov.w	r0, #0
 8000b7a:	4770      	bx	lr

08000b7c <__aeabi_d2f>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b84:	bf24      	itt	cs
 8000b86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_d2f+0x30>
 8000b90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ba0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bb0:	d121      	bne.n	8000bf6 <__aeabi_d2f+0x7a>
 8000bb2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bb6:	bfbc      	itt	lt
 8000bb8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	4770      	bxlt	lr
 8000bbe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc6:	f1c2 0218 	rsb	r2, r2, #24
 8000bca:	f1c2 0c20 	rsb	ip, r2, #32
 8000bce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	f040 0001 	orrne.w	r0, r0, #1
 8000bdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be8:	ea40 000c 	orr.w	r0, r0, ip
 8000bec:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf4:	e7cc      	b.n	8000b90 <__aeabi_d2f+0x14>
 8000bf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfa:	d107      	bne.n	8000c0c <__aeabi_d2f+0x90>
 8000bfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c00:	bf1e      	ittt	ne
 8000c02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c0a:	4770      	bxne	lr
 8000c0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <__aeabi_uldivmod>:
 8000c1c:	b953      	cbnz	r3, 8000c34 <__aeabi_uldivmod+0x18>
 8000c1e:	b94a      	cbnz	r2, 8000c34 <__aeabi_uldivmod+0x18>
 8000c20:	2900      	cmp	r1, #0
 8000c22:	bf08      	it	eq
 8000c24:	2800      	cmpeq	r0, #0
 8000c26:	bf1c      	itt	ne
 8000c28:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c2c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c30:	f000 b9aa 	b.w	8000f88 <__aeabi_idiv0>
 8000c34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c3c:	f000 f83c 	bl	8000cb8 <__udivmoddi4>
 8000c40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c48:	b004      	add	sp, #16
 8000c4a:	4770      	bx	lr

08000c4c <__aeabi_d2lz>:
 8000c4c:	b538      	push	{r3, r4, r5, lr}
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2300      	movs	r3, #0
 8000c52:	4604      	mov	r4, r0
 8000c54:	460d      	mov	r5, r1
 8000c56:	f7ff ff49 	bl	8000aec <__aeabi_dcmplt>
 8000c5a:	b928      	cbnz	r0, 8000c68 <__aeabi_d2lz+0x1c>
 8000c5c:	4620      	mov	r0, r4
 8000c5e:	4629      	mov	r1, r5
 8000c60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c64:	f000 b80a 	b.w	8000c7c <__aeabi_d2ulz>
 8000c68:	4620      	mov	r0, r4
 8000c6a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c6e:	f000 f805 	bl	8000c7c <__aeabi_d2ulz>
 8000c72:	4240      	negs	r0, r0
 8000c74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c78:	bd38      	pop	{r3, r4, r5, pc}
 8000c7a:	bf00      	nop

08000c7c <__aeabi_d2ulz>:
 8000c7c:	b5d0      	push	{r4, r6, r7, lr}
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <__aeabi_d2ulz+0x34>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	4606      	mov	r6, r0
 8000c84:	460f      	mov	r7, r1
 8000c86:	f7ff fcbf 	bl	8000608 <__aeabi_dmul>
 8000c8a:	f7ff ff57 	bl	8000b3c <__aeabi_d2uiz>
 8000c8e:	4604      	mov	r4, r0
 8000c90:	f7ff fc40 	bl	8000514 <__aeabi_ui2d>
 8000c94:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <__aeabi_d2ulz+0x38>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	f7ff fcb6 	bl	8000608 <__aeabi_dmul>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	4630      	mov	r0, r6
 8000ca2:	4639      	mov	r1, r7
 8000ca4:	f7ff faf8 	bl	8000298 <__aeabi_dsub>
 8000ca8:	f7ff ff48 	bl	8000b3c <__aeabi_d2uiz>
 8000cac:	4621      	mov	r1, r4
 8000cae:	bdd0      	pop	{r4, r6, r7, pc}
 8000cb0:	3df00000 	.word	0x3df00000
 8000cb4:	41f00000 	.word	0x41f00000

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <Task_lancement_Cansat>:
extern TaskHandle_t pxeCompass;
/****************************/



void Task_lancement_Cansat(){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af02      	add	r7, sp, #8

	for(;;){

		xTaskCreate(Task_Mesure_M, "mesure champ magnetique", 500, NULL, osPriorityHigh, pxMesure_M);
 8000f92:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <Task_lancement_Cansat+0x38>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	9301      	str	r3, [sp, #4]
 8000f98:	2302      	movs	r3, #2
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000fa2:	4909      	ldr	r1, [pc, #36]	; (8000fc8 <Task_lancement_Cansat+0x3c>)
 8000fa4:	4809      	ldr	r0, [pc, #36]	; (8000fcc <Task_lancement_Cansat+0x40>)
 8000fa6:	f008 f80d 	bl	8008fc4 <xTaskCreate>
		//xTaskCreate(Task_Mesure_AetG, "mesure acceleration lineaire et angulaire", 500, NULL, osPriorityAboveNormal, pxCreatedTask);
		xTaskCreate(Task_eCompass, "eCompass", 500, NULL, osPriorityAboveNormal, pxeCompass);
 8000faa:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <Task_lancement_Cansat+0x44>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	9301      	str	r3, [sp, #4]
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000fba:	4906      	ldr	r1, [pc, #24]	; (8000fd4 <Task_lancement_Cansat+0x48>)
 8000fbc:	4806      	ldr	r0, [pc, #24]	; (8000fd8 <Task_lancement_Cansat+0x4c>)
 8000fbe:	f008 f801 	bl	8008fc4 <xTaskCreate>
		xTaskCreate(Task_Mesure_M, "mesure champ magnetique", 500, NULL, osPriorityHigh, pxMesure_M);
 8000fc2:	e7e6      	b.n	8000f92 <Task_lancement_Cansat+0x6>
 8000fc4:	20000210 	.word	0x20000210
 8000fc8:	0800d948 	.word	0x0800d948
 8000fcc:	08000fdd 	.word	0x08000fdd
 8000fd0:	20000214 	.word	0x20000214
 8000fd4:	0800d960 	.word	0x0800d960
 8000fd8:	08001049 	.word	0x08001049

08000fdc <Task_Mesure_M>:
	}
}


void Task_Mesure_M(){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0

	TickType_t xLastWakeTime;
		const TickType_t xFrequency = portTICK_PERIOD_MS/200;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	607b      	str	r3, [r7, #4]

		// Initialise the xLastWakeTime variable with the current time.
		xLastWakeTime = xTaskGetTickCount();
 8000fe6:	f008 fb91 	bl	800970c <xTaskGetTickCount>
 8000fea:	4603      	mov	r3, r0
 8000fec:	603b      	str	r3, [r7, #0]

	for(;;){

		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8000fee:	463b      	mov	r3, r7
 8000ff0:	6879      	ldr	r1, [r7, #4]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f008 f9c4 	bl	8009380 <vTaskDelayUntil>

		Measure_M(&hi2c1, pDataCansat.IMU.MagnetometerData.mag_raw, pDataCansat.IMU.MagnetometerData.offset, pDataCansat.IMU.MagnetometerData.coeff);
 8000ff8:	4b03      	ldr	r3, [pc, #12]	; (8001008 <Task_Mesure_M+0x2c>)
 8000ffa:	4a04      	ldr	r2, [pc, #16]	; (800100c <Task_Mesure_M+0x30>)
 8000ffc:	4904      	ldr	r1, [pc, #16]	; (8001010 <Task_Mesure_M+0x34>)
 8000ffe:	4805      	ldr	r0, [pc, #20]	; (8001014 <Task_Mesure_M+0x38>)
 8001000:	f000 f966 	bl	80012d0 <Measure_M>
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 8001004:	e7f3      	b.n	8000fee <Task_Mesure_M+0x12>
 8001006:	bf00      	nop
 8001008:	200009f8 	.word	0x200009f8
 800100c:	200009e0 	.word	0x200009e0
 8001010:	200009c8 	.word	0x200009c8
 8001014:	20000914 	.word	0x20000914

08001018 <Task_GPS_data_reading>:
}

/* On démarre cette tâche dès la mise sous tension du Cansat car le GPS met un peu de temps à se lancer
 * Par la suite, elle tourne en tâche de fond toutes les secondes.
 */
void Task_GPS_data_reading(){
 8001018:	b590      	push	{r4, r7, lr}
 800101a:	b0af      	sub	sp, #188	; 0xbc
 800101c:	af2e      	add	r7, sp, #184	; 0xb8


	for(;;){

		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800101e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001022:	2001      	movs	r0, #1
 8001024:	f008 fd76 	bl	8009b14 <ulTaskNotifyTake>
		GPS_data_reading(pDataCansat);
 8001028:	4c06      	ldr	r4, [pc, #24]	; (8001044 <Task_GPS_data_reading+0x2c>)
 800102a:	4668      	mov	r0, sp
 800102c:	f104 0310 	add.w	r3, r4, #16
 8001030:	22b8      	movs	r2, #184	; 0xb8
 8001032:	4619      	mov	r1, r3
 8001034:	f009 fb41 	bl	800a6ba <memcpy>
 8001038:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800103c:	f000 fc7e 	bl	800193c <GPS_data_reading>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001040:	e7ed      	b.n	800101e <Task_GPS_data_reading+0x6>
 8001042:	bf00      	nop
 8001044:	20000968 	.word	0x20000968

08001048 <Task_eCompass>:
	}
}



void Task_eCompass(){
 8001048:	b590      	push	{r4, r7, lr}
 800104a:	b0b5      	sub	sp, #212	; 0xd4
 800104c:	af2e      	add	r7, sp, #184	; 0xb8

	float Cansat_theta = 0;
 800104e:	f04f 0300 	mov.w	r3, #0
 8001052:	617b      	str	r3, [r7, #20]
	double Delta_theta = 0;
 8001054:	f04f 0200 	mov.w	r2, #0
 8001058:	f04f 0300 	mov.w	r3, #0
 800105c:	e9c7 2302 	strd	r2, r3, [r7, #8]

	TickType_t xLastWakeTime;
			const TickType_t xFrequency = portTICK_PERIOD_MS/1000;
 8001060:	2300      	movs	r3, #0
 8001062:	607b      	str	r3, [r7, #4]

			// Initialise the xLastWakeTime variable with the current time.
			xLastWakeTime = xTaskGetTickCount();
 8001064:	f008 fb52 	bl	800970c <xTaskGetTickCount>
 8001068:	4603      	mov	r3, r0
 800106a:	603b      	str	r3, [r7, #0]

	for(;;){

		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 800106c:	463b      	mov	r3, r7
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	4618      	mov	r0, r3
 8001072:	f008 f985 	bl	8009380 <vTaskDelayUntil>
		// ---> Messure accéléro
		// ---> calcul

		//3. Conversion du champ magnétique en degré

		Cansat_theta = magnetic_field_to_degree(pDataCansat.IMU.MagnetometerData.mag_raw);
 8001076:	4812      	ldr	r0, [pc, #72]	; (80010c0 <Task_eCompass+0x78>)
 8001078:	f000 fac2 	bl	8001600 <magnetic_field_to_degree>
 800107c:	ed87 0a05 	vstr	s0, [r7, #20]
		pDataCansat.IMU.MagnetometerData.degree_angle = Cansat_theta;
 8001080:	6978      	ldr	r0, [r7, #20]
 8001082:	f7ff fa69 	bl	8000558 <__aeabi_f2d>
 8001086:	4602      	mov	r2, r0
 8001088:	460b      	mov	r3, r1
 800108a:	490e      	ldr	r1, [pc, #56]	; (80010c4 <Task_eCompass+0x7c>)
 800108c:	e9c1 2330 	strd	r2, r3, [r1, #192]	; 0xc0

		//4. Calcul du Delta theta

		Delta_theta = Delta_theta_calculation(pDataCansat);
 8001090:	4c0c      	ldr	r4, [pc, #48]	; (80010c4 <Task_eCompass+0x7c>)
 8001092:	4668      	mov	r0, sp
 8001094:	f104 0310 	add.w	r3, r4, #16
 8001098:	22b8      	movs	r2, #184	; 0xb8
 800109a:	4619      	mov	r1, r3
 800109c:	f009 fb0d 	bl	800a6ba <memcpy>
 80010a0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80010a4:	f000 fb0e 	bl	80016c4 <Delta_theta_calculation>
 80010a8:	ed87 0b02 	vstr	d0, [r7, #8]

		//5. Rotation des servos en conséquence

		choice_direction_intensity(Delta_theta);
 80010ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010b0:	f7ff fd44 	bl	8000b3c <__aeabi_d2uiz>
 80010b4:	4603      	mov	r3, r0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f001 f88a 	bl	80021d0 <choice_direction_intensity>
		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 80010bc:	e7d6      	b.n	800106c <Task_eCompass+0x24>
 80010be:	bf00      	nop
 80010c0:	200009c8 	.word	0x200009c8
 80010c4:	20000968 	.word	0x20000968

080010c8 <Init>:
	 * et elle configure ce dernier pour qu'il réalise des mesures en continu.
	 * @param p_hi2c1 Pointeur vers une structure I2C qui contient l'information de configuration pour un i2c particulier
	 * @retval None
	 */
void Init(I2C_HandleTypeDef* p_hi2c1)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af04      	add	r7, sp, #16
 80010ce:	6078      	str	r0, [r7, #4]

	uint8_t buff[6];
	buff[0] = 0x80;
 80010d0:	2380      	movs	r3, #128	; 0x80
 80010d2:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Mem_Write ( p_hi2c1, MPU_ADD,  PWR_MGMT_1,  1, &buff[0], 1, 10);
 80010d4:	230a      	movs	r3, #10
 80010d6:	9302      	str	r3, [sp, #8]
 80010d8:	2301      	movs	r3, #1
 80010da:	9301      	str	r3, [sp, #4]
 80010dc:	f107 0308 	add.w	r3, r7, #8
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	2301      	movs	r3, #1
 80010e4:	226b      	movs	r2, #107	; 0x6b
 80010e6:	21d0      	movs	r1, #208	; 0xd0
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f002 fd39 	bl	8003b60 <HAL_I2C_Mem_Write>
	HAL_Delay(100);
 80010ee:	2064      	movs	r0, #100	; 0x64
 80010f0:	f001 fd4e 	bl	8002b90 <HAL_Delay>
	buff[0] = 0x1;
 80010f4:	2301      	movs	r3, #1
 80010f6:	723b      	strb	r3, [r7, #8]
	HAL_I2C_Mem_Write ( p_hi2c1, MPU_ADD, PWR_MGMT_1,  1, &buff[0], 1, 10);
 80010f8:	230a      	movs	r3, #10
 80010fa:	9302      	str	r3, [sp, #8]
 80010fc:	2301      	movs	r3, #1
 80010fe:	9301      	str	r3, [sp, #4]
 8001100:	f107 0308 	add.w	r3, r7, #8
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	2301      	movs	r3, #1
 8001108:	226b      	movs	r2, #107	; 0x6b
 800110a:	21d0      	movs	r1, #208	; 0xd0
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f002 fd27 	bl	8003b60 <HAL_I2C_Mem_Write>


	/********* changement de la sensibilité de l'accélérometre  00=2g 01=4g 10=8g 11=16g *********/
	HAL_I2C_Mem_Read ( p_hi2c1, MPU_ADD,  ACCEL_CONFIG,  1, &buff[0], 1, 10);
 8001112:	230a      	movs	r3, #10
 8001114:	9302      	str	r3, [sp, #8]
 8001116:	2301      	movs	r3, #1
 8001118:	9301      	str	r3, [sp, #4]
 800111a:	f107 0308 	add.w	r3, r7, #8
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	2301      	movs	r3, #1
 8001122:	221c      	movs	r2, #28
 8001124:	21d0      	movs	r1, #208	; 0xd0
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f002 fe14 	bl	8003d54 <HAL_I2C_Mem_Read>

	//Pour mettre 00
	buff[0] =(buff[0] & (0b11100111)) ;
 800112c:	7a3b      	ldrb	r3, [r7, #8]
 800112e:	f023 0318 	bic.w	r3, r3, #24
 8001132:	b2db      	uxtb	r3, r3
 8001134:	723b      	strb	r3, [r7, #8]
	//buff[0] =(buff[0] & (0b11110111)) ;
	//buff[0] =(buff[0] | (0b00010000)) ;
	//Pour mettre 11
	//buff[0] =(buff[0] | (0b00011000)) ;

	HAL_I2C_Mem_Write ( p_hi2c1, MPU_ADD,  ACCEL_CONFIG,  1, &buff[0], 1, 10);
 8001136:	230a      	movs	r3, #10
 8001138:	9302      	str	r3, [sp, #8]
 800113a:	2301      	movs	r3, #1
 800113c:	9301      	str	r3, [sp, #4]
 800113e:	f107 0308 	add.w	r3, r7, #8
 8001142:	9300      	str	r3, [sp, #0]
 8001144:	2301      	movs	r3, #1
 8001146:	221c      	movs	r2, #28
 8001148:	21d0      	movs	r1, #208	; 0xd0
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f002 fd08 	bl	8003b60 <HAL_I2C_Mem_Write>


	buff[0]=0x2; // Bypass pour activer le magnétomètre
 8001150:	2302      	movs	r3, #2
 8001152:	723b      	strb	r3, [r7, #8]
		  if(HAL_I2C_Mem_Write(p_hi2c1,MPU_ADD,INT_PIN_CFG,1,&buff[0],1,10)!=HAL_OK){
 8001154:	230a      	movs	r3, #10
 8001156:	9302      	str	r3, [sp, #8]
 8001158:	2301      	movs	r3, #1
 800115a:	9301      	str	r3, [sp, #4]
 800115c:	f107 0308 	add.w	r3, r7, #8
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	2301      	movs	r3, #1
 8001164:	2237      	movs	r2, #55	; 0x37
 8001166:	21d0      	movs	r1, #208	; 0xd0
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f002 fcf9 	bl	8003b60 <HAL_I2C_Mem_Write>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d004      	beq.n	800117e <Init+0xb6>
			  printf("probleme activation magnetometre --> fct Init \r\n");
 8001174:	4851      	ldr	r0, [pc, #324]	; (80012bc <Init+0x1f4>)
 8001176:	f009 fbd1 	bl	800a91c <puts>
		  	  Error_Handler();
 800117a:	f000 ff95 	bl	80020a8 <Error_Handler>
		  }
	buff[0]=0x16; // configuration mesure en continu du magnétomètre
 800117e:	2316      	movs	r3, #22
 8001180:	723b      	strb	r3, [r7, #8]
		 	  if(HAL_I2C_Mem_Write(p_hi2c1,MAGNETO_ADD,AK8963_CNTL,1,&buff[0],1,10)!=HAL_OK){
 8001182:	230a      	movs	r3, #10
 8001184:	9302      	str	r3, [sp, #8]
 8001186:	2301      	movs	r3, #1
 8001188:	9301      	str	r3, [sp, #4]
 800118a:	f107 0308 	add.w	r3, r7, #8
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	2301      	movs	r3, #1
 8001192:	220a      	movs	r2, #10
 8001194:	2118      	movs	r1, #24
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f002 fce2 	bl	8003b60 <HAL_I2C_Mem_Write>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d004      	beq.n	80011ac <Init+0xe4>
		 		  printf("probleme configuration mesure magnetometre --> fct Init \r\n");
 80011a2:	4847      	ldr	r0, [pc, #284]	; (80012c0 <Init+0x1f8>)
 80011a4:	f009 fbba 	bl	800a91c <puts>
		 	  	  Error_Handler();
 80011a8:	f000 ff7e 	bl	80020a8 <Error_Handler>

		 	  }

	/********** Réglage de la bande passante **********/

	buff[0]=0x3;
 80011ac:	2303      	movs	r3, #3
 80011ae:	723b      	strb	r3, [r7, #8]
	if(HAL_I2C_Mem_Write(p_hi2c1,MPU_ADD,CONFIG,1,&buff[0],1,10)!=HAL_OK){
 80011b0:	230a      	movs	r3, #10
 80011b2:	9302      	str	r3, [sp, #8]
 80011b4:	2301      	movs	r3, #1
 80011b6:	9301      	str	r3, [sp, #4]
 80011b8:	f107 0308 	add.w	r3, r7, #8
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	2301      	movs	r3, #1
 80011c0:	221a      	movs	r2, #26
 80011c2:	21d0      	movs	r1, #208	; 0xd0
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f002 fccb 	bl	8003b60 <HAL_I2C_Mem_Write>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d004      	beq.n	80011da <Init+0x112>
		printf("probleme bande passante --> fct Init \r\n");
 80011d0:	483c      	ldr	r0, [pc, #240]	; (80012c4 <Init+0x1fc>)
 80011d2:	f009 fba3 	bl	800a91c <puts>
		Error_Handler();
 80011d6:	f000 ff67 	bl	80020a8 <Error_Handler>
			Error_Handler();
		}
*/

	// bande passante à 250Hz : FCHOICE = 11 => FCHOICE_b = 00, DLPF_CFG = 000
		HAL_I2C_Mem_Read ( p_hi2c1, MPU_ADD,  GYRO_CONFIG,  1, &buff[0], 1, 10);
 80011da:	230a      	movs	r3, #10
 80011dc:	9302      	str	r3, [sp, #8]
 80011de:	2301      	movs	r3, #1
 80011e0:	9301      	str	r3, [sp, #4]
 80011e2:	f107 0308 	add.w	r3, r7, #8
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	2301      	movs	r3, #1
 80011ea:	221b      	movs	r2, #27
 80011ec:	21d0      	movs	r1, #208	; 0xd0
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f002 fdb0 	bl	8003d54 <HAL_I2C_Mem_Read>
		//Pour mettre 00 dans FCHOICE_b
		buff[0] =(buff[0] & (0b11111100)) ;
 80011f4:	7a3b      	ldrb	r3, [r7, #8]
 80011f6:	f023 0303 	bic.w	r3, r3, #3
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	723b      	strb	r3, [r7, #8]
		if(HAL_I2C_Mem_Write(p_hi2c1,MPU_ADD,GYRO_CONFIG,1,&buff[0],1,10)!=HAL_OK){
 80011fe:	230a      	movs	r3, #10
 8001200:	9302      	str	r3, [sp, #8]
 8001202:	2301      	movs	r3, #1
 8001204:	9301      	str	r3, [sp, #4]
 8001206:	f107 0308 	add.w	r3, r7, #8
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	2301      	movs	r3, #1
 800120e:	221b      	movs	r2, #27
 8001210:	21d0      	movs	r1, #208	; 0xd0
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f002 fca4 	bl	8003b60 <HAL_I2C_Mem_Write>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <Init+0x15a>
				Error_Handler(); }
 800121e:	f000 ff43 	bl	80020a8 <Error_Handler>
		//Pour mettre 000 dans DLPF_CFG
		HAL_I2C_Mem_Read ( p_hi2c1, MPU_ADD, CONFIG,  1, &buff[0], 1, 10);
 8001222:	230a      	movs	r3, #10
 8001224:	9302      	str	r3, [sp, #8]
 8001226:	2301      	movs	r3, #1
 8001228:	9301      	str	r3, [sp, #4]
 800122a:	f107 0308 	add.w	r3, r7, #8
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	2301      	movs	r3, #1
 8001232:	221a      	movs	r2, #26
 8001234:	21d0      	movs	r1, #208	; 0xd0
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f002 fd8c 	bl	8003d54 <HAL_I2C_Mem_Read>
		buff[0] =(buff[0] & (0b11111000)) ;
 800123c:	7a3b      	ldrb	r3, [r7, #8]
 800123e:	f023 0307 	bic.w	r3, r3, #7
 8001242:	b2db      	uxtb	r3, r3
 8001244:	723b      	strb	r3, [r7, #8]
		if(HAL_I2C_Mem_Write(p_hi2c1,MPU_ADD,CONFIG,1,&buff[0],1,10)!=HAL_OK){
 8001246:	230a      	movs	r3, #10
 8001248:	9302      	str	r3, [sp, #8]
 800124a:	2301      	movs	r3, #1
 800124c:	9301      	str	r3, [sp, #4]
 800124e:	f107 0308 	add.w	r3, r7, #8
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	2301      	movs	r3, #1
 8001256:	221a      	movs	r2, #26
 8001258:	21d0      	movs	r1, #208	; 0xd0
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f002 fc80 	bl	8003b60 <HAL_I2C_Mem_Write>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <Init+0x1a2>
				Error_Handler();
 8001266:	f000 ff1f 	bl	80020a8 <Error_Handler>
		}
*/

	/*********** Réglage de la fréquence d'échantillonnage **********/

	buff[0]=0xFF;
 800126a:	23ff      	movs	r3, #255	; 0xff
 800126c:	723b      	strb	r3, [r7, #8]
	if(HAL_I2C_Mem_Write(p_hi2c1,MPU_ADD,SMPLRT_DIV,1,&buff[0],1,10)!=HAL_OK){
 800126e:	230a      	movs	r3, #10
 8001270:	9302      	str	r3, [sp, #8]
 8001272:	2301      	movs	r3, #1
 8001274:	9301      	str	r3, [sp, #4]
 8001276:	f107 0308 	add.w	r3, r7, #8
 800127a:	9300      	str	r3, [sp, #0]
 800127c:	2301      	movs	r3, #1
 800127e:	2219      	movs	r2, #25
 8001280:	21d0      	movs	r1, #208	; 0xd0
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f002 fc6c 	bl	8003b60 <HAL_I2C_Mem_Write>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d004      	beq.n	8001298 <Init+0x1d0>
		printf("probleme reglage frequence echantillonnage --> Init \r\n");
 800128e:	480e      	ldr	r0, [pc, #56]	; (80012c8 <Init+0x200>)
 8001290:	f009 fb44 	bl	800a91c <puts>
		Error_Handler();
 8001294:	f000 ff08 	bl	80020a8 <Error_Handler>
	}
	HAL_I2C_Mem_Read(p_hi2c1,MPU_ADD,LP_ACCEL_ODR,1,&buff[0],1,10);
 8001298:	230a      	movs	r3, #10
 800129a:	9302      	str	r3, [sp, #8]
 800129c:	2301      	movs	r3, #1
 800129e:	9301      	str	r3, [sp, #4]
 80012a0:	f107 0308 	add.w	r3, r7, #8
 80012a4:	9300      	str	r3, [sp, #0]
 80012a6:	2301      	movs	r3, #1
 80012a8:	221e      	movs	r2, #30
 80012aa:	21d0      	movs	r1, #208	; 0xd0
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f002 fd51 	bl	8003d54 <HAL_I2C_Mem_Read>
	// a faire : changer la valeur de DLPF_CFG à 2 par exemple et voir en mode debug si la valeur des 4 derniers bits de LP_ACCEL_ODR est à 4.

}
 80012b2:	bf00      	nop
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	0800d96c 	.word	0x0800d96c
 80012c0:	0800d99c 	.word	0x0800d99c
 80012c4:	0800d9d8 	.word	0x0800d9d8
 80012c8:	0800da00 	.word	0x0800da00
 80012cc:	00000000 	.word	0x00000000

080012d0 <Measure_M>:
	 * @param hi2cx Pointeur vers une structure I2C qui contient l'information de configuration pour un i2c particulier
	 * @param tableau_donnee_utiles Pointeur vers une zone mémoire de type double contenant l’information de champ magnétique
	 * @retval None
	 */

void Measure_M(I2C_HandleTypeDef* p_hi2c1,double* mag, double* offset, double* coeff){
 80012d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80012d4:	b090      	sub	sp, #64	; 0x40
 80012d6:	af04      	add	r7, sp, #16
 80012d8:	60f8      	str	r0, [r7, #12]
 80012da:	60b9      	str	r1, [r7, #8]
 80012dc:	607a      	str	r2, [r7, #4]
 80012de:	603b      	str	r3, [r7, #0]
		uint8_t buffer[6];
		uint8_t asa[3];
		uint8_t drdy[1];


		HAL_I2C_Mem_Read(p_hi2c1,MAGNETO_ADD,AK8963_ST1,1,drdy,1,20);
 80012e0:	2314      	movs	r3, #20
 80012e2:	9302      	str	r3, [sp, #8]
 80012e4:	2301      	movs	r3, #1
 80012e6:	9301      	str	r3, [sp, #4]
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	2301      	movs	r3, #1
 80012f0:	2202      	movs	r2, #2
 80012f2:	2118      	movs	r1, #24
 80012f4:	68f8      	ldr	r0, [r7, #12]
 80012f6:	f002 fd2d 	bl	8003d54 <HAL_I2C_Mem_Read>
		drdy[0]=((drdy[0])&(00000001));
 80012fa:	7d3b      	ldrb	r3, [r7, #20]
 80012fc:	f003 0301 	and.w	r3, r3, #1
 8001300:	b2db      	uxtb	r3, r3
 8001302:	753b      	strb	r3, [r7, #20]
		if(drdy[0]==1){
 8001304:	7d3b      	ldrb	r3, [r7, #20]
 8001306:	2b01      	cmp	r3, #1
 8001308:	f040 8165 	bne.w	80015d6 <Measure_M+0x306>

			if((HAL_I2C_Mem_Read(p_hi2c1,MAGNETO_ADD,AK8963_XOUT_L,1,buffer,7,20)==HAL_OK)
 800130c:	2314      	movs	r3, #20
 800130e:	9302      	str	r3, [sp, #8]
 8001310:	2307      	movs	r3, #7
 8001312:	9301      	str	r3, [sp, #4]
 8001314:	f107 031c 	add.w	r3, r7, #28
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	2301      	movs	r3, #1
 800131c:	2203      	movs	r2, #3
 800131e:	2118      	movs	r1, #24
 8001320:	68f8      	ldr	r0, [r7, #12]
 8001322:	f002 fd17 	bl	8003d54 <HAL_I2C_Mem_Read>
 8001326:	4603      	mov	r3, r0
					&(HAL_I2C_Mem_Read(p_hi2c1,MAGNETO_ADD,AK8963_ASAX,1,asa,3,20)==HAL_OK)){
 8001328:	2b00      	cmp	r3, #0
 800132a:	bf0c      	ite	eq
 800132c:	2301      	moveq	r3, #1
 800132e:	2300      	movne	r3, #0
 8001330:	b2dc      	uxtb	r4, r3
 8001332:	2314      	movs	r3, #20
 8001334:	9302      	str	r3, [sp, #8]
 8001336:	2303      	movs	r3, #3
 8001338:	9301      	str	r3, [sp, #4]
 800133a:	f107 0318 	add.w	r3, r7, #24
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	2301      	movs	r3, #1
 8001342:	2210      	movs	r2, #16
 8001344:	2118      	movs	r1, #24
 8001346:	68f8      	ldr	r0, [r7, #12]
 8001348:	f002 fd04 	bl	8003d54 <HAL_I2C_Mem_Read>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	bf0c      	ite	eq
 8001352:	2301      	moveq	r3, #1
 8001354:	2300      	movne	r3, #0
 8001356:	b2db      	uxtb	r3, r3
 8001358:	4023      	ands	r3, r4
 800135a:	b2db      	uxtb	r3, r3
			if((HAL_I2C_Mem_Read(p_hi2c1,MAGNETO_ADD,AK8963_XOUT_L,1,buffer,7,20)==HAL_OK)
 800135c:	2b00      	cmp	r3, #0
 800135e:	f000 813a 	beq.w	80015d6 <Measure_M+0x306>


						x = (uint16_t)((buffer[1]<<8)+ buffer[0]);
 8001362:	7f7b      	ldrb	r3, [r7, #29]
 8001364:	b29b      	uxth	r3, r3
 8001366:	021b      	lsls	r3, r3, #8
 8001368:	b29a      	uxth	r2, r3
 800136a:	7f3b      	ldrb	r3, [r7, #28]
 800136c:	b29b      	uxth	r3, r3
 800136e:	4413      	add	r3, r2
 8001370:	b29b      	uxth	r3, r3
 8001372:	85fb      	strh	r3, [r7, #46]	; 0x2e
						y = (uint16_t)((buffer[3]<<8)+ buffer[2]);
 8001374:	7ffb      	ldrb	r3, [r7, #31]
 8001376:	b29b      	uxth	r3, r3
 8001378:	021b      	lsls	r3, r3, #8
 800137a:	b29a      	uxth	r2, r3
 800137c:	7fbb      	ldrb	r3, [r7, #30]
 800137e:	b29b      	uxth	r3, r3
 8001380:	4413      	add	r3, r2
 8001382:	b29b      	uxth	r3, r3
 8001384:	85bb      	strh	r3, [r7, #44]	; 0x2c
						z = (uint16_t)((buffer[5]<<8)+ buffer[4]);
 8001386:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800138a:	b29b      	uxth	r3, r3
 800138c:	021b      	lsls	r3, r3, #8
 800138e:	b29a      	uxth	r2, r3
 8001390:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001394:	b29b      	uxth	r3, r3
 8001396:	4413      	add	r3, r2
 8001398:	b29b      	uxth	r3, r3
 800139a:	857b      	strh	r3, [r7, #42]	; 0x2a
						asax=asa[0];
 800139c:	7e3b      	ldrb	r3, [r7, #24]
 800139e:	853b      	strh	r3, [r7, #40]	; 0x28
						asay=asa[1];
 80013a0:	7e7b      	ldrb	r3, [r7, #25]
 80013a2:	84fb      	strh	r3, [r7, #38]	; 0x26
						asaz=asa[2];
 80013a4:	7ebb      	ldrb	r3, [r7, #26]
 80013a6:	84bb      	strh	r3, [r7, #36]	; 0x24
						mag[0] = (x*((((asax-128)*0.5)/128)+1)*4912)/32760;
 80013a8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff f8c1 	bl	8000534 <__aeabi_i2d>
 80013b2:	4604      	mov	r4, r0
 80013b4:	460d      	mov	r5, r1
 80013b6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80013ba:	3b80      	subs	r3, #128	; 0x80
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff f8b9 	bl	8000534 <__aeabi_i2d>
 80013c2:	f04f 0200 	mov.w	r2, #0
 80013c6:	4b8a      	ldr	r3, [pc, #552]	; (80015f0 <Measure_M+0x320>)
 80013c8:	f7ff f91e 	bl	8000608 <__aeabi_dmul>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	4610      	mov	r0, r2
 80013d2:	4619      	mov	r1, r3
 80013d4:	f04f 0200 	mov.w	r2, #0
 80013d8:	4b86      	ldr	r3, [pc, #536]	; (80015f4 <Measure_M+0x324>)
 80013da:	f7ff fa3f 	bl	800085c <__aeabi_ddiv>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	4610      	mov	r0, r2
 80013e4:	4619      	mov	r1, r3
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	4b83      	ldr	r3, [pc, #524]	; (80015f8 <Measure_M+0x328>)
 80013ec:	f7fe ff56 	bl	800029c <__adddf3>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	4620      	mov	r0, r4
 80013f6:	4629      	mov	r1, r5
 80013f8:	f7ff f906 	bl	8000608 <__aeabi_dmul>
 80013fc:	4602      	mov	r2, r0
 80013fe:	460b      	mov	r3, r1
 8001400:	4610      	mov	r0, r2
 8001402:	4619      	mov	r1, r3
 8001404:	a376      	add	r3, pc, #472	; (adr r3, 80015e0 <Measure_M+0x310>)
 8001406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140a:	f7ff f8fd 	bl	8000608 <__aeabi_dmul>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	4610      	mov	r0, r2
 8001414:	4619      	mov	r1, r3
 8001416:	a374      	add	r3, pc, #464	; (adr r3, 80015e8 <Measure_M+0x318>)
 8001418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141c:	f7ff fa1e 	bl	800085c <__aeabi_ddiv>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	68b9      	ldr	r1, [r7, #8]
 8001426:	e9c1 2300 	strd	r2, r3, [r1]
						mag[1] = (y*((((asay-128)*0.5)/128)+1)*4912)/32760;
 800142a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff f880 	bl	8000534 <__aeabi_i2d>
 8001434:	4604      	mov	r4, r0
 8001436:	460d      	mov	r5, r1
 8001438:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800143c:	3b80      	subs	r3, #128	; 0x80
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff f878 	bl	8000534 <__aeabi_i2d>
 8001444:	f04f 0200 	mov.w	r2, #0
 8001448:	4b69      	ldr	r3, [pc, #420]	; (80015f0 <Measure_M+0x320>)
 800144a:	f7ff f8dd 	bl	8000608 <__aeabi_dmul>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	4610      	mov	r0, r2
 8001454:	4619      	mov	r1, r3
 8001456:	f04f 0200 	mov.w	r2, #0
 800145a:	4b66      	ldr	r3, [pc, #408]	; (80015f4 <Measure_M+0x324>)
 800145c:	f7ff f9fe 	bl	800085c <__aeabi_ddiv>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4610      	mov	r0, r2
 8001466:	4619      	mov	r1, r3
 8001468:	f04f 0200 	mov.w	r2, #0
 800146c:	4b62      	ldr	r3, [pc, #392]	; (80015f8 <Measure_M+0x328>)
 800146e:	f7fe ff15 	bl	800029c <__adddf3>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	4620      	mov	r0, r4
 8001478:	4629      	mov	r1, r5
 800147a:	f7ff f8c5 	bl	8000608 <__aeabi_dmul>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	4610      	mov	r0, r2
 8001484:	4619      	mov	r1, r3
 8001486:	a356      	add	r3, pc, #344	; (adr r3, 80015e0 <Measure_M+0x310>)
 8001488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148c:	f7ff f8bc 	bl	8000608 <__aeabi_dmul>
 8001490:	4602      	mov	r2, r0
 8001492:	460b      	mov	r3, r1
 8001494:	4610      	mov	r0, r2
 8001496:	4619      	mov	r1, r3
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	f103 0408 	add.w	r4, r3, #8
 800149e:	a352      	add	r3, pc, #328	; (adr r3, 80015e8 <Measure_M+0x318>)
 80014a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a4:	f7ff f9da 	bl	800085c <__aeabi_ddiv>
 80014a8:	4602      	mov	r2, r0
 80014aa:	460b      	mov	r3, r1
 80014ac:	e9c4 2300 	strd	r2, r3, [r4]
						mag[2] = (z*((((asaz-128)*0.5)/128)+1)*4912)/32760;
 80014b0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff f83d 	bl	8000534 <__aeabi_i2d>
 80014ba:	4604      	mov	r4, r0
 80014bc:	460d      	mov	r5, r1
 80014be:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80014c2:	3b80      	subs	r3, #128	; 0x80
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff f835 	bl	8000534 <__aeabi_i2d>
 80014ca:	f04f 0200 	mov.w	r2, #0
 80014ce:	4b48      	ldr	r3, [pc, #288]	; (80015f0 <Measure_M+0x320>)
 80014d0:	f7ff f89a 	bl	8000608 <__aeabi_dmul>
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	4610      	mov	r0, r2
 80014da:	4619      	mov	r1, r3
 80014dc:	f04f 0200 	mov.w	r2, #0
 80014e0:	4b44      	ldr	r3, [pc, #272]	; (80015f4 <Measure_M+0x324>)
 80014e2:	f7ff f9bb 	bl	800085c <__aeabi_ddiv>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	4610      	mov	r0, r2
 80014ec:	4619      	mov	r1, r3
 80014ee:	f04f 0200 	mov.w	r2, #0
 80014f2:	4b41      	ldr	r3, [pc, #260]	; (80015f8 <Measure_M+0x328>)
 80014f4:	f7fe fed2 	bl	800029c <__adddf3>
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	4620      	mov	r0, r4
 80014fe:	4629      	mov	r1, r5
 8001500:	f7ff f882 	bl	8000608 <__aeabi_dmul>
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	4610      	mov	r0, r2
 800150a:	4619      	mov	r1, r3
 800150c:	a334      	add	r3, pc, #208	; (adr r3, 80015e0 <Measure_M+0x310>)
 800150e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001512:	f7ff f879 	bl	8000608 <__aeabi_dmul>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	4610      	mov	r0, r2
 800151c:	4619      	mov	r1, r3
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	f103 0410 	add.w	r4, r3, #16
 8001524:	a330      	add	r3, pc, #192	; (adr r3, 80015e8 <Measure_M+0x318>)
 8001526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152a:	f7ff f997 	bl	800085c <__aeabi_ddiv>
 800152e:	4602      	mov	r2, r0
 8001530:	460b      	mov	r3, r1
 8001532:	e9c4 2300 	strd	r2, r3, [r4]

						// calibration

						mag[0] = (mag[0]-offset[0])*coeff[0];
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	e9d3 0100 	ldrd	r0, r1, [r3]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001542:	f7fe fea9 	bl	8000298 <__aeabi_dsub>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	4610      	mov	r0, r2
 800154c:	4619      	mov	r1, r3
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001554:	f7ff f858 	bl	8000608 <__aeabi_dmul>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	68b9      	ldr	r1, [r7, #8]
 800155e:	e9c1 2300 	strd	r2, r3, [r1]
						mag[1] = (mag[1]-offset[1])*coeff[1];
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	3308      	adds	r3, #8
 8001566:	e9d3 0100 	ldrd	r0, r1, [r3]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	3308      	adds	r3, #8
 800156e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001572:	f7fe fe91 	bl	8000298 <__aeabi_dsub>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	4690      	mov	r8, r2
 800157c:	4699      	mov	r9, r3
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	3308      	adds	r3, #8
 8001582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001586:	68b9      	ldr	r1, [r7, #8]
 8001588:	f101 0408 	add.w	r4, r1, #8
 800158c:	4640      	mov	r0, r8
 800158e:	4649      	mov	r1, r9
 8001590:	f7ff f83a 	bl	8000608 <__aeabi_dmul>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	e9c4 2300 	strd	r2, r3, [r4]
						mag[2] = (mag[2]-offset[2])*coeff[2];
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	3310      	adds	r3, #16
 80015a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3310      	adds	r3, #16
 80015a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ac:	f7fe fe74 	bl	8000298 <__aeabi_dsub>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	4690      	mov	r8, r2
 80015b6:	4699      	mov	r9, r3
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	3310      	adds	r3, #16
 80015bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c0:	68b9      	ldr	r1, [r7, #8]
 80015c2:	f101 0410 	add.w	r4, r1, #16
 80015c6:	4640      	mov	r0, r8
 80015c8:	4649      	mov	r1, r9
 80015ca:	f7ff f81d 	bl	8000608 <__aeabi_dmul>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	e9c4 2300 	strd	r2, r3, [r4]
						mag[1] = (mag[1]*coeff[1])-offset[1];
						mag[2] = (mag[2]*coeff[2])-offset[2];
					*/
			}
		}
}
 80015d6:	bf00      	nop
 80015d8:	3730      	adds	r7, #48	; 0x30
 80015da:	46bd      	mov	sp, r7
 80015dc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80015e0:	00000000 	.word	0x00000000
 80015e4:	40b33000 	.word	0x40b33000
 80015e8:	00000000 	.word	0x00000000
 80015ec:	40dffe00 	.word	0x40dffe00
 80015f0:	3fe00000 	.word	0x3fe00000
 80015f4:	40600000 	.word	0x40600000
 80015f8:	3ff00000 	.word	0x3ff00000
 80015fc:	00000000 	.word	0x00000000

08001600 <magnetic_field_to_degree>:
#include <math.h>



float magnetic_field_to_degree(double* mag_calibrated)
{
 8001600:	b5b0      	push	{r4, r5, r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
	float heading = atan2(-mag_calibrated[1], mag_calibrated[0]); // atan2(y,x)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3308      	adds	r3, #8
 800160c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001610:	4614      	mov	r4, r2
 8001612:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	ed93 7b00 	vldr	d7, [r3]
 800161c:	eeb0 1a47 	vmov.f32	s2, s14
 8001620:	eef0 1a67 	vmov.f32	s3, s15
 8001624:	ec45 4b10 	vmov	d0, r4, r5
 8001628:	f00c f8b3 	bl	800d792 <atan2>
 800162c:	ec53 2b10 	vmov	r2, r3, d0
 8001630:	4610      	mov	r0, r2
 8001632:	4619      	mov	r1, r3
 8001634:	f7ff faa2 	bl	8000b7c <__aeabi_d2f>
 8001638:	4603      	mov	r3, r0
 800163a:	613b      	str	r3, [r7, #16]


	  //float declinationAngle = 0.22; // Angle de déclinaison magnétique pour Paris
	  float declinationAngle = 0.21; // Angle de déclinaison magnétique pour Barcelone
 800163c:	4b1e      	ldr	r3, [pc, #120]	; (80016b8 <magnetic_field_to_degree+0xb8>)
 800163e:	60fb      	str	r3, [r7, #12]
	  heading += declinationAngle;   // site pour connaitre la déclinaison : https://www.ngdc.noaa.gov/geomag/calculators/magcalc
 8001640:	ed97 7a04 	vldr	s14, [r7, #16]
 8001644:	edd7 7a03 	vldr	s15, [r7, #12]
 8001648:	ee77 7a27 	vadd.f32	s15, s14, s15
 800164c:	edc7 7a04 	vstr	s15, [r7, #16]


	  float headingDegrees = heading * 180 / M_PI; // Conversion en degrés
 8001650:	edd7 7a04 	vldr	s15, [r7, #16]
 8001654:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80016bc <magnetic_field_to_degree+0xbc>
 8001658:	ee67 7a87 	vmul.f32	s15, s15, s14
 800165c:	ee17 0a90 	vmov	r0, s15
 8001660:	f7fe ff7a 	bl	8000558 <__aeabi_f2d>
 8001664:	a312      	add	r3, pc, #72	; (adr r3, 80016b0 <magnetic_field_to_degree+0xb0>)
 8001666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166a:	f7ff f8f7 	bl	800085c <__aeabi_ddiv>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	4610      	mov	r0, r2
 8001674:	4619      	mov	r1, r3
 8001676:	f7ff fa81 	bl	8000b7c <__aeabi_d2f>
 800167a:	4603      	mov	r3, r0
 800167c:	617b      	str	r3, [r7, #20]

	  if(headingDegrees<=0){
 800167e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001682:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800168a:	d807      	bhi.n	800169c <magnetic_field_to_degree+0x9c>
			  headingDegrees+=360;
 800168c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001690:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80016c0 <magnetic_field_to_degree+0xc0>
 8001694:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001698:	edc7 7a05 	vstr	s15, [r7, #20]
		  }



	  return headingDegrees;
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	ee07 3a90 	vmov	s15, r3
}
 80016a2:	eeb0 0a67 	vmov.f32	s0, s15
 80016a6:	3718      	adds	r7, #24
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bdb0      	pop	{r4, r5, r7, pc}
 80016ac:	f3af 8000 	nop.w
 80016b0:	54442d18 	.word	0x54442d18
 80016b4:	400921fb 	.word	0x400921fb
 80016b8:	3e570a3d 	.word	0x3e570a3d
 80016bc:	43340000 	.word	0x43340000
 80016c0:	43b40000 	.word	0x43b40000

080016c4 <Delta_theta_calculation>:

double Delta_theta_calculation(TypeDataCansat DataCansat){
 80016c4:	b084      	sub	sp, #16
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b088      	sub	sp, #32
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 80016d0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	double theta_target = 0;
 80016d4:	f04f 0200 	mov.w	r2, #0
 80016d8:	f04f 0300 	mov.w	r3, #0
 80016dc:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double latitude_vector = DataCansat.GPS.latitude_Target - DataCansat.GPS.latitude_Cansat;
 80016e0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80016e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80016e8:	f7fe fdd6 	bl	8000298 <__aeabi_dsub>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double longitude_vector = DataCansat.GPS.longitude_Target - DataCansat.GPS.longitude_Cansat;
 80016f4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80016f8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80016fc:	f7fe fdcc 	bl	8000298 <__aeabi_dsub>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	e9c7 2302 	strd	r2, r3, [r7, #8]

	theta_target = 360 - atan(longitude_vector/latitude_vector);
 8001708:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800170c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001710:	f7ff f8a4 	bl	800085c <__aeabi_ddiv>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	ec43 2b17 	vmov	d7, r2, r3
 800171c:	eeb0 0a47 	vmov.f32	s0, s14
 8001720:	eef0 0a67 	vmov.f32	s1, s15
 8001724:	f00b fe8c 	bl	800d440 <atan>
 8001728:	ec53 2b10 	vmov	r2, r3, d0
 800172c:	f04f 0000 	mov.w	r0, #0
 8001730:	490f      	ldr	r1, [pc, #60]	; (8001770 <Delta_theta_calculation+0xac>)
 8001732:	f7fe fdb1 	bl	8000298 <__aeabi_dsub>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	e9c7 2306 	strd	r2, r3, [r7, #24]

	double Delta_theta = theta_target - DataCansat.IMU.MagnetometerData.degree_angle;
 800173e:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8001742:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001746:	f7fe fda7 	bl	8000298 <__aeabi_dsub>
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	e9c7 2300 	strd	r2, r3, [r7]

	return Delta_theta;
 8001752:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001756:	ec43 2b17 	vmov	d7, r2, r3
}
 800175a:	eeb0 0a47 	vmov.f32	s0, s14
 800175e:	eef0 0a67 	vmov.f32	s1, s15
 8001762:	3720      	adds	r7, #32
 8001764:	46bd      	mov	sp, r7
 8001766:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800176a:	b004      	add	sp, #16
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	40768000 	.word	0x40768000

08001774 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4a07      	ldr	r2, [pc, #28]	; (80017a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8001784:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	4a06      	ldr	r2, [pc, #24]	; (80017a4 <vApplicationGetIdleTaskMemory+0x30>)
 800178a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2280      	movs	r2, #128	; 0x80
 8001790:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001792:	bf00      	nop
 8001794:	3714      	adds	r7, #20
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	2000021c 	.word	0x2000021c
 80017a4:	200002d0 	.word	0x200002d0

080017a8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80017a8:	b5b0      	push	{r4, r5, r7, lr}
 80017aa:	b08a      	sub	sp, #40	; 0x28
 80017ac:	af02      	add	r7, sp, #8
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80017ae:	4b15      	ldr	r3, [pc, #84]	; (8001804 <MX_FREERTOS_Init+0x5c>)
 80017b0:	1d3c      	adds	r4, r7, #4
 80017b2:	461d      	mov	r5, r3
 80017b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80017bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80017c0:	1d3b      	adds	r3, r7, #4
 80017c2:	2100      	movs	r1, #0
 80017c4:	4618      	mov	r0, r3
 80017c6:	f007 fa8c 	bl	8008ce2 <osThreadCreate>
 80017ca:	4603      	mov	r3, r0
 80017cc:	4a0e      	ldr	r2, [pc, #56]	; (8001808 <MX_FREERTOS_Init+0x60>)
 80017ce:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

xTaskCreate(Task_Drop_detection, "Drop detection", 500, NULL, osPriorityAboveNormal, &pxDrop_detection);
 80017d0:	4b0e      	ldr	r3, [pc, #56]	; (800180c <MX_FREERTOS_Init+0x64>)
 80017d2:	9301      	str	r3, [sp, #4]
 80017d4:	2301      	movs	r3, #1
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	2300      	movs	r3, #0
 80017da:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80017de:	490c      	ldr	r1, [pc, #48]	; (8001810 <MX_FREERTOS_Init+0x68>)
 80017e0:	480c      	ldr	r0, [pc, #48]	; (8001814 <MX_FREERTOS_Init+0x6c>)
 80017e2:	f007 fbef 	bl	8008fc4 <xTaskCreate>

xTaskCreate(Task_GPS_data_reading, "Lecture des donnees GPS", 500, NULL, osPriorityAboveNormal, &pxGPS_Handler);
 80017e6:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <MX_FREERTOS_Init+0x70>)
 80017e8:	9301      	str	r3, [sp, #4]
 80017ea:	2301      	movs	r3, #1
 80017ec:	9300      	str	r3, [sp, #0]
 80017ee:	2300      	movs	r3, #0
 80017f0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80017f4:	4909      	ldr	r1, [pc, #36]	; (800181c <MX_FREERTOS_Init+0x74>)
 80017f6:	480a      	ldr	r0, [pc, #40]	; (8001820 <MX_FREERTOS_Init+0x78>)
 80017f8:	f007 fbe4 	bl	8008fc4 <xTaskCreate>

  /* USER CODE END RTOS_THREADS */

}
 80017fc:	bf00      	nop
 80017fe:	3720      	adds	r7, #32
 8001800:	46bd      	mov	sp, r7
 8001802:	bdb0      	pop	{r4, r5, r7, pc}
 8001804:	0800dab8 	.word	0x0800dab8
 8001808:	20000218 	.word	0x20000218
 800180c:	20000208 	.word	0x20000208
 8001810:	0800da90 	.word	0x0800da90
 8001814:	080020b5 	.word	0x080020b5
 8001818:	20000204 	.word	0x20000204
 800181c:	0800daa0 	.word	0x0800daa0
 8001820:	08001019 	.word	0x08001019

08001824 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800182c:	2001      	movs	r0, #1
 800182e:	f007 faa4 	bl	8008d7a <osDelay>
 8001832:	e7fb      	b.n	800182c <StartDefaultTask+0x8>

08001834 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08a      	sub	sp, #40	; 0x28
 8001838:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183a:	f107 0314 	add.w	r3, r7, #20
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	605a      	str	r2, [r3, #4]
 8001844:	609a      	str	r2, [r3, #8]
 8001846:	60da      	str	r2, [r3, #12]
 8001848:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	613b      	str	r3, [r7, #16]
 800184e:	4b38      	ldr	r3, [pc, #224]	; (8001930 <MX_GPIO_Init+0xfc>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	4a37      	ldr	r2, [pc, #220]	; (8001930 <MX_GPIO_Init+0xfc>)
 8001854:	f043 0304 	orr.w	r3, r3, #4
 8001858:	6313      	str	r3, [r2, #48]	; 0x30
 800185a:	4b35      	ldr	r3, [pc, #212]	; (8001930 <MX_GPIO_Init+0xfc>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	f003 0304 	and.w	r3, r3, #4
 8001862:	613b      	str	r3, [r7, #16]
 8001864:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	4b31      	ldr	r3, [pc, #196]	; (8001930 <MX_GPIO_Init+0xfc>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	4a30      	ldr	r2, [pc, #192]	; (8001930 <MX_GPIO_Init+0xfc>)
 8001870:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001874:	6313      	str	r3, [r2, #48]	; 0x30
 8001876:	4b2e      	ldr	r3, [pc, #184]	; (8001930 <MX_GPIO_Init+0xfc>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	60bb      	str	r3, [r7, #8]
 8001886:	4b2a      	ldr	r3, [pc, #168]	; (8001930 <MX_GPIO_Init+0xfc>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	4a29      	ldr	r2, [pc, #164]	; (8001930 <MX_GPIO_Init+0xfc>)
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	6313      	str	r3, [r2, #48]	; 0x30
 8001892:	4b27      	ldr	r3, [pc, #156]	; (8001930 <MX_GPIO_Init+0xfc>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	607b      	str	r3, [r7, #4]
 80018a2:	4b23      	ldr	r3, [pc, #140]	; (8001930 <MX_GPIO_Init+0xfc>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	4a22      	ldr	r2, [pc, #136]	; (8001930 <MX_GPIO_Init+0xfc>)
 80018a8:	f043 0302 	orr.w	r3, r3, #2
 80018ac:	6313      	str	r3, [r2, #48]	; 0x30
 80018ae:	4b20      	ldr	r3, [pc, #128]	; (8001930 <MX_GPIO_Init+0xfc>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	607b      	str	r3, [r7, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2120      	movs	r1, #32
 80018be:	481d      	ldr	r0, [pc, #116]	; (8001934 <MX_GPIO_Init+0x100>)
 80018c0:	f001 fca8 	bl	8003214 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018ca:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80018ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018d4:	f107 0314 	add.w	r3, r7, #20
 80018d8:	4619      	mov	r1, r3
 80018da:	4817      	ldr	r0, [pc, #92]	; (8001938 <MX_GPIO_Init+0x104>)
 80018dc:	f001 fafe 	bl	8002edc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80018e0:	2320      	movs	r3, #32
 80018e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e4:	2301      	movs	r3, #1
 80018e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ec:	2300      	movs	r3, #0
 80018ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	4619      	mov	r1, r3
 80018f6:	480f      	ldr	r0, [pc, #60]	; (8001934 <MX_GPIO_Init+0x100>)
 80018f8:	f001 faf0 	bl	8002edc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001902:	2300      	movs	r3, #0
 8001904:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190a:	f107 0314 	add.w	r3, r7, #20
 800190e:	4619      	mov	r1, r3
 8001910:	4808      	ldr	r0, [pc, #32]	; (8001934 <MX_GPIO_Init+0x100>)
 8001912:	f001 fae3 	bl	8002edc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001916:	2200      	movs	r2, #0
 8001918:	2105      	movs	r1, #5
 800191a:	2028      	movs	r0, #40	; 0x28
 800191c:	f001 fa14 	bl	8002d48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001920:	2028      	movs	r0, #40	; 0x28
 8001922:	f001 fa2d 	bl	8002d80 <HAL_NVIC_EnableIRQ>

}
 8001926:	bf00      	nop
 8001928:	3728      	adds	r7, #40	; 0x28
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40023800 	.word	0x40023800
 8001934:	40020000 	.word	0x40020000
 8001938:	40020800 	.word	0x40020800

0800193c <GPS_data_reading>:





void GPS_data_reading(TypeDataCansat pData){
 800193c:	b084      	sub	sp, #16
 800193e:	b580      	push	{r7, lr}
 8001940:	b08e      	sub	sp, #56	; 0x38
 8001942:	af00      	add	r7, sp, #0
 8001944:	f107 0c40 	add.w	ip, r7, #64	; 0x40
 8001948:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	int i = 0;
 800194c:	2300      	movs	r3, #0
 800194e:	637b      	str	r3, [r7, #52]	; 0x34
	int n = 0;
 8001950:	2300      	movs	r3, #0
 8001952:	633b      	str	r3, [r7, #48]	; 0x30


		while(n<6){
 8001954:	e12d      	b.n	8001bb2 <GPS_data_reading+0x276>

	  		if(data_rdy == 1){
 8001956:	4b9d      	ldr	r3, [pc, #628]	; (8001bcc <GPS_data_reading+0x290>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	2b01      	cmp	r3, #1
 800195c:	f040 80eb 	bne.w	8001b36 <GPS_data_reading+0x1fa>
	  				for(int j = 0; j<=47;j++){
 8001960:	2300      	movs	r3, #0
 8001962:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001964:	e00b      	b.n	800197e <GPS_data_reading+0x42>
	  					position[j] = coordonnees[j+18]; //position[] comprend la latitude et la longitude telles que sur la trame reçue
 8001966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001968:	3312      	adds	r3, #18
 800196a:	4a99      	ldr	r2, [pc, #612]	; (8001bd0 <GPS_data_reading+0x294>)
 800196c:	5cd1      	ldrb	r1, [r2, r3]
 800196e:	4a99      	ldr	r2, [pc, #612]	; (8001bd4 <GPS_data_reading+0x298>)
 8001970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001972:	4413      	add	r3, r2
 8001974:	460a      	mov	r2, r1
 8001976:	701a      	strb	r2, [r3, #0]
	  				for(int j = 0; j<=47;j++){
 8001978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800197a:	3301      	adds	r3, #1
 800197c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800197e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001980:	2b2f      	cmp	r3, #47	; 0x2f
 8001982:	ddf0      	ble.n	8001966 <GPS_data_reading+0x2a>
	  					//En effet, les coordonnes sont d'abord de cette forme : "$GNGGA,121933.000,4902.36627,N,00204.31287,E,1,05,13.3,0.0,M,0.0,M,,*4D"
	  					//On sélectionne donc la partie qui est après l'identifieur et l'heure mais avant le ",E,".
	  				}

	  				for(int k = 0; k<=9;k++){
 8001984:	2300      	movs	r3, #0
 8001986:	62bb      	str	r3, [r7, #40]	; 0x28
 8001988:	e00b      	b.n	80019a2 <GPS_data_reading+0x66>
	  					latitude_data[k] = position[k+1]; //latitude non convertie
 800198a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800198c:	3301      	adds	r3, #1
 800198e:	4a91      	ldr	r2, [pc, #580]	; (8001bd4 <GPS_data_reading+0x298>)
 8001990:	5cd1      	ldrb	r1, [r2, r3]
 8001992:	4a91      	ldr	r2, [pc, #580]	; (8001bd8 <GPS_data_reading+0x29c>)
 8001994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001996:	4413      	add	r3, r2
 8001998:	460a      	mov	r2, r1
 800199a:	701a      	strb	r2, [r3, #0]
	  				for(int k = 0; k<=9;k++){
 800199c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800199e:	3301      	adds	r3, #1
 80019a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80019a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019a4:	2b09      	cmp	r3, #9
 80019a6:	ddf0      	ble.n	800198a <GPS_data_reading+0x4e>
	  				}
	  				for(int l = 0; l<=10;l++){
 80019a8:	2300      	movs	r3, #0
 80019aa:	627b      	str	r3, [r7, #36]	; 0x24
 80019ac:	e00b      	b.n	80019c6 <GPS_data_reading+0x8a>
	  					longitude_data[l] = position[l+14]; //longitude non convertie
 80019ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b0:	330e      	adds	r3, #14
 80019b2:	4a88      	ldr	r2, [pc, #544]	; (8001bd4 <GPS_data_reading+0x298>)
 80019b4:	5cd1      	ldrb	r1, [r2, r3]
 80019b6:	4a89      	ldr	r2, [pc, #548]	; (8001bdc <GPS_data_reading+0x2a0>)
 80019b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ba:	4413      	add	r3, r2
 80019bc:	460a      	mov	r2, r1
 80019be:	701a      	strb	r2, [r3, #0]
	  				for(int l = 0; l<=10;l++){
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c2:	3301      	adds	r3, #1
 80019c4:	627b      	str	r3, [r7, #36]	; 0x24
 80019c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c8:	2b0a      	cmp	r3, #10
 80019ca:	ddf0      	ble.n	80019ae <GPS_data_reading+0x72>
	  				}
	  				for(int h = 0; h<=4; h++){
 80019cc:	2300      	movs	r3, #0
 80019ce:	623b      	str	r3, [r7, #32]
 80019d0:	e00b      	b.n	80019ea <GPS_data_reading+0xae>
	  					altitude_data[h] = position[h+37]; //altitude non convertie
 80019d2:	6a3b      	ldr	r3, [r7, #32]
 80019d4:	3325      	adds	r3, #37	; 0x25
 80019d6:	4a7f      	ldr	r2, [pc, #508]	; (8001bd4 <GPS_data_reading+0x298>)
 80019d8:	5cd1      	ldrb	r1, [r2, r3]
 80019da:	4a81      	ldr	r2, [pc, #516]	; (8001be0 <GPS_data_reading+0x2a4>)
 80019dc:	6a3b      	ldr	r3, [r7, #32]
 80019de:	4413      	add	r3, r2
 80019e0:	460a      	mov	r2, r1
 80019e2:	701a      	strb	r2, [r3, #0]
	  				for(int h = 0; h<=4; h++){
 80019e4:	6a3b      	ldr	r3, [r7, #32]
 80019e6:	3301      	adds	r3, #1
 80019e8:	623b      	str	r3, [r7, #32]
 80019ea:	6a3b      	ldr	r3, [r7, #32]
 80019ec:	2b04      	cmp	r3, #4
 80019ee:	ddf0      	ble.n	80019d2 <GPS_data_reading+0x96>
	  				}

	  				lat2[0] = latitude_data[0];
 80019f0:	4b79      	ldr	r3, [pc, #484]	; (8001bd8 <GPS_data_reading+0x29c>)
 80019f2:	781a      	ldrb	r2, [r3, #0]
 80019f4:	4b7b      	ldr	r3, [pc, #492]	; (8001be4 <GPS_data_reading+0x2a8>)
 80019f6:	701a      	strb	r2, [r3, #0]
	  				lat2[1] = latitude_data[1]; //lat2 -> les deux digits avant la virgue du degré de la lat.
 80019f8:	4b77      	ldr	r3, [pc, #476]	; (8001bd8 <GPS_data_reading+0x29c>)
 80019fa:	785a      	ldrb	r2, [r3, #1]
 80019fc:	4b79      	ldr	r3, [pc, #484]	; (8001be4 <GPS_data_reading+0x2a8>)
 80019fe:	705a      	strb	r2, [r3, #1]

	  				for(int m = 0; m<=6;m++){
 8001a00:	2300      	movs	r3, #0
 8001a02:	61fb      	str	r3, [r7, #28]
 8001a04:	e00b      	b.n	8001a1e <GPS_data_reading+0xe2>
	  					lat7[m] = latitude_data[m+2]; //lat 7 -> ce qui reste après la virgule de la lat.
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	3302      	adds	r3, #2
 8001a0a:	4a73      	ldr	r2, [pc, #460]	; (8001bd8 <GPS_data_reading+0x29c>)
 8001a0c:	5cd1      	ldrb	r1, [r2, r3]
 8001a0e:	4a76      	ldr	r2, [pc, #472]	; (8001be8 <GPS_data_reading+0x2ac>)
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	4413      	add	r3, r2
 8001a14:	460a      	mov	r2, r1
 8001a16:	701a      	strb	r2, [r3, #0]
	  				for(int m = 0; m<=6;m++){
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	61fb      	str	r3, [r7, #28]
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	2b06      	cmp	r3, #6
 8001a22:	ddf0      	ble.n	8001a06 <GPS_data_reading+0xca>
	  				}

	  				long3[0] = longitude_data[0];
 8001a24:	4b6d      	ldr	r3, [pc, #436]	; (8001bdc <GPS_data_reading+0x2a0>)
 8001a26:	781a      	ldrb	r2, [r3, #0]
 8001a28:	4b70      	ldr	r3, [pc, #448]	; (8001bec <GPS_data_reading+0x2b0>)
 8001a2a:	701a      	strb	r2, [r3, #0]
	  				long3[1] = longitude_data[1];
 8001a2c:	4b6b      	ldr	r3, [pc, #428]	; (8001bdc <GPS_data_reading+0x2a0>)
 8001a2e:	785a      	ldrb	r2, [r3, #1]
 8001a30:	4b6e      	ldr	r3, [pc, #440]	; (8001bec <GPS_data_reading+0x2b0>)
 8001a32:	705a      	strb	r2, [r3, #1]
	  				long3[2] = longitude_data[2]; //long3 -> les trois digits avant la virgule du degré de la long.
 8001a34:	4b69      	ldr	r3, [pc, #420]	; (8001bdc <GPS_data_reading+0x2a0>)
 8001a36:	789a      	ldrb	r2, [r3, #2]
 8001a38:	4b6c      	ldr	r3, [pc, #432]	; (8001bec <GPS_data_reading+0x2b0>)
 8001a3a:	709a      	strb	r2, [r3, #2]

	  				for(int n = 0; n<=6;n++){
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	61bb      	str	r3, [r7, #24]
 8001a40:	e00b      	b.n	8001a5a <GPS_data_reading+0x11e>
	  					long7[n] = longitude_data[n+3]; //long7 -> ce qui reste après la virgule de la long.
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	3303      	adds	r3, #3
 8001a46:	4a65      	ldr	r2, [pc, #404]	; (8001bdc <GPS_data_reading+0x2a0>)
 8001a48:	5cd1      	ldrb	r1, [r2, r3]
 8001a4a:	4a69      	ldr	r2, [pc, #420]	; (8001bf0 <GPS_data_reading+0x2b4>)
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	4413      	add	r3, r2
 8001a50:	460a      	mov	r2, r1
 8001a52:	701a      	strb	r2, [r3, #0]
	  				for(int n = 0; n<=6;n++){
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	3301      	adds	r3, #1
 8001a58:	61bb      	str	r3, [r7, #24]
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	2b06      	cmp	r3, #6
 8001a5e:	ddf0      	ble.n	8001a42 <GPS_data_reading+0x106>
	  				}

	  				float deg_lat = atof(lat2);
 8001a60:	4860      	ldr	r0, [pc, #384]	; (8001be4 <GPS_data_reading+0x2a8>)
 8001a62:	f008 fd03 	bl	800a46c <atof>
 8001a66:	ec53 2b10 	vmov	r2, r3, d0
 8001a6a:	4610      	mov	r0, r2
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	f7ff f885 	bl	8000b7c <__aeabi_d2f>
 8001a72:	4603      	mov	r3, r0
 8001a74:	613b      	str	r3, [r7, #16]
	  				float reste_lat = atof(lat7); //conversion du char[lat] en float[lat]
 8001a76:	485c      	ldr	r0, [pc, #368]	; (8001be8 <GPS_data_reading+0x2ac>)
 8001a78:	f008 fcf8 	bl	800a46c <atof>
 8001a7c:	ec53 2b10 	vmov	r2, r3, d0
 8001a80:	4610      	mov	r0, r2
 8001a82:	4619      	mov	r1, r3
 8001a84:	f7ff f87a 	bl	8000b7c <__aeabi_d2f>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	60fb      	str	r3, [r7, #12]

	  				float deg_long = atof(long3);
 8001a8c:	4857      	ldr	r0, [pc, #348]	; (8001bec <GPS_data_reading+0x2b0>)
 8001a8e:	f008 fced 	bl	800a46c <atof>
 8001a92:	ec53 2b10 	vmov	r2, r3, d0
 8001a96:	4610      	mov	r0, r2
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f7ff f86f 	bl	8000b7c <__aeabi_d2f>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	60bb      	str	r3, [r7, #8]
	  				float reste_long = atof(long7); //conversion du char[long] en float[long]
 8001aa2:	4853      	ldr	r0, [pc, #332]	; (8001bf0 <GPS_data_reading+0x2b4>)
 8001aa4:	f008 fce2 	bl	800a46c <atof>
 8001aa8:	ec53 2b10 	vmov	r2, r3, d0
 8001aac:	4610      	mov	r0, r2
 8001aae:	4619      	mov	r1, r3
 8001ab0:	f7ff f864 	bl	8000b7c <__aeabi_d2f>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	607b      	str	r3, [r7, #4]

	  				pData.GPS.latitude_Cansat = deg_lat + (reste_lat/60); //latitude convertie
 8001ab8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001abc:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8001bf4 <GPS_data_reading+0x2b8>
 8001ac0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001ac4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ac8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001acc:	ee17 0a90 	vmov	r0, s15
 8001ad0:	f7fe fd42 	bl	8000558 <__aeabi_f2d>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	  				pData.GPS.longitude_Cansat = deg_long + (reste_long/60); //longitude convertie
 8001adc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ae0:	eddf 6a44 	vldr	s13, [pc, #272]	; 8001bf4 <GPS_data_reading+0x2b8>
 8001ae4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001ae8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001aec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001af0:	ee17 0a90 	vmov	r0, s15
 8001af4:	f7fe fd30 	bl	8000558 <__aeabi_f2d>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	  				pData.GPS.altitude_Cansat = atof(altitude_data); // altitude convertie
 8001b00:	4837      	ldr	r0, [pc, #220]	; (8001be0 <GPS_data_reading+0x2a4>)
 8001b02:	f008 fcb3 	bl	800a46c <atof>
 8001b06:	eeb0 7a40 	vmov.f32	s14, s0
 8001b0a:	eef0 7a60 	vmov.f32	s15, s1
 8001b0e:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50

	  				//nombre de satellites
	  				for(int k = 0; k<2;k++){
 8001b12:	2300      	movs	r3, #0
 8001b14:	617b      	str	r3, [r7, #20]
 8001b16:	e00b      	b.n	8001b30 <GPS_data_reading+0x1f4>
	  				satellites[k] = coordonnees[k+45]; //satellites[] indique le nombre de satellites captés
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	332d      	adds	r3, #45	; 0x2d
 8001b1c:	4a2c      	ldr	r2, [pc, #176]	; (8001bd0 <GPS_data_reading+0x294>)
 8001b1e:	5cd1      	ldrb	r1, [r2, r3]
 8001b20:	4a35      	ldr	r2, [pc, #212]	; (8001bf8 <GPS_data_reading+0x2bc>)
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	4413      	add	r3, r2
 8001b26:	460a      	mov	r2, r1
 8001b28:	701a      	strb	r2, [r3, #0]
	  				for(int k = 0; k<2;k++){
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	617b      	str	r3, [r7, #20]
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	ddf0      	ble.n	8001b18 <GPS_data_reading+0x1dc>
	  				}
	  		}
	  		if(uart_gps_rx[0]==10){
 8001b36:	4b31      	ldr	r3, [pc, #196]	; (8001bfc <GPS_data_reading+0x2c0>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	2b0a      	cmp	r3, #10
 8001b3c:	d039      	beq.n	8001bb2 <GPS_data_reading+0x276>
	  			//HAL_UART_Transmit(&huart2, "\r\n", 2, HAL_MAX_DELAY); //Arrangement de la trame
	  		}
	  		else{
	  			uart_pc_tx[0]=uart_gps_rx[0];
 8001b3e:	4b2f      	ldr	r3, [pc, #188]	; (8001bfc <GPS_data_reading+0x2c0>)
 8001b40:	781a      	ldrb	r2, [r3, #0]
 8001b42:	4b2f      	ldr	r3, [pc, #188]	; (8001c00 <GPS_data_reading+0x2c4>)
 8001b44:	701a      	strb	r2, [r3, #0]
	  			//HAL_UART_Transmit(&huart2, uart_pc_tx, 1, HAL_MAX_DELAY);
	  			coordonnees[i] = uart_pc_tx[0]; //On copie ce qui passe dans l'UART dans un tableau coordonnees[i].
 8001b46:	4b2e      	ldr	r3, [pc, #184]	; (8001c00 <GPS_data_reading+0x2c4>)
 8001b48:	7819      	ldrb	r1, [r3, #0]
 8001b4a:	4a21      	ldr	r2, [pc, #132]	; (8001bd0 <GPS_data_reading+0x294>)
 8001b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b4e:	4413      	add	r3, r2
 8001b50:	460a      	mov	r2, r1
 8001b52:	701a      	strb	r2, [r3, #0]
	  			if(i >= 4){
 8001b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b56:	2b03      	cmp	r3, #3
 8001b58:	dd25      	ble.n	8001ba6 <GPS_data_reading+0x26a>
	  				if(strncmp("OK*35",&coordonnees[i-4],5) == 0){
 8001b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b5c:	3b04      	subs	r3, #4
 8001b5e:	4a1c      	ldr	r2, [pc, #112]	; (8001bd0 <GPS_data_reading+0x294>)
 8001b60:	4413      	add	r3, r2
 8001b62:	2205      	movs	r2, #5
 8001b64:	4619      	mov	r1, r3
 8001b66:	4827      	ldr	r0, [pc, #156]	; (8001c04 <GPS_data_reading+0x2c8>)
 8001b68:	f008 ff9d 	bl	800aaa6 <strncmp>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d10d      	bne.n	8001b8e <GPS_data_reading+0x252>
	  						i = 0; //Si on trouve "OK", on réinitialise i à 0 pour synchroniser notre trame.
 8001b72:	2300      	movs	r3, #0
 8001b74:	637b      	str	r3, [r7, #52]	; 0x34
	  						if(first_data == 1){
 8001b76:	4b24      	ldr	r3, [pc, #144]	; (8001c08 <GPS_data_reading+0x2cc>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d103      	bne.n	8001b86 <GPS_data_reading+0x24a>
	  							data_rdy = 1; //Si la trame est initialisée, le premier caractère du tableau voulu est prêt.
 8001b7e:	4b13      	ldr	r3, [pc, #76]	; (8001bcc <GPS_data_reading+0x290>)
 8001b80:	2201      	movs	r2, #1
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	e012      	b.n	8001bac <GPS_data_reading+0x270>
	  						}
	  						else first_data = 1; //Permet d'enregistrer le tableau désiré.
 8001b86:	4b20      	ldr	r3, [pc, #128]	; (8001c08 <GPS_data_reading+0x2cc>)
 8001b88:	2201      	movs	r2, #1
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	e00e      	b.n	8001bac <GPS_data_reading+0x270>
	  					}
	  				else{
	  						if(i == GPS_TRAME_SIZE-1){
 8001b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b90:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d102      	bne.n	8001b9e <GPS_data_reading+0x262>
	  							i = 0;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	637b      	str	r3, [r7, #52]	; 0x34
 8001b9c:	e006      	b.n	8001bac <GPS_data_reading+0x270>
	  						}
	  						else{
	  							i++;
 8001b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	637b      	str	r3, [r7, #52]	; 0x34
 8001ba4:	e002      	b.n	8001bac <GPS_data_reading+0x270>
	  					}

	  				}
	  			}
	  			else i++;
 8001ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ba8:	3301      	adds	r3, #1
 8001baa:	637b      	str	r3, [r7, #52]	; 0x34
	  			n++ ;
 8001bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bae:	3301      	adds	r3, #1
 8001bb0:	633b      	str	r3, [r7, #48]	; 0x30
		while(n<6){
 8001bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bb4:	2b05      	cmp	r3, #5
 8001bb6:	f77f aece 	ble.w	8001956 <GPS_data_reading+0x1a>
	  		}
	}
}
 8001bba:	bf00      	nop
 8001bbc:	bf00      	nop
 8001bbe:	3738      	adds	r7, #56	; 0x38
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001bc6:	b004      	add	sp, #16
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	20000910 	.word	0x20000910
 8001bd0:	200004d0 	.word	0x200004d0
 8001bd4:	200008d8 	.word	0x200008d8
 8001bd8:	200008c4 	.word	0x200008c4
 8001bdc:	200008b8 	.word	0x200008b8
 8001be0:	200008d0 	.word	0x200008d0
 8001be4:	200008f0 	.word	0x200008f0
 8001be8:	200008f4 	.word	0x200008f4
 8001bec:	200008fc 	.word	0x200008fc
 8001bf0:	20000900 	.word	0x20000900
 8001bf4:	42700000 	.word	0x42700000
 8001bf8:	20000908 	.word	0x20000908
 8001bfc:	20000a34 	.word	0x20000a34
 8001c00:	20000a38 	.word	0x20000a38
 8001c04:	0800dad4 	.word	0x0800dad4
 8001c08:	2000090c 	.word	0x2000090c

08001c0c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c10:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <MX_I2C1_Init+0x50>)
 8001c12:	4a13      	ldr	r2, [pc, #76]	; (8001c60 <MX_I2C1_Init+0x54>)
 8001c14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001c16:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <MX_I2C1_Init+0x50>)
 8001c18:	4a12      	ldr	r2, [pc, #72]	; (8001c64 <MX_I2C1_Init+0x58>)
 8001c1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c1c:	4b0f      	ldr	r3, [pc, #60]	; (8001c5c <MX_I2C1_Init+0x50>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c22:	4b0e      	ldr	r3, [pc, #56]	; (8001c5c <MX_I2C1_Init+0x50>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c28:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <MX_I2C1_Init+0x50>)
 8001c2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c2e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c30:	4b0a      	ldr	r3, [pc, #40]	; (8001c5c <MX_I2C1_Init+0x50>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c36:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <MX_I2C1_Init+0x50>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c3c:	4b07      	ldr	r3, [pc, #28]	; (8001c5c <MX_I2C1_Init+0x50>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c42:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <MX_I2C1_Init+0x50>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c48:	4804      	ldr	r0, [pc, #16]	; (8001c5c <MX_I2C1_Init+0x50>)
 8001c4a:	f001 fb21 	bl	8003290 <HAL_I2C_Init>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c54:	f000 fa28 	bl	80020a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c58:	bf00      	nop
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	20000914 	.word	0x20000914
 8001c60:	40005400 	.word	0x40005400
 8001c64:	000186a0 	.word	0x000186a0

08001c68 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08a      	sub	sp, #40	; 0x28
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c70:	f107 0314 	add.w	r3, r7, #20
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a21      	ldr	r2, [pc, #132]	; (8001d0c <HAL_I2C_MspInit+0xa4>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d13c      	bne.n	8001d04 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	613b      	str	r3, [r7, #16]
 8001c8e:	4b20      	ldr	r3, [pc, #128]	; (8001d10 <HAL_I2C_MspInit+0xa8>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	4a1f      	ldr	r2, [pc, #124]	; (8001d10 <HAL_I2C_MspInit+0xa8>)
 8001c94:	f043 0302 	orr.w	r3, r3, #2
 8001c98:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9a:	4b1d      	ldr	r3, [pc, #116]	; (8001d10 <HAL_I2C_MspInit+0xa8>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	613b      	str	r3, [r7, #16]
 8001ca4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001ca6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001caa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cac:	2312      	movs	r3, #18
 8001cae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cb8:	2304      	movs	r3, #4
 8001cba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cbc:	f107 0314 	add.w	r3, r7, #20
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4814      	ldr	r0, [pc, #80]	; (8001d14 <HAL_I2C_MspInit+0xac>)
 8001cc4:	f001 f90a 	bl	8002edc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <HAL_I2C_MspInit+0xa8>)
 8001cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd0:	4a0f      	ldr	r2, [pc, #60]	; (8001d10 <HAL_I2C_MspInit+0xa8>)
 8001cd2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cd6:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd8:	4b0d      	ldr	r3, [pc, #52]	; (8001d10 <HAL_I2C_MspInit+0xa8>)
 8001cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	2105      	movs	r1, #5
 8001ce8:	201f      	movs	r0, #31
 8001cea:	f001 f82d 	bl	8002d48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001cee:	201f      	movs	r0, #31
 8001cf0:	f001 f846 	bl	8002d80 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	2105      	movs	r1, #5
 8001cf8:	2020      	movs	r0, #32
 8001cfa:	f001 f825 	bl	8002d48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001cfe:	2020      	movs	r0, #32
 8001d00:	f001 f83e 	bl	8002d80 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001d04:	bf00      	nop
 8001d06:	3728      	adds	r7, #40	; 0x28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40005400 	.word	0x40005400
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40020400 	.word	0x40020400

08001d18 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch) {
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001d20:	1d39      	adds	r1, r7, #4
 8001d22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d26:	2201      	movs	r2, #1
 8001d28:	4803      	ldr	r0, [pc, #12]	; (8001d38 <__io_putchar+0x20>)
 8001d2a:	f005 ff90 	bl	8007c4e <HAL_UART_Transmit>
return ch;
 8001d2e:	687b      	ldr	r3, [r7, #4]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	20000b5c 	.word	0x20000b5c

08001d3c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){ // fonction de callback de l'UART
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
		HAL_UART_Receive_IT(&huart1, &uart_gps_rx, 1);

		portYIELD_FROM_ISR(Task_GPS_data_reading);

	}
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001d56:	af02      	add	r7, sp, #8
	  *            entrée des données GPS de la cible
	  ***********************************************************/

	  //Position GPS cible : 43°13'18.7"N 0°03'10.0"W  --> données telles que décrites dans le règlement 2023

	  pDataCansat.GPS.latitude_Target = 43.2218611;
 8001d58:	4987      	ldr	r1, [pc, #540]	; (8001f78 <main+0x228>)
 8001d5a:	a383      	add	r3, pc, #524	; (adr r3, 8001f68 <main+0x218>)
 8001d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d60:	e9c1 2308 	strd	r2, r3, [r1, #32]
	  pDataCansat.GPS.longitude_Target = -0.05277777777777778;
 8001d64:	4984      	ldr	r1, [pc, #528]	; (8001f78 <main+0x228>)
 8001d66:	a382      	add	r3, pc, #520	; (adr r3, 8001f70 <main+0x220>)
 8001d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d6c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d70:	f000 fecc 	bl	8002b0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d74:	f000 f91c 	bl	8001fb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d78:	f7ff fd5c 	bl	8001834 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001d7c:	f000 fdce 	bl	800291c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001d80:	f7ff ff44 	bl	8001c0c <MX_I2C1_Init>
  MX_TIM3_Init();
 8001d84:	f000 fcb2 	bl	80026ec <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001d88:	f000 fd9e 	bl	80028c8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001d8c:	f000 fc4a 	bl	8002624 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  printf("------------------------\r\n");
 8001d90:	487a      	ldr	r0, [pc, #488]	; (8001f7c <main+0x22c>)
 8001d92:	f008 fdc3 	bl	800a91c <puts>
  printf("------------------------\r\n");
 8001d96:	4879      	ldr	r0, [pc, #484]	; (8001f7c <main+0x22c>)
 8001d98:	f008 fdc0 	bl	800a91c <puts>
  printf("------------------------\r\n");
 8001d9c:	4877      	ldr	r0, [pc, #476]	; (8001f7c <main+0x22c>)
 8001d9e:	f008 fdbd 	bl	800a91c <puts>
  printf("------------------------\r\n");
 8001da2:	4876      	ldr	r0, [pc, #472]	; (8001f7c <main+0x22c>)
 8001da4:	f008 fdba 	bl	800a91c <puts>
  printf("initialisation du CanSat\r\n");
 8001da8:	4875      	ldr	r0, [pc, #468]	; (8001f80 <main+0x230>)
 8001daa:	f008 fdb7 	bl	800a91c <puts>
  printf("------------------------\r\n");
 8001dae:	4873      	ldr	r0, [pc, #460]	; (8001f7c <main+0x22c>)
 8001db0:	f008 fdb4 	bl	800a91c <puts>
  printf("------------------------\r\n");
 8001db4:	4871      	ldr	r0, [pc, #452]	; (8001f7c <main+0x22c>)
 8001db6:	f008 fdb1 	bl	800a91c <puts>
  printf("------------------------\r\n");
 8001dba:	4870      	ldr	r0, [pc, #448]	; (8001f7c <main+0x22c>)
 8001dbc:	f008 fdae 	bl	800a91c <puts>
  printf("------------------------\r\n");
 8001dc0:	486e      	ldr	r0, [pc, #440]	; (8001f7c <main+0x22c>)
 8001dc2:	f008 fdab 	bl	800a91c <puts>

    int x=0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
    int i=0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
    int Devices[100]={0};
 8001dd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001de0:	461a      	mov	r2, r3
 8001de2:	2100      	movs	r1, #0
 8001de4:	f008 fc77 	bl	800a6d6 <memset>

   uint8_t pData[100] = {0};
 8001de8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	3304      	adds	r3, #4
 8001df6:	2260      	movs	r2, #96	; 0x60
 8001df8:	2100      	movs	r1, #0
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f008 fc6b 	bl	800a6d6 <memset>
   /**********                           *********
    * ******** INIT MPU-9250 (IMU_10DOF) *********
    * ********                           *********
    */

   printf("initialisation de l'IMU \r\n \r\n");
 8001e00:	4860      	ldr	r0, [pc, #384]	; (8001f84 <main+0x234>)
 8001e02:	f008 fd8b 	bl	800a91c <puts>

   // Initialisation du capteur MPU-9250

   Init(&hi2c1);
 8001e06:	4860      	ldr	r0, [pc, #384]	; (8001f88 <main+0x238>)
 8001e08:	f7ff f95e 	bl	80010c8 <Init>

   // vérification identité capteur MPU-9250

   pData[0]= WHO_AM_I_MPU9250;
 8001e0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e10:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e14:	2275      	movs	r2, #117	; 0x75
 8001e16:	701a      	strb	r2, [r3, #0]
    if(HAL_I2C_Master_Transmit(&hi2c1, MPU_ADD, pData, 1, HAL_MAX_DELAY) != HAL_OK )
 8001e18:	1d3a      	adds	r2, r7, #4
 8001e1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	2301      	movs	r3, #1
 8001e22:	21d0      	movs	r1, #208	; 0xd0
 8001e24:	4858      	ldr	r0, [pc, #352]	; (8001f88 <main+0x238>)
 8001e26:	f001 fb77 	bl	8003518 <HAL_I2C_Master_Transmit>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d002      	beq.n	8001e36 <main+0xe6>
    {
  	  printf("il y a une erreur avec I2C Master Transmit \r\n");
 8001e30:	4856      	ldr	r0, [pc, #344]	; (8001f8c <main+0x23c>)
 8001e32:	f008 fd73 	bl	800a91c <puts>
    }
    if(HAL_I2C_Master_Receive(&hi2c1, MPU_ADD, pData, 1, HAL_MAX_DELAY) != HAL_OK )
 8001e36:	1d3a      	adds	r2, r7, #4
 8001e38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e3c:	9300      	str	r3, [sp, #0]
 8001e3e:	2301      	movs	r3, #1
 8001e40:	21d0      	movs	r1, #208	; 0xd0
 8001e42:	4851      	ldr	r0, [pc, #324]	; (8001f88 <main+0x238>)
 8001e44:	f001 fc66 	bl	8003714 <HAL_I2C_Master_Receive>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d002      	beq.n	8001e54 <main+0x104>
    {
  	  printf("il y a une erreur avec I2C Master Receive \r\n");
 8001e4e:	4850      	ldr	r0, [pc, #320]	; (8001f90 <main+0x240>)
 8001e50:	f008 fd64 	bl	800a91c <puts>
    }


    printf(" L'identifiant du capteur est : %x \r\n", pData[0]);
 8001e54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e58:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	4619      	mov	r1, r3
 8001e60:	484c      	ldr	r0, [pc, #304]	; (8001f94 <main+0x244>)
 8001e62:	f008 fcd5 	bl	800a810 <iprintf>
    if((pData[0] =! 0x71))
 8001e66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e6e:	2200      	movs	r2, #0
 8001e70:	701a      	strb	r2, [r3, #0]
    {
  	  printf("ce n'est pas le bon capteur \r\n");
    }
    else
  	  printf("MPU-9250 identified \r\n");
 8001e72:	4849      	ldr	r0, [pc, #292]	; (8001f98 <main+0x248>)
 8001e74:	f008 fd52 	bl	800a91c <puts>

    // vérification identité AK8963C (magnétomètre)

    pData[0]= WHO_AM_I_AK8963;
 8001e78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e80:	2200      	movs	r2, #0
 8001e82:	701a      	strb	r2, [r3, #0]
      if(HAL_I2C_Master_Transmit(&hi2c1, MAGNETO_ADD, pData, 1, HAL_MAX_DELAY) != HAL_OK )
 8001e84:	1d3a      	adds	r2, r7, #4
 8001e86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e8a:	9300      	str	r3, [sp, #0]
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	2118      	movs	r1, #24
 8001e90:	483d      	ldr	r0, [pc, #244]	; (8001f88 <main+0x238>)
 8001e92:	f001 fb41 	bl	8003518 <HAL_I2C_Master_Transmit>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d002      	beq.n	8001ea2 <main+0x152>
      {
    	  printf("il y a une erreur avec I2C Master Transmit \r\n");
 8001e9c:	483b      	ldr	r0, [pc, #236]	; (8001f8c <main+0x23c>)
 8001e9e:	f008 fd3d 	bl	800a91c <puts>
      }
      if(HAL_I2C_Master_Receive(&hi2c1, MAGNETO_ADD, pData, 1, HAL_MAX_DELAY) != HAL_OK )
 8001ea2:	1d3a      	adds	r2, r7, #4
 8001ea4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ea8:	9300      	str	r3, [sp, #0]
 8001eaa:	2301      	movs	r3, #1
 8001eac:	2118      	movs	r1, #24
 8001eae:	4836      	ldr	r0, [pc, #216]	; (8001f88 <main+0x238>)
 8001eb0:	f001 fc30 	bl	8003714 <HAL_I2C_Master_Receive>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d002      	beq.n	8001ec0 <main+0x170>
      {
    	  printf("il y a une erreur avec I2C Master Receive \r\n");
 8001eba:	4835      	ldr	r0, [pc, #212]	; (8001f90 <main+0x240>)
 8001ebc:	f008 fd2e 	bl	800a91c <puts>
      }


      printf(" L'identifiant du magnétomètre est : %x \r\n", pData[0]);
 8001ec0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ec4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4833      	ldr	r0, [pc, #204]	; (8001f9c <main+0x24c>)
 8001ece:	f008 fc9f 	bl	800a810 <iprintf>
      if((pData[0] =! 0x48))
 8001ed2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eda:	2200      	movs	r2, #0
 8001edc:	701a      	strb	r2, [r3, #0]
      {
    	  printf("ce n'est pas le bon capteur \r\n  ****** \r\n ****** \r\n ****** \r\n");
      }
      else
    	  printf("AK8963C identified \r\n  ****** \r\n ****** \r\n ****** \r\n");
 8001ede:	4830      	ldr	r0, [pc, #192]	; (8001fa0 <main+0x250>)
 8001ee0:	f008 fd1c 	bl	800a91c <puts>



  // check les périphériques i2c disponibles

    for (i=0;i<256;i++){
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 8001eea:	e02a      	b.n	8001f42 <main+0x1f2>
         	  if(HAL_I2C_IsDeviceReady(&hi2c1, i, 4, 20)==HAL_OK){
 8001eec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ef0:	b299      	uxth	r1, r3
 8001ef2:	2314      	movs	r3, #20
 8001ef4:	2204      	movs	r2, #4
 8001ef6:	4824      	ldr	r0, [pc, #144]	; (8001f88 <main+0x238>)
 8001ef8:	f002 f952 	bl	80041a0 <HAL_I2C_IsDeviceReady>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d11a      	bne.n	8001f38 <main+0x1e8>
         		  Devices[x]=i;
 8001f02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f06:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001f0a:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8001f0e:	f8d7 11f8 	ldr.w	r1, [r7, #504]	; 0x1f8
 8001f12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
         		  printf("%d \r\n",Devices[x]);
 8001f16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f1a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001f1e:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8001f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f26:	4619      	mov	r1, r3
 8001f28:	481e      	ldr	r0, [pc, #120]	; (8001fa4 <main+0x254>)
 8001f2a:	f008 fc71 	bl	800a810 <iprintf>
         		  x=x+1;
 8001f2e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001f32:	3301      	adds	r3, #1
 8001f34:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
    for (i=0;i<256;i++){
 8001f38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 8001f42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f46:	2bff      	cmp	r3, #255	; 0xff
 8001f48:	ddd0      	ble.n	8001eec <main+0x19c>
    /**********                    *********
     * ******** INITIALISATION GPS *********
     * ********                    *********
     */

    HAL_UART_Receive_IT(&huart1, uart_gps_rx, 1);
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	4916      	ldr	r1, [pc, #88]	; (8001fa8 <main+0x258>)
 8001f4e:	4817      	ldr	r0, [pc, #92]	; (8001fac <main+0x25c>)
 8001f50:	f005 ff0f 	bl	8007d72 <HAL_UART_Receive_IT>
     * ********                       *********
     */



  vTaskStartScheduler();
 8001f54:	f007 fac6 	bl	80094e4 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001f58:	f7ff fc26 	bl	80017a8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001f5c:	f006 feba 	bl	8008cd4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001f60:	e7fe      	b.n	8001f60 <main+0x210>
 8001f62:	bf00      	nop
 8001f64:	f3af 8000 	nop.w
 8001f68:	f1cc6096 	.word	0xf1cc6096
 8001f6c:	40459c65 	.word	0x40459c65
 8001f70:	5b05b05b 	.word	0x5b05b05b
 8001f74:	bfab05b0 	.word	0xbfab05b0
 8001f78:	20000968 	.word	0x20000968
 8001f7c:	0800dadc 	.word	0x0800dadc
 8001f80:	0800daf8 	.word	0x0800daf8
 8001f84:	0800db14 	.word	0x0800db14
 8001f88:	20000914 	.word	0x20000914
 8001f8c:	0800db34 	.word	0x0800db34
 8001f90:	0800db64 	.word	0x0800db64
 8001f94:	0800db90 	.word	0x0800db90
 8001f98:	0800dbb8 	.word	0x0800dbb8
 8001f9c:	0800dbd0 	.word	0x0800dbd0
 8001fa0:	0800dc00 	.word	0x0800dc00
 8001fa4:	0800dc34 	.word	0x0800dc34
 8001fa8:	20000a34 	.word	0x20000a34
 8001fac:	20000b18 	.word	0x20000b18

08001fb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b094      	sub	sp, #80	; 0x50
 8001fb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fb6:	f107 0320 	add.w	r3, r7, #32
 8001fba:	2230      	movs	r2, #48	; 0x30
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f008 fb89 	bl	800a6d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fc4:	f107 030c 	add.w	r3, r7, #12
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	60da      	str	r2, [r3, #12]
 8001fd2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	60bb      	str	r3, [r7, #8]
 8001fd8:	4b28      	ldr	r3, [pc, #160]	; (800207c <SystemClock_Config+0xcc>)
 8001fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fdc:	4a27      	ldr	r2, [pc, #156]	; (800207c <SystemClock_Config+0xcc>)
 8001fde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe2:	6413      	str	r3, [r2, #64]	; 0x40
 8001fe4:	4b25      	ldr	r3, [pc, #148]	; (800207c <SystemClock_Config+0xcc>)
 8001fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fec:	60bb      	str	r3, [r7, #8]
 8001fee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	607b      	str	r3, [r7, #4]
 8001ff4:	4b22      	ldr	r3, [pc, #136]	; (8002080 <SystemClock_Config+0xd0>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a21      	ldr	r2, [pc, #132]	; (8002080 <SystemClock_Config+0xd0>)
 8001ffa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ffe:	6013      	str	r3, [r2, #0]
 8002000:	4b1f      	ldr	r3, [pc, #124]	; (8002080 <SystemClock_Config+0xd0>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002008:	607b      	str	r3, [r7, #4]
 800200a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800200c:	2302      	movs	r3, #2
 800200e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002010:	2301      	movs	r3, #1
 8002012:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002014:	2310      	movs	r3, #16
 8002016:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002018:	2302      	movs	r3, #2
 800201a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800201c:	2300      	movs	r3, #0
 800201e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002020:	2310      	movs	r3, #16
 8002022:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002024:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002028:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800202a:	2304      	movs	r3, #4
 800202c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800202e:	2304      	movs	r3, #4
 8002030:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002032:	f107 0320 	add.w	r3, r7, #32
 8002036:	4618      	mov	r0, r3
 8002038:	f004 fb66 	bl	8006708 <HAL_RCC_OscConfig>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002042:	f000 f831 	bl	80020a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002046:	230f      	movs	r3, #15
 8002048:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800204a:	2302      	movs	r3, #2
 800204c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002052:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002056:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002058:	2300      	movs	r3, #0
 800205a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800205c:	f107 030c 	add.w	r3, r7, #12
 8002060:	2102      	movs	r1, #2
 8002062:	4618      	mov	r0, r3
 8002064:	f004 fdc8 	bl	8006bf8 <HAL_RCC_ClockConfig>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800206e:	f000 f81b 	bl	80020a8 <Error_Handler>
  }
}
 8002072:	bf00      	nop
 8002074:	3750      	adds	r7, #80	; 0x50
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40023800 	.word	0x40023800
 8002080:	40007000 	.word	0x40007000

08002084 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a04      	ldr	r2, [pc, #16]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d101      	bne.n	800209a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002096:	f000 fd5b 	bl	8002b50 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800209a:	bf00      	nop
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40010000 	.word	0x40010000

080020a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020ac:	b672      	cpsid	i
}
 80020ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020b0:	e7fe      	b.n	80020b0 <Error_Handler+0x8>
	...

080020b4 <Task_Drop_detection>:
	 * @param Drop_flag Drapeau qui permet d'indiquer que le Cansat a été largué
	 * @retval None
	 */

void Task_Drop_detection(void * pvParameters)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b088      	sub	sp, #32
 80020b8:	af02      	add	r7, sp, #8
 80020ba:	6078      	str	r0, [r7, #4]
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = portTICK_PERIOD_MS/500;
 80020bc:	2300      	movs	r3, #0
 80020be:	617b      	str	r3, [r7, #20]

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 80020c0:	f007 fb24 	bl	800970c <xTaskGetTickCount>
 80020c4:	4603      	mov	r3, r0
 80020c6:	60fb      	str	r3, [r7, #12]

	for(;;)
	{

		vTaskDelayUntil( &xLastWakeTime, xFrequency );
 80020c8:	f107 030c 	add.w	r3, r7, #12
 80020cc:	6979      	ldr	r1, [r7, #20]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f007 f956 	bl	8009380 <vTaskDelayUntil>

		uint16_t gpio_value = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);  // prend la valeur 1 lorsque pas d'obstacles
 80020d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020d8:	480c      	ldr	r0, [pc, #48]	; (800210c <Task_Drop_detection+0x58>)
 80020da:	f001 f883 	bl	80031e4 <HAL_GPIO_ReadPin>
 80020de:	4603      	mov	r3, r0
 80020e0:	827b      	strh	r3, [r7, #18]
																	// prend la valeur 0 lorsque detection d'un obstacle
		if(gpio_value == 1)
 80020e2:	8a7b      	ldrh	r3, [r7, #18]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d1ef      	bne.n	80020c8 <Task_Drop_detection+0x14>
		{
			Drop_flag = 1;
 80020e8:	4b09      	ldr	r3, [pc, #36]	; (8002110 <Task_Drop_detection+0x5c>)
 80020ea:	2201      	movs	r2, #1
 80020ec:	601a      	str	r2, [r3, #0]
			xTaskCreate(Task_lancement_Cansat, "Lancement du Cansat", 500, NULL, osPriorityHigh, &pxLancement_Cansat);
 80020ee:	4b09      	ldr	r3, [pc, #36]	; (8002114 <Task_Drop_detection+0x60>)
 80020f0:	9301      	str	r3, [sp, #4]
 80020f2:	2302      	movs	r3, #2
 80020f4:	9300      	str	r3, [sp, #0]
 80020f6:	2300      	movs	r3, #0
 80020f8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80020fc:	4906      	ldr	r1, [pc, #24]	; (8002118 <Task_Drop_detection+0x64>)
 80020fe:	4807      	ldr	r0, [pc, #28]	; (800211c <Task_Drop_detection+0x68>)
 8002100:	f006 ff60 	bl	8008fc4 <xTaskCreate>
			vTaskDelete(NULL);
 8002104:	2000      	movs	r0, #0
 8002106:	f007 f8ab 	bl	8009260 <vTaskDelete>
	{
 800210a:	e7dd      	b.n	80020c8 <Task_Drop_detection+0x14>
 800210c:	40020000 	.word	0x40020000
 8002110:	20000a30 	.word	0x20000a30
 8002114:	2000020c 	.word	0x2000020c
 8002118:	0800dc3c 	.word	0x0800dc3c
 800211c:	08000f8d 	.word	0x08000f8d

08002120 <servoSetPositionLeft>:
 	 * @brief Positionnement du servo gauche
 	 * @Note Cette fonction permet de placer le servo comme on le souhaite avec 4 positions différentes
	 * @param int position : 0,1,2 ou 3
	 * @retval None
	 */
void servoSetPositionLeft (int position){
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
	if (position == 0){
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d103      	bne.n	8002136 <servoSetPositionLeft+0x16>
		TIM1->CCR1 = POSITION_0_LEFT;
 800212e:	4b10      	ldr	r3, [pc, #64]	; (8002170 <servoSetPositionLeft+0x50>)
 8002130:	2250      	movs	r2, #80	; 0x50
 8002132:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR1 = POSITION_3_LEFT;
	}
	else {
		printf("Vous ne devez mettre en entree que 0,1,2 ou 3 \r\n");
	}
}
 8002134:	e017      	b.n	8002166 <servoSetPositionLeft+0x46>
	else if (position == 1){
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d103      	bne.n	8002144 <servoSetPositionLeft+0x24>
			TIM1->CCR1 = POSITION_1_LEFT;
 800213c:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <servoSetPositionLeft+0x50>)
 800213e:	226e      	movs	r2, #110	; 0x6e
 8002140:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002142:	e010      	b.n	8002166 <servoSetPositionLeft+0x46>
	else if (position == 2){
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b02      	cmp	r3, #2
 8002148:	d103      	bne.n	8002152 <servoSetPositionLeft+0x32>
			TIM1->CCR1 = POSITION_2_LEFT;
 800214a:	4b09      	ldr	r3, [pc, #36]	; (8002170 <servoSetPositionLeft+0x50>)
 800214c:	22aa      	movs	r2, #170	; 0xaa
 800214e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002150:	e009      	b.n	8002166 <servoSetPositionLeft+0x46>
	else if (position == 3){
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b03      	cmp	r3, #3
 8002156:	d103      	bne.n	8002160 <servoSetPositionLeft+0x40>
			TIM1->CCR1 = POSITION_3_LEFT;
 8002158:	4b05      	ldr	r3, [pc, #20]	; (8002170 <servoSetPositionLeft+0x50>)
 800215a:	22fa      	movs	r2, #250	; 0xfa
 800215c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800215e:	e002      	b.n	8002166 <servoSetPositionLeft+0x46>
		printf("Vous ne devez mettre en entree que 0,1,2 ou 3 \r\n");
 8002160:	4804      	ldr	r0, [pc, #16]	; (8002174 <servoSetPositionLeft+0x54>)
 8002162:	f008 fbdb 	bl	800a91c <puts>
}
 8002166:	bf00      	nop
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40010000 	.word	0x40010000
 8002174:	0800dc50 	.word	0x0800dc50

08002178 <servoSetPositionRight>:
 	 * @brief Positionnement du servo droit
 	 * @Note Cette fonction permet de placer le servo comme on le souhaite avec 4 positions différentes
	 * @param int position : 0,1,2 ou 3
	 * @retval None
	 */
void servoSetPositionRight (int position){
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
	if (position == 0){
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d103      	bne.n	800218e <servoSetPositionRight+0x16>
		TIM1->CCR2 = POSITION_0_RIGHT;
 8002186:	4b10      	ldr	r3, [pc, #64]	; (80021c8 <servoSetPositionRight+0x50>)
 8002188:	22dc      	movs	r2, #220	; 0xdc
 800218a:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR2 = POSITION_3_RIGHT;
	}
	else {
		printf("Vous ne devez mettre en entree 0,1,2 ou 3 \r\n");
	}
}
 800218c:	e017      	b.n	80021be <servoSetPositionRight+0x46>
	else if (position == 1){
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d103      	bne.n	800219c <servoSetPositionRight+0x24>
			TIM1->CCR2 = POSITION_1_RIGHT;
 8002194:	4b0c      	ldr	r3, [pc, #48]	; (80021c8 <servoSetPositionRight+0x50>)
 8002196:	22be      	movs	r2, #190	; 0xbe
 8002198:	639a      	str	r2, [r3, #56]	; 0x38
}
 800219a:	e010      	b.n	80021be <servoSetPositionRight+0x46>
	else if (position == 2){
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d103      	bne.n	80021aa <servoSetPositionRight+0x32>
			TIM1->CCR2 = POSITION_2_RIGHT;
 80021a2:	4b09      	ldr	r3, [pc, #36]	; (80021c8 <servoSetPositionRight+0x50>)
 80021a4:	2282      	movs	r2, #130	; 0x82
 80021a6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80021a8:	e009      	b.n	80021be <servoSetPositionRight+0x46>
	else if (position == 3){
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2b03      	cmp	r3, #3
 80021ae:	d103      	bne.n	80021b8 <servoSetPositionRight+0x40>
			TIM1->CCR2 = POSITION_3_RIGHT;
 80021b0:	4b05      	ldr	r3, [pc, #20]	; (80021c8 <servoSetPositionRight+0x50>)
 80021b2:	223c      	movs	r2, #60	; 0x3c
 80021b4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80021b6:	e002      	b.n	80021be <servoSetPositionRight+0x46>
		printf("Vous ne devez mettre en entree 0,1,2 ou 3 \r\n");
 80021b8:	4804      	ldr	r0, [pc, #16]	; (80021cc <servoSetPositionRight+0x54>)
 80021ba:	f008 fbaf 	bl	800a91c <puts>
}
 80021be:	bf00      	nop
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40010000 	.word	0x40010000
 80021cc:	0800dc80 	.word	0x0800dc80

080021d0 <choice_direction_intensity>:
 	 * @Note Cette fonction permet de choisir la direction dans laquelle le cansat doit aller ainsi que son intensité grâce à une différence d'angle
	 * @param int delta_teta : difference d'angle comprise entre 0 et 360 degrés
	 * @retval None
	 */

void choice_direction_intensity(unsigned int delta_teta){
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
	if ((delta_teta<epsilon) || (delta_teta>360-epsilon)){
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2b04      	cmp	r3, #4
 80021dc:	d903      	bls.n	80021e6 <choice_direction_intensity+0x16>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f5b3 7fb2 	cmp.w	r3, #356	; 0x164
 80021e4:	d306      	bcc.n	80021f4 <choice_direction_intensity+0x24>
		servoSetPositionLeft(0);
 80021e6:	2000      	movs	r0, #0
 80021e8:	f7ff ff9a 	bl	8002120 <servoSetPositionLeft>
		servoSetPositionRight(0);
 80021ec:	2000      	movs	r0, #0
 80021ee:	f7ff ffc3 	bl	8002178 <servoSetPositionRight>
	}
	else {
		printf("cas non traité \r\n");
	}

}
 80021f2:	e040      	b.n	8002276 <choice_direction_intensity+0xa6>
	else if (delta_teta<teta_low){
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b1d      	cmp	r3, #29
 80021f8:	d806      	bhi.n	8002208 <choice_direction_intensity+0x38>
		servoSetPositionLeft(0);
 80021fa:	2000      	movs	r0, #0
 80021fc:	f7ff ff90 	bl	8002120 <servoSetPositionLeft>
		servoSetPositionRight(1);
 8002200:	2001      	movs	r0, #1
 8002202:	f7ff ffb9 	bl	8002178 <servoSetPositionRight>
}
 8002206:	e036      	b.n	8002276 <choice_direction_intensity+0xa6>
	else if (delta_teta>360-teta_low){
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 800220e:	d906      	bls.n	800221e <choice_direction_intensity+0x4e>
		servoSetPositionLeft(1);
 8002210:	2001      	movs	r0, #1
 8002212:	f7ff ff85 	bl	8002120 <servoSetPositionLeft>
		servoSetPositionRight(0);
 8002216:	2000      	movs	r0, #0
 8002218:	f7ff ffae 	bl	8002178 <servoSetPositionRight>
}
 800221c:	e02b      	b.n	8002276 <choice_direction_intensity+0xa6>
	else if (delta_teta<teta_high){
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2b63      	cmp	r3, #99	; 0x63
 8002222:	d806      	bhi.n	8002232 <choice_direction_intensity+0x62>
		servoSetPositionLeft(0);
 8002224:	2000      	movs	r0, #0
 8002226:	f7ff ff7b 	bl	8002120 <servoSetPositionLeft>
		servoSetPositionRight(2);
 800222a:	2002      	movs	r0, #2
 800222c:	f7ff ffa4 	bl	8002178 <servoSetPositionRight>
}
 8002230:	e021      	b.n	8002276 <choice_direction_intensity+0xa6>
	else if (delta_teta>360-teta_high){
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002238:	d906      	bls.n	8002248 <choice_direction_intensity+0x78>
		servoSetPositionLeft(2);
 800223a:	2002      	movs	r0, #2
 800223c:	f7ff ff70 	bl	8002120 <servoSetPositionLeft>
		servoSetPositionRight(0);
 8002240:	2000      	movs	r0, #0
 8002242:	f7ff ff99 	bl	8002178 <servoSetPositionRight>
}
 8002246:	e016      	b.n	8002276 <choice_direction_intensity+0xa6>
	else if (delta_teta<=180){
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2bb4      	cmp	r3, #180	; 0xb4
 800224c:	d806      	bhi.n	800225c <choice_direction_intensity+0x8c>
		servoSetPositionLeft(0);
 800224e:	2000      	movs	r0, #0
 8002250:	f7ff ff66 	bl	8002120 <servoSetPositionLeft>
		servoSetPositionRight(3);
 8002254:	2003      	movs	r0, #3
 8002256:	f7ff ff8f 	bl	8002178 <servoSetPositionRight>
}
 800225a:	e00c      	b.n	8002276 <choice_direction_intensity+0xa6>
	else if (delta_teta>180){
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2bb4      	cmp	r3, #180	; 0xb4
 8002260:	d906      	bls.n	8002270 <choice_direction_intensity+0xa0>
		servoSetPositionLeft(3);
 8002262:	2003      	movs	r0, #3
 8002264:	f7ff ff5c 	bl	8002120 <servoSetPositionLeft>
		servoSetPositionRight(0);
 8002268:	2000      	movs	r0, #0
 800226a:	f7ff ff85 	bl	8002178 <servoSetPositionRight>
}
 800226e:	e002      	b.n	8002276 <choice_direction_intensity+0xa6>
		printf("cas non traité \r\n");
 8002270:	4803      	ldr	r0, [pc, #12]	; (8002280 <choice_direction_intensity+0xb0>)
 8002272:	f008 fb53 	bl	800a91c <puts>
}
 8002276:	bf00      	nop
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	0800dcac 	.word	0x0800dcac

08002284 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	607b      	str	r3, [r7, #4]
 800228e:	4b12      	ldr	r3, [pc, #72]	; (80022d8 <HAL_MspInit+0x54>)
 8002290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002292:	4a11      	ldr	r2, [pc, #68]	; (80022d8 <HAL_MspInit+0x54>)
 8002294:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002298:	6453      	str	r3, [r2, #68]	; 0x44
 800229a:	4b0f      	ldr	r3, [pc, #60]	; (80022d8 <HAL_MspInit+0x54>)
 800229c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022a2:	607b      	str	r3, [r7, #4]
 80022a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022a6:	2300      	movs	r3, #0
 80022a8:	603b      	str	r3, [r7, #0]
 80022aa:	4b0b      	ldr	r3, [pc, #44]	; (80022d8 <HAL_MspInit+0x54>)
 80022ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ae:	4a0a      	ldr	r2, [pc, #40]	; (80022d8 <HAL_MspInit+0x54>)
 80022b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022b4:	6413      	str	r3, [r2, #64]	; 0x40
 80022b6:	4b08      	ldr	r3, [pc, #32]	; (80022d8 <HAL_MspInit+0x54>)
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022be:	603b      	str	r3, [r7, #0]
 80022c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80022c2:	2200      	movs	r2, #0
 80022c4:	210f      	movs	r1, #15
 80022c6:	f06f 0001 	mvn.w	r0, #1
 80022ca:	f000 fd3d 	bl	8002d48 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022ce:	bf00      	nop
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40023800 	.word	0x40023800

080022dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b08c      	sub	sp, #48	; 0x30
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80022e4:	2300      	movs	r3, #0
 80022e6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80022e8:	2300      	movs	r3, #0
 80022ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80022ec:	2300      	movs	r3, #0
 80022ee:	60bb      	str	r3, [r7, #8]
 80022f0:	4b2e      	ldr	r3, [pc, #184]	; (80023ac <HAL_InitTick+0xd0>)
 80022f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f4:	4a2d      	ldr	r2, [pc, #180]	; (80023ac <HAL_InitTick+0xd0>)
 80022f6:	f043 0301 	orr.w	r3, r3, #1
 80022fa:	6453      	str	r3, [r2, #68]	; 0x44
 80022fc:	4b2b      	ldr	r3, [pc, #172]	; (80023ac <HAL_InitTick+0xd0>)
 80022fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	60bb      	str	r3, [r7, #8]
 8002306:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002308:	f107 020c 	add.w	r2, r7, #12
 800230c:	f107 0310 	add.w	r3, r7, #16
 8002310:	4611      	mov	r1, r2
 8002312:	4618      	mov	r0, r3
 8002314:	f004 fe90 	bl	8007038 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002318:	f004 fe7a 	bl	8007010 <HAL_RCC_GetPCLK2Freq>
 800231c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800231e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002320:	4a23      	ldr	r2, [pc, #140]	; (80023b0 <HAL_InitTick+0xd4>)
 8002322:	fba2 2303 	umull	r2, r3, r2, r3
 8002326:	0c9b      	lsrs	r3, r3, #18
 8002328:	3b01      	subs	r3, #1
 800232a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800232c:	4b21      	ldr	r3, [pc, #132]	; (80023b4 <HAL_InitTick+0xd8>)
 800232e:	4a22      	ldr	r2, [pc, #136]	; (80023b8 <HAL_InitTick+0xdc>)
 8002330:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002332:	4b20      	ldr	r3, [pc, #128]	; (80023b4 <HAL_InitTick+0xd8>)
 8002334:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002338:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800233a:	4a1e      	ldr	r2, [pc, #120]	; (80023b4 <HAL_InitTick+0xd8>)
 800233c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002340:	4b1c      	ldr	r3, [pc, #112]	; (80023b4 <HAL_InitTick+0xd8>)
 8002342:	2200      	movs	r2, #0
 8002344:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002346:	4b1b      	ldr	r3, [pc, #108]	; (80023b4 <HAL_InitTick+0xd8>)
 8002348:	2200      	movs	r2, #0
 800234a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800234c:	4b19      	ldr	r3, [pc, #100]	; (80023b4 <HAL_InitTick+0xd8>)
 800234e:	2200      	movs	r2, #0
 8002350:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002352:	4818      	ldr	r0, [pc, #96]	; (80023b4 <HAL_InitTick+0xd8>)
 8002354:	f004 fea2 	bl	800709c <HAL_TIM_Base_Init>
 8002358:	4603      	mov	r3, r0
 800235a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800235e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002362:	2b00      	cmp	r3, #0
 8002364:	d11b      	bne.n	800239e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002366:	4813      	ldr	r0, [pc, #76]	; (80023b4 <HAL_InitTick+0xd8>)
 8002368:	f004 fef2 	bl	8007150 <HAL_TIM_Base_Start_IT>
 800236c:	4603      	mov	r3, r0
 800236e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002372:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002376:	2b00      	cmp	r3, #0
 8002378:	d111      	bne.n	800239e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800237a:	2019      	movs	r0, #25
 800237c:	f000 fd00 	bl	8002d80 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b0f      	cmp	r3, #15
 8002384:	d808      	bhi.n	8002398 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002386:	2200      	movs	r2, #0
 8002388:	6879      	ldr	r1, [r7, #4]
 800238a:	2019      	movs	r0, #25
 800238c:	f000 fcdc 	bl	8002d48 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002390:	4a0a      	ldr	r2, [pc, #40]	; (80023bc <HAL_InitTick+0xe0>)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6013      	str	r3, [r2, #0]
 8002396:	e002      	b.n	800239e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800239e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3730      	adds	r7, #48	; 0x30
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	40023800 	.word	0x40023800
 80023b0:	431bde83 	.word	0x431bde83
 80023b4:	20000a3c 	.word	0x20000a3c
 80023b8:	40010000 	.word	0x40010000
 80023bc:	20000004 	.word	0x20000004

080023c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023c4:	e7fe      	b.n	80023c4 <NMI_Handler+0x4>

080023c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023c6:	b480      	push	{r7}
 80023c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023ca:	e7fe      	b.n	80023ca <HardFault_Handler+0x4>

080023cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023d0:	e7fe      	b.n	80023d0 <MemManage_Handler+0x4>

080023d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023d2:	b480      	push	{r7}
 80023d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023d6:	e7fe      	b.n	80023d6 <BusFault_Handler+0x4>

080023d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023dc:	e7fe      	b.n	80023dc <UsageFault_Handler+0x4>

080023de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023de:	b480      	push	{r7}
 80023e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023e2:	bf00      	nop
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80023f0:	4802      	ldr	r0, [pc, #8]	; (80023fc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80023f2:	f004 ff5e 	bl	80072b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80023f6:	bf00      	nop
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	20000a3c 	.word	0x20000a3c

08002400 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002404:	4802      	ldr	r0, [pc, #8]	; (8002410 <I2C1_EV_IRQHandler+0x10>)
 8002406:	f001 fff9 	bl	80043fc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	20000914 	.word	0x20000914

08002414 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002418:	4802      	ldr	r0, [pc, #8]	; (8002424 <I2C1_ER_IRQHandler+0x10>)
 800241a:	f002 f960 	bl	80046de <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800241e:	bf00      	nop
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	20000914 	.word	0x20000914

08002428 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800242c:	4802      	ldr	r0, [pc, #8]	; (8002438 <USART1_IRQHandler+0x10>)
 800242e:	f005 fcd1 	bl	8007dd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002432:	bf00      	nop
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	20000b18 	.word	0x20000b18

0800243c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002442:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002446:	f000 feff 	bl	8003248 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  xTaskCreate(Task_Drop_detection, "Drop detection task", 500, NULL, osPriorityAboveNormal, &pxDrop_detection);
 800244a:	4b07      	ldr	r3, [pc, #28]	; (8002468 <EXTI15_10_IRQHandler+0x2c>)
 800244c:	9301      	str	r3, [sp, #4]
 800244e:	2301      	movs	r3, #1
 8002450:	9300      	str	r3, [sp, #0]
 8002452:	2300      	movs	r3, #0
 8002454:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002458:	4904      	ldr	r1, [pc, #16]	; (800246c <EXTI15_10_IRQHandler+0x30>)
 800245a:	4805      	ldr	r0, [pc, #20]	; (8002470 <EXTI15_10_IRQHandler+0x34>)
 800245c:	f006 fdb2 	bl	8008fc4 <xTaskCreate>

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002460:	bf00      	nop
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	20000208 	.word	0x20000208
 800246c:	0800dcc0 	.word	0x0800dcc0
 8002470:	080020b5 	.word	0x080020b5

08002474 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
	return 1;
 8002478:	2301      	movs	r3, #1
}
 800247a:	4618      	mov	r0, r3
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <_kill>:

int _kill(int pid, int sig)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800248e:	f007 fff1 	bl	800a474 <__errno>
 8002492:	4603      	mov	r3, r0
 8002494:	2216      	movs	r2, #22
 8002496:	601a      	str	r2, [r3, #0]
	return -1;
 8002498:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800249c:	4618      	mov	r0, r3
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <_exit>:

void _exit (int status)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80024ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7ff ffe7 	bl	8002484 <_kill>
	while (1) {}		/* Make sure we hang here */
 80024b6:	e7fe      	b.n	80024b6 <_exit+0x12>

080024b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024c4:	2300      	movs	r3, #0
 80024c6:	617b      	str	r3, [r7, #20]
 80024c8:	e00a      	b.n	80024e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80024ca:	f3af 8000 	nop.w
 80024ce:	4601      	mov	r1, r0
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	1c5a      	adds	r2, r3, #1
 80024d4:	60ba      	str	r2, [r7, #8]
 80024d6:	b2ca      	uxtb	r2, r1
 80024d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	3301      	adds	r3, #1
 80024de:	617b      	str	r3, [r7, #20]
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	dbf0      	blt.n	80024ca <_read+0x12>
	}

return len;
 80024e8:	687b      	ldr	r3, [r7, #4]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b086      	sub	sp, #24
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	60f8      	str	r0, [r7, #12]
 80024fa:	60b9      	str	r1, [r7, #8]
 80024fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024fe:	2300      	movs	r3, #0
 8002500:	617b      	str	r3, [r7, #20]
 8002502:	e009      	b.n	8002518 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	1c5a      	adds	r2, r3, #1
 8002508:	60ba      	str	r2, [r7, #8]
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff fc03 	bl	8001d18 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	3301      	adds	r3, #1
 8002516:	617b      	str	r3, [r7, #20]
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	429a      	cmp	r2, r3
 800251e:	dbf1      	blt.n	8002504 <_write+0x12>
	}
	return len;
 8002520:	687b      	ldr	r3, [r7, #4]
}
 8002522:	4618      	mov	r0, r3
 8002524:	3718      	adds	r7, #24
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <_close>:

int _close(int file)
{
 800252a:	b480      	push	{r7}
 800252c:	b083      	sub	sp, #12
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
	return -1;
 8002532:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002536:	4618      	mov	r0, r3
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr

08002542 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002542:	b480      	push	{r7}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
 800254a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002552:	605a      	str	r2, [r3, #4]
	return 0;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr

08002562 <_isatty>:

int _isatty(int file)
{
 8002562:	b480      	push	{r7}
 8002564:	b083      	sub	sp, #12
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
	return 1;
 800256a:	2301      	movs	r3, #1
}
 800256c:	4618      	mov	r0, r3
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
	return 0;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3714      	adds	r7, #20
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
	...

08002594 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800259c:	4a14      	ldr	r2, [pc, #80]	; (80025f0 <_sbrk+0x5c>)
 800259e:	4b15      	ldr	r3, [pc, #84]	; (80025f4 <_sbrk+0x60>)
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025a8:	4b13      	ldr	r3, [pc, #76]	; (80025f8 <_sbrk+0x64>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d102      	bne.n	80025b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025b0:	4b11      	ldr	r3, [pc, #68]	; (80025f8 <_sbrk+0x64>)
 80025b2:	4a12      	ldr	r2, [pc, #72]	; (80025fc <_sbrk+0x68>)
 80025b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025b6:	4b10      	ldr	r3, [pc, #64]	; (80025f8 <_sbrk+0x64>)
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4413      	add	r3, r2
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d207      	bcs.n	80025d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025c4:	f007 ff56 	bl	800a474 <__errno>
 80025c8:	4603      	mov	r3, r0
 80025ca:	220c      	movs	r2, #12
 80025cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025d2:	e009      	b.n	80025e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025d4:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <_sbrk+0x64>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025da:	4b07      	ldr	r3, [pc, #28]	; (80025f8 <_sbrk+0x64>)
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4413      	add	r3, r2
 80025e2:	4a05      	ldr	r2, [pc, #20]	; (80025f8 <_sbrk+0x64>)
 80025e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025e6:	68fb      	ldr	r3, [r7, #12]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3718      	adds	r7, #24
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	20020000 	.word	0x20020000
 80025f4:	00000400 	.word	0x00000400
 80025f8:	20000a84 	.word	0x20000a84
 80025fc:	20004908 	.word	0x20004908

08002600 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002604:	4b06      	ldr	r3, [pc, #24]	; (8002620 <SystemInit+0x20>)
 8002606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260a:	4a05      	ldr	r2, [pc, #20]	; (8002620 <SystemInit+0x20>)
 800260c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002610:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002614:	bf00      	nop
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	e000ed00 	.word	0xe000ed00

08002624 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b08a      	sub	sp, #40	; 0x28
 8002628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800262a:	f107 0320 	add.w	r3, r7, #32
 800262e:	2200      	movs	r2, #0
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002634:	1d3b      	adds	r3, r7, #4
 8002636:	2200      	movs	r2, #0
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	605a      	str	r2, [r3, #4]
 800263c:	609a      	str	r2, [r3, #8]
 800263e:	60da      	str	r2, [r3, #12]
 8002640:	611a      	str	r2, [r3, #16]
 8002642:	615a      	str	r2, [r3, #20]
 8002644:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002646:	4b28      	ldr	r3, [pc, #160]	; (80026e8 <MX_TIM2_Init+0xc4>)
 8002648:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800264c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 800264e:	4b26      	ldr	r3, [pc, #152]	; (80026e8 <MX_TIM2_Init+0xc4>)
 8002650:	2253      	movs	r2, #83	; 0x53
 8002652:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002654:	4b24      	ldr	r3, [pc, #144]	; (80026e8 <MX_TIM2_Init+0xc4>)
 8002656:	2200      	movs	r2, #0
 8002658:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 800265a:	4b23      	ldr	r3, [pc, #140]	; (80026e8 <MX_TIM2_Init+0xc4>)
 800265c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002660:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002662:	4b21      	ldr	r3, [pc, #132]	; (80026e8 <MX_TIM2_Init+0xc4>)
 8002664:	2200      	movs	r2, #0
 8002666:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002668:	4b1f      	ldr	r3, [pc, #124]	; (80026e8 <MX_TIM2_Init+0xc4>)
 800266a:	2200      	movs	r2, #0
 800266c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800266e:	481e      	ldr	r0, [pc, #120]	; (80026e8 <MX_TIM2_Init+0xc4>)
 8002670:	f004 fdd0 	bl	8007214 <HAL_TIM_PWM_Init>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800267a:	f7ff fd15 	bl	80020a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800267e:	2300      	movs	r3, #0
 8002680:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002682:	2300      	movs	r3, #0
 8002684:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002686:	f107 0320 	add.w	r3, r7, #32
 800268a:	4619      	mov	r1, r3
 800268c:	4816      	ldr	r0, [pc, #88]	; (80026e8 <MX_TIM2_Init+0xc4>)
 800268e:	f005 fa0f 	bl	8007ab0 <HAL_TIMEx_MasterConfigSynchronization>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002698:	f7ff fd06 	bl	80020a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800269c:	2360      	movs	r3, #96	; 0x60
 800269e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80026a0:	2300      	movs	r3, #0
 80026a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026a4:	2300      	movs	r3, #0
 80026a6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026a8:	2300      	movs	r3, #0
 80026aa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026ac:	1d3b      	adds	r3, r7, #4
 80026ae:	2200      	movs	r2, #0
 80026b0:	4619      	mov	r1, r3
 80026b2:	480d      	ldr	r0, [pc, #52]	; (80026e8 <MX_TIM2_Init+0xc4>)
 80026b4:	f004 ff06 	bl	80074c4 <HAL_TIM_PWM_ConfigChannel>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80026be:	f7ff fcf3 	bl	80020a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80026c2:	1d3b      	adds	r3, r7, #4
 80026c4:	2204      	movs	r2, #4
 80026c6:	4619      	mov	r1, r3
 80026c8:	4807      	ldr	r0, [pc, #28]	; (80026e8 <MX_TIM2_Init+0xc4>)
 80026ca:	f004 fefb 	bl	80074c4 <HAL_TIM_PWM_ConfigChannel>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80026d4:	f7ff fce8 	bl	80020a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80026d8:	4803      	ldr	r0, [pc, #12]	; (80026e8 <MX_TIM2_Init+0xc4>)
 80026da:	f000 f897 	bl	800280c <HAL_TIM_MspPostInit>

}
 80026de:	bf00      	nop
 80026e0:	3728      	adds	r7, #40	; 0x28
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	20000a88 	.word	0x20000a88

080026ec <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b08a      	sub	sp, #40	; 0x28
 80026f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026f2:	f107 0320 	add.w	r3, r7, #32
 80026f6:	2200      	movs	r2, #0
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026fc:	1d3b      	adds	r3, r7, #4
 80026fe:	2200      	movs	r2, #0
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	605a      	str	r2, [r3, #4]
 8002704:	609a      	str	r2, [r3, #8]
 8002706:	60da      	str	r2, [r3, #12]
 8002708:	611a      	str	r2, [r3, #16]
 800270a:	615a      	str	r2, [r3, #20]
 800270c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800270e:	4b22      	ldr	r3, [pc, #136]	; (8002798 <MX_TIM3_Init+0xac>)
 8002710:	4a22      	ldr	r2, [pc, #136]	; (800279c <MX_TIM3_Init+0xb0>)
 8002712:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8002714:	4b20      	ldr	r3, [pc, #128]	; (8002798 <MX_TIM3_Init+0xac>)
 8002716:	2253      	movs	r2, #83	; 0x53
 8002718:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800271a:	4b1f      	ldr	r3, [pc, #124]	; (8002798 <MX_TIM3_Init+0xac>)
 800271c:	2200      	movs	r2, #0
 800271e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8002720:	4b1d      	ldr	r3, [pc, #116]	; (8002798 <MX_TIM3_Init+0xac>)
 8002722:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002726:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002728:	4b1b      	ldr	r3, [pc, #108]	; (8002798 <MX_TIM3_Init+0xac>)
 800272a:	2200      	movs	r2, #0
 800272c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800272e:	4b1a      	ldr	r3, [pc, #104]	; (8002798 <MX_TIM3_Init+0xac>)
 8002730:	2200      	movs	r2, #0
 8002732:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002734:	4818      	ldr	r0, [pc, #96]	; (8002798 <MX_TIM3_Init+0xac>)
 8002736:	f004 fd6d 	bl	8007214 <HAL_TIM_PWM_Init>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002740:	f7ff fcb2 	bl	80020a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002744:	2300      	movs	r3, #0
 8002746:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002748:	2300      	movs	r3, #0
 800274a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800274c:	f107 0320 	add.w	r3, r7, #32
 8002750:	4619      	mov	r1, r3
 8002752:	4811      	ldr	r0, [pc, #68]	; (8002798 <MX_TIM3_Init+0xac>)
 8002754:	f005 f9ac 	bl	8007ab0 <HAL_TIMEx_MasterConfigSynchronization>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800275e:	f7ff fca3 	bl	80020a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002762:	2360      	movs	r3, #96	; 0x60
 8002764:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002766:	2300      	movs	r3, #0
 8002768:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800276a:	2300      	movs	r3, #0
 800276c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800276e:	2300      	movs	r3, #0
 8002770:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002772:	1d3b      	adds	r3, r7, #4
 8002774:	2200      	movs	r2, #0
 8002776:	4619      	mov	r1, r3
 8002778:	4807      	ldr	r0, [pc, #28]	; (8002798 <MX_TIM3_Init+0xac>)
 800277a:	f004 fea3 	bl	80074c4 <HAL_TIM_PWM_ConfigChannel>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002784:	f7ff fc90 	bl	80020a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002788:	4803      	ldr	r0, [pc, #12]	; (8002798 <MX_TIM3_Init+0xac>)
 800278a:	f000 f83f 	bl	800280c <HAL_TIM_MspPostInit>

}
 800278e:	bf00      	nop
 8002790:	3728      	adds	r7, #40	; 0x28
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	20000ad0 	.word	0x20000ad0
 800279c:	40000400 	.word	0x40000400

080027a0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027b0:	d10e      	bne.n	80027d0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	4b13      	ldr	r3, [pc, #76]	; (8002804 <HAL_TIM_PWM_MspInit+0x64>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	4a12      	ldr	r2, [pc, #72]	; (8002804 <HAL_TIM_PWM_MspInit+0x64>)
 80027bc:	f043 0301 	orr.w	r3, r3, #1
 80027c0:	6413      	str	r3, [r2, #64]	; 0x40
 80027c2:	4b10      	ldr	r3, [pc, #64]	; (8002804 <HAL_TIM_PWM_MspInit+0x64>)
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80027ce:	e012      	b.n	80027f6 <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM3)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a0c      	ldr	r2, [pc, #48]	; (8002808 <HAL_TIM_PWM_MspInit+0x68>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d10d      	bne.n	80027f6 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027da:	2300      	movs	r3, #0
 80027dc:	60bb      	str	r3, [r7, #8]
 80027de:	4b09      	ldr	r3, [pc, #36]	; (8002804 <HAL_TIM_PWM_MspInit+0x64>)
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	4a08      	ldr	r2, [pc, #32]	; (8002804 <HAL_TIM_PWM_MspInit+0x64>)
 80027e4:	f043 0302 	orr.w	r3, r3, #2
 80027e8:	6413      	str	r3, [r2, #64]	; 0x40
 80027ea:	4b06      	ldr	r3, [pc, #24]	; (8002804 <HAL_TIM_PWM_MspInit+0x64>)
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	60bb      	str	r3, [r7, #8]
 80027f4:	68bb      	ldr	r3, [r7, #8]
}
 80027f6:	bf00      	nop
 80027f8:	3714      	adds	r7, #20
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	40023800 	.word	0x40023800
 8002808:	40000400 	.word	0x40000400

0800280c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b08a      	sub	sp, #40	; 0x28
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002814:	f107 0314 	add.w	r3, r7, #20
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]
 800281c:	605a      	str	r2, [r3, #4]
 800281e:	609a      	str	r2, [r3, #8]
 8002820:	60da      	str	r2, [r3, #12]
 8002822:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800282c:	d11e      	bne.n	800286c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800282e:	2300      	movs	r3, #0
 8002830:	613b      	str	r3, [r7, #16]
 8002832:	4b22      	ldr	r3, [pc, #136]	; (80028bc <HAL_TIM_MspPostInit+0xb0>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	4a21      	ldr	r2, [pc, #132]	; (80028bc <HAL_TIM_MspPostInit+0xb0>)
 8002838:	f043 0301 	orr.w	r3, r3, #1
 800283c:	6313      	str	r3, [r2, #48]	; 0x30
 800283e:	4b1f      	ldr	r3, [pc, #124]	; (80028bc <HAL_TIM_MspPostInit+0xb0>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	613b      	str	r3, [r7, #16]
 8002848:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800284a:	2303      	movs	r3, #3
 800284c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284e:	2302      	movs	r3, #2
 8002850:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002852:	2300      	movs	r3, #0
 8002854:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002856:	2300      	movs	r3, #0
 8002858:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800285a:	2301      	movs	r3, #1
 800285c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800285e:	f107 0314 	add.w	r3, r7, #20
 8002862:	4619      	mov	r1, r3
 8002864:	4816      	ldr	r0, [pc, #88]	; (80028c0 <HAL_TIM_MspPostInit+0xb4>)
 8002866:	f000 fb39 	bl	8002edc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800286a:	e022      	b.n	80028b2 <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM3)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a14      	ldr	r2, [pc, #80]	; (80028c4 <HAL_TIM_MspPostInit+0xb8>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d11d      	bne.n	80028b2 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	4b10      	ldr	r3, [pc, #64]	; (80028bc <HAL_TIM_MspPostInit+0xb0>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	4a0f      	ldr	r2, [pc, #60]	; (80028bc <HAL_TIM_MspPostInit+0xb0>)
 8002880:	f043 0301 	orr.w	r3, r3, #1
 8002884:	6313      	str	r3, [r2, #48]	; 0x30
 8002886:	4b0d      	ldr	r3, [pc, #52]	; (80028bc <HAL_TIM_MspPostInit+0xb0>)
 8002888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002892:	2340      	movs	r3, #64	; 0x40
 8002894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002896:	2302      	movs	r3, #2
 8002898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289a:	2300      	movs	r3, #0
 800289c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800289e:	2300      	movs	r3, #0
 80028a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80028a2:	2302      	movs	r3, #2
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a6:	f107 0314 	add.w	r3, r7, #20
 80028aa:	4619      	mov	r1, r3
 80028ac:	4804      	ldr	r0, [pc, #16]	; (80028c0 <HAL_TIM_MspPostInit+0xb4>)
 80028ae:	f000 fb15 	bl	8002edc <HAL_GPIO_Init>
}
 80028b2:	bf00      	nop
 80028b4:	3728      	adds	r7, #40	; 0x28
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40023800 	.word	0x40023800
 80028c0:	40020000 	.word	0x40020000
 80028c4:	40000400 	.word	0x40000400

080028c8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80028cc:	4b11      	ldr	r3, [pc, #68]	; (8002914 <MX_USART1_UART_Init+0x4c>)
 80028ce:	4a12      	ldr	r2, [pc, #72]	; (8002918 <MX_USART1_UART_Init+0x50>)
 80028d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80028d2:	4b10      	ldr	r3, [pc, #64]	; (8002914 <MX_USART1_UART_Init+0x4c>)
 80028d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80028d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80028da:	4b0e      	ldr	r3, [pc, #56]	; (8002914 <MX_USART1_UART_Init+0x4c>)
 80028dc:	2200      	movs	r2, #0
 80028de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80028e0:	4b0c      	ldr	r3, [pc, #48]	; (8002914 <MX_USART1_UART_Init+0x4c>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80028e6:	4b0b      	ldr	r3, [pc, #44]	; (8002914 <MX_USART1_UART_Init+0x4c>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80028ec:	4b09      	ldr	r3, [pc, #36]	; (8002914 <MX_USART1_UART_Init+0x4c>)
 80028ee:	220c      	movs	r2, #12
 80028f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028f2:	4b08      	ldr	r3, [pc, #32]	; (8002914 <MX_USART1_UART_Init+0x4c>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028f8:	4b06      	ldr	r3, [pc, #24]	; (8002914 <MX_USART1_UART_Init+0x4c>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028fe:	4805      	ldr	r0, [pc, #20]	; (8002914 <MX_USART1_UART_Init+0x4c>)
 8002900:	f005 f958 	bl	8007bb4 <HAL_UART_Init>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800290a:	f7ff fbcd 	bl	80020a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800290e:	bf00      	nop
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	20000b18 	.word	0x20000b18
 8002918:	40011000 	.word	0x40011000

0800291c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002920:	4b11      	ldr	r3, [pc, #68]	; (8002968 <MX_USART2_UART_Init+0x4c>)
 8002922:	4a12      	ldr	r2, [pc, #72]	; (800296c <MX_USART2_UART_Init+0x50>)
 8002924:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002926:	4b10      	ldr	r3, [pc, #64]	; (8002968 <MX_USART2_UART_Init+0x4c>)
 8002928:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800292c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800292e:	4b0e      	ldr	r3, [pc, #56]	; (8002968 <MX_USART2_UART_Init+0x4c>)
 8002930:	2200      	movs	r2, #0
 8002932:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002934:	4b0c      	ldr	r3, [pc, #48]	; (8002968 <MX_USART2_UART_Init+0x4c>)
 8002936:	2200      	movs	r2, #0
 8002938:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800293a:	4b0b      	ldr	r3, [pc, #44]	; (8002968 <MX_USART2_UART_Init+0x4c>)
 800293c:	2200      	movs	r2, #0
 800293e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002940:	4b09      	ldr	r3, [pc, #36]	; (8002968 <MX_USART2_UART_Init+0x4c>)
 8002942:	220c      	movs	r2, #12
 8002944:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002946:	4b08      	ldr	r3, [pc, #32]	; (8002968 <MX_USART2_UART_Init+0x4c>)
 8002948:	2200      	movs	r2, #0
 800294a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800294c:	4b06      	ldr	r3, [pc, #24]	; (8002968 <MX_USART2_UART_Init+0x4c>)
 800294e:	2200      	movs	r2, #0
 8002950:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002952:	4805      	ldr	r0, [pc, #20]	; (8002968 <MX_USART2_UART_Init+0x4c>)
 8002954:	f005 f92e 	bl	8007bb4 <HAL_UART_Init>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800295e:	f7ff fba3 	bl	80020a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002962:	bf00      	nop
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	20000b5c 	.word	0x20000b5c
 800296c:	40004400 	.word	0x40004400

08002970 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b08c      	sub	sp, #48	; 0x30
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002978:	f107 031c 	add.w	r3, r7, #28
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	605a      	str	r2, [r3, #4]
 8002982:	609a      	str	r2, [r3, #8]
 8002984:	60da      	str	r2, [r3, #12]
 8002986:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a45      	ldr	r2, [pc, #276]	; (8002aa4 <HAL_UART_MspInit+0x134>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d153      	bne.n	8002a3a <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002992:	2300      	movs	r3, #0
 8002994:	61bb      	str	r3, [r7, #24]
 8002996:	4b44      	ldr	r3, [pc, #272]	; (8002aa8 <HAL_UART_MspInit+0x138>)
 8002998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299a:	4a43      	ldr	r2, [pc, #268]	; (8002aa8 <HAL_UART_MspInit+0x138>)
 800299c:	f043 0310 	orr.w	r3, r3, #16
 80029a0:	6453      	str	r3, [r2, #68]	; 0x44
 80029a2:	4b41      	ldr	r3, [pc, #260]	; (8002aa8 <HAL_UART_MspInit+0x138>)
 80029a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a6:	f003 0310 	and.w	r3, r3, #16
 80029aa:	61bb      	str	r3, [r7, #24]
 80029ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ae:	2300      	movs	r3, #0
 80029b0:	617b      	str	r3, [r7, #20]
 80029b2:	4b3d      	ldr	r3, [pc, #244]	; (8002aa8 <HAL_UART_MspInit+0x138>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	4a3c      	ldr	r2, [pc, #240]	; (8002aa8 <HAL_UART_MspInit+0x138>)
 80029b8:	f043 0301 	orr.w	r3, r3, #1
 80029bc:	6313      	str	r3, [r2, #48]	; 0x30
 80029be:	4b3a      	ldr	r3, [pc, #232]	; (8002aa8 <HAL_UART_MspInit+0x138>)
 80029c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	617b      	str	r3, [r7, #20]
 80029c8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ca:	2300      	movs	r3, #0
 80029cc:	613b      	str	r3, [r7, #16]
 80029ce:	4b36      	ldr	r3, [pc, #216]	; (8002aa8 <HAL_UART_MspInit+0x138>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d2:	4a35      	ldr	r2, [pc, #212]	; (8002aa8 <HAL_UART_MspInit+0x138>)
 80029d4:	f043 0302 	orr.w	r3, r3, #2
 80029d8:	6313      	str	r3, [r2, #48]	; 0x30
 80029da:	4b33      	ldr	r3, [pc, #204]	; (8002aa8 <HAL_UART_MspInit+0x138>)
 80029dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	613b      	str	r3, [r7, #16]
 80029e4:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80029e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ec:	2302      	movs	r3, #2
 80029ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f0:	2300      	movs	r3, #0
 80029f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f4:	2303      	movs	r3, #3
 80029f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80029f8:	2307      	movs	r3, #7
 80029fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029fc:	f107 031c 	add.w	r3, r7, #28
 8002a00:	4619      	mov	r1, r3
 8002a02:	482a      	ldr	r0, [pc, #168]	; (8002aac <HAL_UART_MspInit+0x13c>)
 8002a04:	f000 fa6a 	bl	8002edc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002a08:	2380      	movs	r3, #128	; 0x80
 8002a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a10:	2300      	movs	r3, #0
 8002a12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a14:	2303      	movs	r3, #3
 8002a16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a18:	2307      	movs	r3, #7
 8002a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a1c:	f107 031c 	add.w	r3, r7, #28
 8002a20:	4619      	mov	r1, r3
 8002a22:	4823      	ldr	r0, [pc, #140]	; (8002ab0 <HAL_UART_MspInit+0x140>)
 8002a24:	f000 fa5a 	bl	8002edc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002a28:	2200      	movs	r2, #0
 8002a2a:	2105      	movs	r1, #5
 8002a2c:	2025      	movs	r0, #37	; 0x25
 8002a2e:	f000 f98b 	bl	8002d48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a32:	2025      	movs	r0, #37	; 0x25
 8002a34:	f000 f9a4 	bl	8002d80 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002a38:	e030      	b.n	8002a9c <HAL_UART_MspInit+0x12c>
  else if(uartHandle->Instance==USART2)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a1d      	ldr	r2, [pc, #116]	; (8002ab4 <HAL_UART_MspInit+0x144>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d12b      	bne.n	8002a9c <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a44:	2300      	movs	r3, #0
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	4b17      	ldr	r3, [pc, #92]	; (8002aa8 <HAL_UART_MspInit+0x138>)
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4c:	4a16      	ldr	r2, [pc, #88]	; (8002aa8 <HAL_UART_MspInit+0x138>)
 8002a4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a52:	6413      	str	r3, [r2, #64]	; 0x40
 8002a54:	4b14      	ldr	r3, [pc, #80]	; (8002aa8 <HAL_UART_MspInit+0x138>)
 8002a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5c:	60fb      	str	r3, [r7, #12]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a60:	2300      	movs	r3, #0
 8002a62:	60bb      	str	r3, [r7, #8]
 8002a64:	4b10      	ldr	r3, [pc, #64]	; (8002aa8 <HAL_UART_MspInit+0x138>)
 8002a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a68:	4a0f      	ldr	r2, [pc, #60]	; (8002aa8 <HAL_UART_MspInit+0x138>)
 8002a6a:	f043 0301 	orr.w	r3, r3, #1
 8002a6e:	6313      	str	r3, [r2, #48]	; 0x30
 8002a70:	4b0d      	ldr	r3, [pc, #52]	; (8002aa8 <HAL_UART_MspInit+0x138>)
 8002a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	60bb      	str	r3, [r7, #8]
 8002a7a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002a7c:	230c      	movs	r3, #12
 8002a7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a80:	2302      	movs	r3, #2
 8002a82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a84:	2300      	movs	r3, #0
 8002a86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a8c:	2307      	movs	r3, #7
 8002a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a90:	f107 031c 	add.w	r3, r7, #28
 8002a94:	4619      	mov	r1, r3
 8002a96:	4805      	ldr	r0, [pc, #20]	; (8002aac <HAL_UART_MspInit+0x13c>)
 8002a98:	f000 fa20 	bl	8002edc <HAL_GPIO_Init>
}
 8002a9c:	bf00      	nop
 8002a9e:	3730      	adds	r7, #48	; 0x30
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	40011000 	.word	0x40011000
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	40020000 	.word	0x40020000
 8002ab0:	40020400 	.word	0x40020400
 8002ab4:	40004400 	.word	0x40004400

08002ab8 <Reset_Handler>:
 8002ab8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002af0 <LoopFillZerobss+0x12>
 8002abc:	480d      	ldr	r0, [pc, #52]	; (8002af4 <LoopFillZerobss+0x16>)
 8002abe:	490e      	ldr	r1, [pc, #56]	; (8002af8 <LoopFillZerobss+0x1a>)
 8002ac0:	4a0e      	ldr	r2, [pc, #56]	; (8002afc <LoopFillZerobss+0x1e>)
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	e002      	b.n	8002acc <LoopCopyDataInit>

08002ac6 <CopyDataInit>:
 8002ac6:	58d4      	ldr	r4, [r2, r3]
 8002ac8:	50c4      	str	r4, [r0, r3]
 8002aca:	3304      	adds	r3, #4

08002acc <LoopCopyDataInit>:
 8002acc:	18c4      	adds	r4, r0, r3
 8002ace:	428c      	cmp	r4, r1
 8002ad0:	d3f9      	bcc.n	8002ac6 <CopyDataInit>
 8002ad2:	4a0b      	ldr	r2, [pc, #44]	; (8002b00 <LoopFillZerobss+0x22>)
 8002ad4:	4c0b      	ldr	r4, [pc, #44]	; (8002b04 <LoopFillZerobss+0x26>)
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	e001      	b.n	8002ade <LoopFillZerobss>

08002ada <FillZerobss>:
 8002ada:	6013      	str	r3, [r2, #0]
 8002adc:	3204      	adds	r2, #4

08002ade <LoopFillZerobss>:
 8002ade:	42a2      	cmp	r2, r4
 8002ae0:	d3fb      	bcc.n	8002ada <FillZerobss>
 8002ae2:	f7ff fd8d 	bl	8002600 <SystemInit>
 8002ae6:	f007 fdc1 	bl	800a66c <__libc_init_array>
 8002aea:	f7ff f931 	bl	8001d50 <main>
 8002aee:	4770      	bx	lr
 8002af0:	20020000 	.word	0x20020000
 8002af4:	20000000 	.word	0x20000000
 8002af8:	200001e4 	.word	0x200001e4
 8002afc:	0800e1a8 	.word	0x0800e1a8
 8002b00:	200001e8 	.word	0x200001e8
 8002b04:	20004908 	.word	0x20004908

08002b08 <ADC_IRQHandler>:
 8002b08:	e7fe      	b.n	8002b08 <ADC_IRQHandler>
	...

08002b0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b10:	4b0e      	ldr	r3, [pc, #56]	; (8002b4c <HAL_Init+0x40>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a0d      	ldr	r2, [pc, #52]	; (8002b4c <HAL_Init+0x40>)
 8002b16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b1c:	4b0b      	ldr	r3, [pc, #44]	; (8002b4c <HAL_Init+0x40>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a0a      	ldr	r2, [pc, #40]	; (8002b4c <HAL_Init+0x40>)
 8002b22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b28:	4b08      	ldr	r3, [pc, #32]	; (8002b4c <HAL_Init+0x40>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a07      	ldr	r2, [pc, #28]	; (8002b4c <HAL_Init+0x40>)
 8002b2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b34:	2003      	movs	r0, #3
 8002b36:	f000 f8fc 	bl	8002d32 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b3a:	200f      	movs	r0, #15
 8002b3c:	f7ff fbce 	bl	80022dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b40:	f7ff fba0 	bl	8002284 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40023c00 	.word	0x40023c00

08002b50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b54:	4b06      	ldr	r3, [pc, #24]	; (8002b70 <HAL_IncTick+0x20>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	461a      	mov	r2, r3
 8002b5a:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <HAL_IncTick+0x24>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4413      	add	r3, r2
 8002b60:	4a04      	ldr	r2, [pc, #16]	; (8002b74 <HAL_IncTick+0x24>)
 8002b62:	6013      	str	r3, [r2, #0]
}
 8002b64:	bf00      	nop
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	20000008 	.word	0x20000008
 8002b74:	20000ba0 	.word	0x20000ba0

08002b78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  return uwTick;
 8002b7c:	4b03      	ldr	r3, [pc, #12]	; (8002b8c <HAL_GetTick+0x14>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	20000ba0 	.word	0x20000ba0

08002b90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b98:	f7ff ffee 	bl	8002b78 <HAL_GetTick>
 8002b9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ba8:	d005      	beq.n	8002bb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002baa:	4b0a      	ldr	r3, [pc, #40]	; (8002bd4 <HAL_Delay+0x44>)
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002bb6:	bf00      	nop
 8002bb8:	f7ff ffde 	bl	8002b78 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d8f7      	bhi.n	8002bb8 <HAL_Delay+0x28>
  {
  }
}
 8002bc8:	bf00      	nop
 8002bca:	bf00      	nop
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	20000008 	.word	0x20000008

08002bd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f003 0307 	and.w	r3, r3, #7
 8002be6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002be8:	4b0c      	ldr	r3, [pc, #48]	; (8002c1c <__NVIC_SetPriorityGrouping+0x44>)
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bee:	68ba      	ldr	r2, [r7, #8]
 8002bf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c0a:	4a04      	ldr	r2, [pc, #16]	; (8002c1c <__NVIC_SetPriorityGrouping+0x44>)
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	60d3      	str	r3, [r2, #12]
}
 8002c10:	bf00      	nop
 8002c12:	3714      	adds	r7, #20
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	e000ed00 	.word	0xe000ed00

08002c20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c24:	4b04      	ldr	r3, [pc, #16]	; (8002c38 <__NVIC_GetPriorityGrouping+0x18>)
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	0a1b      	lsrs	r3, r3, #8
 8002c2a:	f003 0307 	and.w	r3, r3, #7
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr
 8002c38:	e000ed00 	.word	0xe000ed00

08002c3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	4603      	mov	r3, r0
 8002c44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	db0b      	blt.n	8002c66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c4e:	79fb      	ldrb	r3, [r7, #7]
 8002c50:	f003 021f 	and.w	r2, r3, #31
 8002c54:	4907      	ldr	r1, [pc, #28]	; (8002c74 <__NVIC_EnableIRQ+0x38>)
 8002c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5a:	095b      	lsrs	r3, r3, #5
 8002c5c:	2001      	movs	r0, #1
 8002c5e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c66:	bf00      	nop
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	e000e100 	.word	0xe000e100

08002c78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	4603      	mov	r3, r0
 8002c80:	6039      	str	r1, [r7, #0]
 8002c82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	db0a      	blt.n	8002ca2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	b2da      	uxtb	r2, r3
 8002c90:	490c      	ldr	r1, [pc, #48]	; (8002cc4 <__NVIC_SetPriority+0x4c>)
 8002c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c96:	0112      	lsls	r2, r2, #4
 8002c98:	b2d2      	uxtb	r2, r2
 8002c9a:	440b      	add	r3, r1
 8002c9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ca0:	e00a      	b.n	8002cb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	b2da      	uxtb	r2, r3
 8002ca6:	4908      	ldr	r1, [pc, #32]	; (8002cc8 <__NVIC_SetPriority+0x50>)
 8002ca8:	79fb      	ldrb	r3, [r7, #7]
 8002caa:	f003 030f 	and.w	r3, r3, #15
 8002cae:	3b04      	subs	r3, #4
 8002cb0:	0112      	lsls	r2, r2, #4
 8002cb2:	b2d2      	uxtb	r2, r2
 8002cb4:	440b      	add	r3, r1
 8002cb6:	761a      	strb	r2, [r3, #24]
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr
 8002cc4:	e000e100 	.word	0xe000e100
 8002cc8:	e000ed00 	.word	0xe000ed00

08002ccc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b089      	sub	sp, #36	; 0x24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f003 0307 	and.w	r3, r3, #7
 8002cde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	f1c3 0307 	rsb	r3, r3, #7
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	bf28      	it	cs
 8002cea:	2304      	movcs	r3, #4
 8002cec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	3304      	adds	r3, #4
 8002cf2:	2b06      	cmp	r3, #6
 8002cf4:	d902      	bls.n	8002cfc <NVIC_EncodePriority+0x30>
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	3b03      	subs	r3, #3
 8002cfa:	e000      	b.n	8002cfe <NVIC_EncodePriority+0x32>
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	43da      	mvns	r2, r3
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	401a      	ands	r2, r3
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1e:	43d9      	mvns	r1, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d24:	4313      	orrs	r3, r2
         );
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3724      	adds	r7, #36	; 0x24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b082      	sub	sp, #8
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f7ff ff4c 	bl	8002bd8 <__NVIC_SetPriorityGrouping>
}
 8002d40:	bf00      	nop
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b086      	sub	sp, #24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	4603      	mov	r3, r0
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
 8002d54:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d56:	2300      	movs	r3, #0
 8002d58:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d5a:	f7ff ff61 	bl	8002c20 <__NVIC_GetPriorityGrouping>
 8002d5e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	68b9      	ldr	r1, [r7, #8]
 8002d64:	6978      	ldr	r0, [r7, #20]
 8002d66:	f7ff ffb1 	bl	8002ccc <NVIC_EncodePriority>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d70:	4611      	mov	r1, r2
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7ff ff80 	bl	8002c78 <__NVIC_SetPriority>
}
 8002d78:	bf00      	nop
 8002d7a:	3718      	adds	r7, #24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	4603      	mov	r3, r0
 8002d88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7ff ff54 	bl	8002c3c <__NVIC_EnableIRQ>
}
 8002d94:	bf00      	nop
 8002d96:	3708      	adds	r7, #8
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002daa:	f7ff fee5 	bl	8002b78 <HAL_GetTick>
 8002dae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d008      	beq.n	8002dce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2280      	movs	r2, #128	; 0x80
 8002dc0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e052      	b.n	8002e74 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 0216 	bic.w	r2, r2, #22
 8002ddc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	695a      	ldr	r2, [r3, #20]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d103      	bne.n	8002dfe <HAL_DMA_Abort+0x62>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d007      	beq.n	8002e0e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 0208 	bic.w	r2, r2, #8
 8002e0c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 0201 	bic.w	r2, r2, #1
 8002e1c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e1e:	e013      	b.n	8002e48 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e20:	f7ff feaa 	bl	8002b78 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b05      	cmp	r3, #5
 8002e2c:	d90c      	bls.n	8002e48 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2220      	movs	r2, #32
 8002e32:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2203      	movs	r2, #3
 8002e38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e015      	b.n	8002e74 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1e4      	bne.n	8002e20 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e5a:	223f      	movs	r2, #63	; 0x3f
 8002e5c:	409a      	lsls	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3710      	adds	r7, #16
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b02      	cmp	r3, #2
 8002e8e:	d004      	beq.n	8002e9a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2280      	movs	r2, #128	; 0x80
 8002e94:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e00c      	b.n	8002eb4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2205      	movs	r2, #5
 8002e9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f022 0201 	bic.w	r2, r2, #1
 8002eb0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ece:	b2db      	uxtb	r3, r3
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b089      	sub	sp, #36	; 0x24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002eea:	2300      	movs	r3, #0
 8002eec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	61fb      	str	r3, [r7, #28]
 8002ef6:	e159      	b.n	80031ac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ef8:	2201      	movs	r2, #1
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	f040 8148 	bne.w	80031a6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f003 0303 	and.w	r3, r3, #3
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d005      	beq.n	8002f2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d130      	bne.n	8002f90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	2203      	movs	r2, #3
 8002f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3e:	43db      	mvns	r3, r3
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	4013      	ands	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	68da      	ldr	r2, [r3, #12]
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f64:	2201      	movs	r2, #1
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	4013      	ands	r3, r2
 8002f72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	091b      	lsrs	r3, r3, #4
 8002f7a:	f003 0201 	and.w	r2, r3, #1
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f003 0303 	and.w	r3, r3, #3
 8002f98:	2b03      	cmp	r3, #3
 8002f9a:	d017      	beq.n	8002fcc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	2203      	movs	r2, #3
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	43db      	mvns	r3, r3
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f003 0303 	and.w	r3, r3, #3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d123      	bne.n	8003020 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	08da      	lsrs	r2, r3, #3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	3208      	adds	r2, #8
 8002fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	f003 0307 	and.w	r3, r3, #7
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	220f      	movs	r2, #15
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	691a      	ldr	r2, [r3, #16]
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	f003 0307 	and.w	r3, r3, #7
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	4313      	orrs	r3, r2
 8003010:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	08da      	lsrs	r2, r3, #3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	3208      	adds	r2, #8
 800301a:	69b9      	ldr	r1, [r7, #24]
 800301c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	2203      	movs	r2, #3
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	43db      	mvns	r3, r3
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	4013      	ands	r3, r2
 8003036:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f003 0203 	and.w	r2, r3, #3
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	4313      	orrs	r3, r2
 800304c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 80a2 	beq.w	80031a6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003062:	2300      	movs	r3, #0
 8003064:	60fb      	str	r3, [r7, #12]
 8003066:	4b57      	ldr	r3, [pc, #348]	; (80031c4 <HAL_GPIO_Init+0x2e8>)
 8003068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306a:	4a56      	ldr	r2, [pc, #344]	; (80031c4 <HAL_GPIO_Init+0x2e8>)
 800306c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003070:	6453      	str	r3, [r2, #68]	; 0x44
 8003072:	4b54      	ldr	r3, [pc, #336]	; (80031c4 <HAL_GPIO_Init+0x2e8>)
 8003074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003076:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800307e:	4a52      	ldr	r2, [pc, #328]	; (80031c8 <HAL_GPIO_Init+0x2ec>)
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	089b      	lsrs	r3, r3, #2
 8003084:	3302      	adds	r3, #2
 8003086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800308a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	f003 0303 	and.w	r3, r3, #3
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	220f      	movs	r2, #15
 8003096:	fa02 f303 	lsl.w	r3, r2, r3
 800309a:	43db      	mvns	r3, r3
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	4013      	ands	r3, r2
 80030a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a49      	ldr	r2, [pc, #292]	; (80031cc <HAL_GPIO_Init+0x2f0>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d019      	beq.n	80030de <HAL_GPIO_Init+0x202>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a48      	ldr	r2, [pc, #288]	; (80031d0 <HAL_GPIO_Init+0x2f4>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d013      	beq.n	80030da <HAL_GPIO_Init+0x1fe>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a47      	ldr	r2, [pc, #284]	; (80031d4 <HAL_GPIO_Init+0x2f8>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d00d      	beq.n	80030d6 <HAL_GPIO_Init+0x1fa>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a46      	ldr	r2, [pc, #280]	; (80031d8 <HAL_GPIO_Init+0x2fc>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d007      	beq.n	80030d2 <HAL_GPIO_Init+0x1f6>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a45      	ldr	r2, [pc, #276]	; (80031dc <HAL_GPIO_Init+0x300>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d101      	bne.n	80030ce <HAL_GPIO_Init+0x1f2>
 80030ca:	2304      	movs	r3, #4
 80030cc:	e008      	b.n	80030e0 <HAL_GPIO_Init+0x204>
 80030ce:	2307      	movs	r3, #7
 80030d0:	e006      	b.n	80030e0 <HAL_GPIO_Init+0x204>
 80030d2:	2303      	movs	r3, #3
 80030d4:	e004      	b.n	80030e0 <HAL_GPIO_Init+0x204>
 80030d6:	2302      	movs	r3, #2
 80030d8:	e002      	b.n	80030e0 <HAL_GPIO_Init+0x204>
 80030da:	2301      	movs	r3, #1
 80030dc:	e000      	b.n	80030e0 <HAL_GPIO_Init+0x204>
 80030de:	2300      	movs	r3, #0
 80030e0:	69fa      	ldr	r2, [r7, #28]
 80030e2:	f002 0203 	and.w	r2, r2, #3
 80030e6:	0092      	lsls	r2, r2, #2
 80030e8:	4093      	lsls	r3, r2
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030f0:	4935      	ldr	r1, [pc, #212]	; (80031c8 <HAL_GPIO_Init+0x2ec>)
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	089b      	lsrs	r3, r3, #2
 80030f6:	3302      	adds	r3, #2
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030fe:	4b38      	ldr	r3, [pc, #224]	; (80031e0 <HAL_GPIO_Init+0x304>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	43db      	mvns	r3, r3
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	4013      	ands	r3, r2
 800310c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d003      	beq.n	8003122 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	4313      	orrs	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003122:	4a2f      	ldr	r2, [pc, #188]	; (80031e0 <HAL_GPIO_Init+0x304>)
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003128:	4b2d      	ldr	r3, [pc, #180]	; (80031e0 <HAL_GPIO_Init+0x304>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	43db      	mvns	r3, r3
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	4013      	ands	r3, r2
 8003136:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d003      	beq.n	800314c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	4313      	orrs	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800314c:	4a24      	ldr	r2, [pc, #144]	; (80031e0 <HAL_GPIO_Init+0x304>)
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003152:	4b23      	ldr	r3, [pc, #140]	; (80031e0 <HAL_GPIO_Init+0x304>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	43db      	mvns	r3, r3
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	4013      	ands	r3, r2
 8003160:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	4313      	orrs	r3, r2
 8003174:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003176:	4a1a      	ldr	r2, [pc, #104]	; (80031e0 <HAL_GPIO_Init+0x304>)
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800317c:	4b18      	ldr	r3, [pc, #96]	; (80031e0 <HAL_GPIO_Init+0x304>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	43db      	mvns	r3, r3
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	4013      	ands	r3, r2
 800318a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d003      	beq.n	80031a0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	4313      	orrs	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031a0:	4a0f      	ldr	r2, [pc, #60]	; (80031e0 <HAL_GPIO_Init+0x304>)
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	3301      	adds	r3, #1
 80031aa:	61fb      	str	r3, [r7, #28]
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	2b0f      	cmp	r3, #15
 80031b0:	f67f aea2 	bls.w	8002ef8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031b4:	bf00      	nop
 80031b6:	bf00      	nop
 80031b8:	3724      	adds	r7, #36	; 0x24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	40023800 	.word	0x40023800
 80031c8:	40013800 	.word	0x40013800
 80031cc:	40020000 	.word	0x40020000
 80031d0:	40020400 	.word	0x40020400
 80031d4:	40020800 	.word	0x40020800
 80031d8:	40020c00 	.word	0x40020c00
 80031dc:	40021000 	.word	0x40021000
 80031e0:	40013c00 	.word	0x40013c00

080031e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	460b      	mov	r3, r1
 80031ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	691a      	ldr	r2, [r3, #16]
 80031f4:	887b      	ldrh	r3, [r7, #2]
 80031f6:	4013      	ands	r3, r2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d002      	beq.n	8003202 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031fc:	2301      	movs	r3, #1
 80031fe:	73fb      	strb	r3, [r7, #15]
 8003200:	e001      	b.n	8003206 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003202:	2300      	movs	r3, #0
 8003204:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003206:	7bfb      	ldrb	r3, [r7, #15]
}
 8003208:	4618      	mov	r0, r3
 800320a:	3714      	adds	r7, #20
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	460b      	mov	r3, r1
 800321e:	807b      	strh	r3, [r7, #2]
 8003220:	4613      	mov	r3, r2
 8003222:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003224:	787b      	ldrb	r3, [r7, #1]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d003      	beq.n	8003232 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800322a:	887a      	ldrh	r2, [r7, #2]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003230:	e003      	b.n	800323a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003232:	887b      	ldrh	r3, [r7, #2]
 8003234:	041a      	lsls	r2, r3, #16
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	619a      	str	r2, [r3, #24]
}
 800323a:	bf00      	nop
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
	...

08003248 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	4603      	mov	r3, r0
 8003250:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003252:	4b08      	ldr	r3, [pc, #32]	; (8003274 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003254:	695a      	ldr	r2, [r3, #20]
 8003256:	88fb      	ldrh	r3, [r7, #6]
 8003258:	4013      	ands	r3, r2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d006      	beq.n	800326c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800325e:	4a05      	ldr	r2, [pc, #20]	; (8003274 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003260:	88fb      	ldrh	r3, [r7, #6]
 8003262:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003264:	88fb      	ldrh	r3, [r7, #6]
 8003266:	4618      	mov	r0, r3
 8003268:	f000 f806 	bl	8003278 <HAL_GPIO_EXTI_Callback>
  }
}
 800326c:	bf00      	nop
 800326e:	3708      	adds	r7, #8
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	40013c00 	.word	0x40013c00

08003278 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	4603      	mov	r3, r0
 8003280:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003282:	bf00      	nop
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
	...

08003290 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e12b      	b.n	80034fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d106      	bne.n	80032bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f7fe fcd6 	bl	8001c68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2224      	movs	r2, #36	; 0x24
 80032c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 0201 	bic.w	r2, r2, #1
 80032d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032f4:	f003 fe78 	bl	8006fe8 <HAL_RCC_GetPCLK1Freq>
 80032f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	4a81      	ldr	r2, [pc, #516]	; (8003504 <HAL_I2C_Init+0x274>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d807      	bhi.n	8003314 <HAL_I2C_Init+0x84>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	4a80      	ldr	r2, [pc, #512]	; (8003508 <HAL_I2C_Init+0x278>)
 8003308:	4293      	cmp	r3, r2
 800330a:	bf94      	ite	ls
 800330c:	2301      	movls	r3, #1
 800330e:	2300      	movhi	r3, #0
 8003310:	b2db      	uxtb	r3, r3
 8003312:	e006      	b.n	8003322 <HAL_I2C_Init+0x92>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	4a7d      	ldr	r2, [pc, #500]	; (800350c <HAL_I2C_Init+0x27c>)
 8003318:	4293      	cmp	r3, r2
 800331a:	bf94      	ite	ls
 800331c:	2301      	movls	r3, #1
 800331e:	2300      	movhi	r3, #0
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e0e7      	b.n	80034fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	4a78      	ldr	r2, [pc, #480]	; (8003510 <HAL_I2C_Init+0x280>)
 800332e:	fba2 2303 	umull	r2, r3, r2, r3
 8003332:	0c9b      	lsrs	r3, r3, #18
 8003334:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68ba      	ldr	r2, [r7, #8]
 8003346:	430a      	orrs	r2, r1
 8003348:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	4a6a      	ldr	r2, [pc, #424]	; (8003504 <HAL_I2C_Init+0x274>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d802      	bhi.n	8003364 <HAL_I2C_Init+0xd4>
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	3301      	adds	r3, #1
 8003362:	e009      	b.n	8003378 <HAL_I2C_Init+0xe8>
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800336a:	fb02 f303 	mul.w	r3, r2, r3
 800336e:	4a69      	ldr	r2, [pc, #420]	; (8003514 <HAL_I2C_Init+0x284>)
 8003370:	fba2 2303 	umull	r2, r3, r2, r3
 8003374:	099b      	lsrs	r3, r3, #6
 8003376:	3301      	adds	r3, #1
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	6812      	ldr	r2, [r2, #0]
 800337c:	430b      	orrs	r3, r1
 800337e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	69db      	ldr	r3, [r3, #28]
 8003386:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800338a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	495c      	ldr	r1, [pc, #368]	; (8003504 <HAL_I2C_Init+0x274>)
 8003394:	428b      	cmp	r3, r1
 8003396:	d819      	bhi.n	80033cc <HAL_I2C_Init+0x13c>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	1e59      	subs	r1, r3, #1
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80033a6:	1c59      	adds	r1, r3, #1
 80033a8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80033ac:	400b      	ands	r3, r1
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00a      	beq.n	80033c8 <HAL_I2C_Init+0x138>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	1e59      	subs	r1, r3, #1
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80033c0:	3301      	adds	r3, #1
 80033c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033c6:	e051      	b.n	800346c <HAL_I2C_Init+0x1dc>
 80033c8:	2304      	movs	r3, #4
 80033ca:	e04f      	b.n	800346c <HAL_I2C_Init+0x1dc>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d111      	bne.n	80033f8 <HAL_I2C_Init+0x168>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	1e58      	subs	r0, r3, #1
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6859      	ldr	r1, [r3, #4]
 80033dc:	460b      	mov	r3, r1
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	440b      	add	r3, r1
 80033e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80033e6:	3301      	adds	r3, #1
 80033e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	bf0c      	ite	eq
 80033f0:	2301      	moveq	r3, #1
 80033f2:	2300      	movne	r3, #0
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	e012      	b.n	800341e <HAL_I2C_Init+0x18e>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	1e58      	subs	r0, r3, #1
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6859      	ldr	r1, [r3, #4]
 8003400:	460b      	mov	r3, r1
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	440b      	add	r3, r1
 8003406:	0099      	lsls	r1, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	fbb0 f3f3 	udiv	r3, r0, r3
 800340e:	3301      	adds	r3, #1
 8003410:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003414:	2b00      	cmp	r3, #0
 8003416:	bf0c      	ite	eq
 8003418:	2301      	moveq	r3, #1
 800341a:	2300      	movne	r3, #0
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <HAL_I2C_Init+0x196>
 8003422:	2301      	movs	r3, #1
 8003424:	e022      	b.n	800346c <HAL_I2C_Init+0x1dc>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10e      	bne.n	800344c <HAL_I2C_Init+0x1bc>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	1e58      	subs	r0, r3, #1
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6859      	ldr	r1, [r3, #4]
 8003436:	460b      	mov	r3, r1
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	440b      	add	r3, r1
 800343c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003440:	3301      	adds	r3, #1
 8003442:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003446:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800344a:	e00f      	b.n	800346c <HAL_I2C_Init+0x1dc>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	1e58      	subs	r0, r3, #1
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6859      	ldr	r1, [r3, #4]
 8003454:	460b      	mov	r3, r1
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	440b      	add	r3, r1
 800345a:	0099      	lsls	r1, r3, #2
 800345c:	440b      	add	r3, r1
 800345e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003462:	3301      	adds	r3, #1
 8003464:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003468:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800346c:	6879      	ldr	r1, [r7, #4]
 800346e:	6809      	ldr	r1, [r1, #0]
 8003470:	4313      	orrs	r3, r2
 8003472:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	69da      	ldr	r2, [r3, #28]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	431a      	orrs	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	430a      	orrs	r2, r1
 800348e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800349a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	6911      	ldr	r1, [r2, #16]
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	68d2      	ldr	r2, [r2, #12]
 80034a6:	4311      	orrs	r1, r2
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	6812      	ldr	r2, [r2, #0]
 80034ac:	430b      	orrs	r3, r1
 80034ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	695a      	ldr	r2, [r3, #20]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	431a      	orrs	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	430a      	orrs	r2, r1
 80034ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f042 0201 	orr.w	r2, r2, #1
 80034da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2220      	movs	r2, #32
 80034e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	000186a0 	.word	0x000186a0
 8003508:	001e847f 	.word	0x001e847f
 800350c:	003d08ff 	.word	0x003d08ff
 8003510:	431bde83 	.word	0x431bde83
 8003514:	10624dd3 	.word	0x10624dd3

08003518 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b088      	sub	sp, #32
 800351c:	af02      	add	r7, sp, #8
 800351e:	60f8      	str	r0, [r7, #12]
 8003520:	607a      	str	r2, [r7, #4]
 8003522:	461a      	mov	r2, r3
 8003524:	460b      	mov	r3, r1
 8003526:	817b      	strh	r3, [r7, #10]
 8003528:	4613      	mov	r3, r2
 800352a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800352c:	f7ff fb24 	bl	8002b78 <HAL_GetTick>
 8003530:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b20      	cmp	r3, #32
 800353c:	f040 80e0 	bne.w	8003700 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	2319      	movs	r3, #25
 8003546:	2201      	movs	r2, #1
 8003548:	4970      	ldr	r1, [pc, #448]	; (800370c <HAL_I2C_Master_Transmit+0x1f4>)
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f002 feb2 	bl	80062b4 <I2C_WaitOnFlagUntilTimeout>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003556:	2302      	movs	r3, #2
 8003558:	e0d3      	b.n	8003702 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003560:	2b01      	cmp	r3, #1
 8003562:	d101      	bne.n	8003568 <HAL_I2C_Master_Transmit+0x50>
 8003564:	2302      	movs	r3, #2
 8003566:	e0cc      	b.n	8003702 <HAL_I2C_Master_Transmit+0x1ea>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	2b01      	cmp	r3, #1
 800357c:	d007      	beq.n	800358e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f042 0201 	orr.w	r2, r2, #1
 800358c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800359c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2221      	movs	r2, #33	; 0x21
 80035a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2210      	movs	r2, #16
 80035aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	893a      	ldrh	r2, [r7, #8]
 80035be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	4a50      	ldr	r2, [pc, #320]	; (8003710 <HAL_I2C_Master_Transmit+0x1f8>)
 80035ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80035d0:	8979      	ldrh	r1, [r7, #10]
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	6a3a      	ldr	r2, [r7, #32]
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f002 faf6 	bl	8005bc8 <I2C_MasterRequestWrite>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e08d      	b.n	8003702 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035e6:	2300      	movs	r3, #0
 80035e8:	613b      	str	r3, [r7, #16]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	613b      	str	r3, [r7, #16]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	613b      	str	r3, [r7, #16]
 80035fa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80035fc:	e066      	b.n	80036cc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	6a39      	ldr	r1, [r7, #32]
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f002 ff2c 	bl	8006460 <I2C_WaitOnTXEFlagUntilTimeout>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00d      	beq.n	800362a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003612:	2b04      	cmp	r3, #4
 8003614:	d107      	bne.n	8003626 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003624:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e06b      	b.n	8003702 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362e:	781a      	ldrb	r2, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	1c5a      	adds	r2, r3, #1
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003644:	b29b      	uxth	r3, r3
 8003646:	3b01      	subs	r3, #1
 8003648:	b29a      	uxth	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003652:	3b01      	subs	r3, #1
 8003654:	b29a      	uxth	r2, r3
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	695b      	ldr	r3, [r3, #20]
 8003660:	f003 0304 	and.w	r3, r3, #4
 8003664:	2b04      	cmp	r3, #4
 8003666:	d11b      	bne.n	80036a0 <HAL_I2C_Master_Transmit+0x188>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800366c:	2b00      	cmp	r3, #0
 800366e:	d017      	beq.n	80036a0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003674:	781a      	ldrb	r2, [r3, #0]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003680:	1c5a      	adds	r2, r3, #1
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800368a:	b29b      	uxth	r3, r3
 800368c:	3b01      	subs	r3, #1
 800368e:	b29a      	uxth	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003698:	3b01      	subs	r3, #1
 800369a:	b29a      	uxth	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	6a39      	ldr	r1, [r7, #32]
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f002 ff1c 	bl	80064e2 <I2C_WaitOnBTFFlagUntilTimeout>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00d      	beq.n	80036cc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b4:	2b04      	cmp	r3, #4
 80036b6:	d107      	bne.n	80036c8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036c6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e01a      	b.n	8003702 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d194      	bne.n	80035fe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2220      	movs	r2, #32
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80036fc:	2300      	movs	r3, #0
 80036fe:	e000      	b.n	8003702 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003700:	2302      	movs	r3, #2
  }
}
 8003702:	4618      	mov	r0, r3
 8003704:	3718      	adds	r7, #24
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	00100002 	.word	0x00100002
 8003710:	ffff0000 	.word	0xffff0000

08003714 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b08c      	sub	sp, #48	; 0x30
 8003718:	af02      	add	r7, sp, #8
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	607a      	str	r2, [r7, #4]
 800371e:	461a      	mov	r2, r3
 8003720:	460b      	mov	r3, r1
 8003722:	817b      	strh	r3, [r7, #10]
 8003724:	4613      	mov	r3, r2
 8003726:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003728:	f7ff fa26 	bl	8002b78 <HAL_GetTick>
 800372c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b20      	cmp	r3, #32
 8003738:	f040 820b 	bne.w	8003b52 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	2319      	movs	r3, #25
 8003742:	2201      	movs	r2, #1
 8003744:	497c      	ldr	r1, [pc, #496]	; (8003938 <HAL_I2C_Master_Receive+0x224>)
 8003746:	68f8      	ldr	r0, [r7, #12]
 8003748:	f002 fdb4 	bl	80062b4 <I2C_WaitOnFlagUntilTimeout>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003752:	2302      	movs	r3, #2
 8003754:	e1fe      	b.n	8003b54 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800375c:	2b01      	cmp	r3, #1
 800375e:	d101      	bne.n	8003764 <HAL_I2C_Master_Receive+0x50>
 8003760:	2302      	movs	r3, #2
 8003762:	e1f7      	b.n	8003b54 <HAL_I2C_Master_Receive+0x440>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b01      	cmp	r3, #1
 8003778:	d007      	beq.n	800378a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f042 0201 	orr.w	r2, r2, #1
 8003788:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003798:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2222      	movs	r2, #34	; 0x22
 800379e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2210      	movs	r2, #16
 80037a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	893a      	ldrh	r2, [r7, #8]
 80037ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	4a5c      	ldr	r2, [pc, #368]	; (800393c <HAL_I2C_Master_Receive+0x228>)
 80037ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80037cc:	8979      	ldrh	r1, [r7, #10]
 80037ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f002 fa7a 	bl	8005ccc <I2C_MasterRequestRead>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e1b8      	b.n	8003b54 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d113      	bne.n	8003812 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ea:	2300      	movs	r3, #0
 80037ec:	623b      	str	r3, [r7, #32]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	695b      	ldr	r3, [r3, #20]
 80037f4:	623b      	str	r3, [r7, #32]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	623b      	str	r3, [r7, #32]
 80037fe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	e18c      	b.n	8003b2c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003816:	2b01      	cmp	r3, #1
 8003818:	d11b      	bne.n	8003852 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003828:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800382a:	2300      	movs	r3, #0
 800382c:	61fb      	str	r3, [r7, #28]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	695b      	ldr	r3, [r3, #20]
 8003834:	61fb      	str	r3, [r7, #28]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	699b      	ldr	r3, [r3, #24]
 800383c:	61fb      	str	r3, [r7, #28]
 800383e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800384e:	601a      	str	r2, [r3, #0]
 8003850:	e16c      	b.n	8003b2c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003856:	2b02      	cmp	r3, #2
 8003858:	d11b      	bne.n	8003892 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003868:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003878:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800387a:	2300      	movs	r3, #0
 800387c:	61bb      	str	r3, [r7, #24]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	61bb      	str	r3, [r7, #24]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	61bb      	str	r3, [r7, #24]
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	e14c      	b.n	8003b2c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038a2:	2300      	movs	r3, #0
 80038a4:	617b      	str	r3, [r7, #20]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	617b      	str	r3, [r7, #20]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	617b      	str	r3, [r7, #20]
 80038b6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80038b8:	e138      	b.n	8003b2c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038be:	2b03      	cmp	r3, #3
 80038c0:	f200 80f1 	bhi.w	8003aa6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d123      	bne.n	8003914 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f002 fe79 	bl	80065c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d001      	beq.n	80038e0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e139      	b.n	8003b54 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	691a      	ldr	r2, [r3, #16]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	b2d2      	uxtb	r2, r2
 80038ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f2:	1c5a      	adds	r2, r3, #1
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038fc:	3b01      	subs	r3, #1
 80038fe:	b29a      	uxth	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003908:	b29b      	uxth	r3, r3
 800390a:	3b01      	subs	r3, #1
 800390c:	b29a      	uxth	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003912:	e10b      	b.n	8003b2c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003918:	2b02      	cmp	r3, #2
 800391a:	d14e      	bne.n	80039ba <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800391c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391e:	9300      	str	r3, [sp, #0]
 8003920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003922:	2200      	movs	r2, #0
 8003924:	4906      	ldr	r1, [pc, #24]	; (8003940 <HAL_I2C_Master_Receive+0x22c>)
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	f002 fcc4 	bl	80062b4 <I2C_WaitOnFlagUntilTimeout>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d008      	beq.n	8003944 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e10e      	b.n	8003b54 <HAL_I2C_Master_Receive+0x440>
 8003936:	bf00      	nop
 8003938:	00100002 	.word	0x00100002
 800393c:	ffff0000 	.word	0xffff0000
 8003940:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003952:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	691a      	ldr	r2, [r3, #16]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395e:	b2d2      	uxtb	r2, r2
 8003960:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003966:	1c5a      	adds	r2, r3, #1
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003970:	3b01      	subs	r3, #1
 8003972:	b29a      	uxth	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800397c:	b29b      	uxth	r3, r3
 800397e:	3b01      	subs	r3, #1
 8003980:	b29a      	uxth	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	691a      	ldr	r2, [r3, #16]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	b2d2      	uxtb	r2, r2
 8003992:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003998:	1c5a      	adds	r2, r3, #1
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a2:	3b01      	subs	r3, #1
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	3b01      	subs	r3, #1
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039b8:	e0b8      	b.n	8003b2c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c0:	2200      	movs	r2, #0
 80039c2:	4966      	ldr	r1, [pc, #408]	; (8003b5c <HAL_I2C_Master_Receive+0x448>)
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f002 fc75 	bl	80062b4 <I2C_WaitOnFlagUntilTimeout>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d001      	beq.n	80039d4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e0bf      	b.n	8003b54 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	691a      	ldr	r2, [r3, #16]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ee:	b2d2      	uxtb	r2, r2
 80039f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f6:	1c5a      	adds	r2, r3, #1
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a00:	3b01      	subs	r3, #1
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a18:	9300      	str	r3, [sp, #0]
 8003a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	494f      	ldr	r1, [pc, #316]	; (8003b5c <HAL_I2C_Master_Receive+0x448>)
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f002 fc47 	bl	80062b4 <I2C_WaitOnFlagUntilTimeout>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e091      	b.n	8003b54 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	691a      	ldr	r2, [r3, #16]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4a:	b2d2      	uxtb	r2, r2
 8003a4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a52:	1c5a      	adds	r2, r3, #1
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	b29a      	uxth	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	691a      	ldr	r2, [r3, #16]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7c:	b2d2      	uxtb	r2, r2
 8003a7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a84:	1c5a      	adds	r2, r3, #1
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003aa4:	e042      	b.n	8003b2c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aa8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f002 fd8c 	bl	80065c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e04c      	b.n	8003b54 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	691a      	ldr	r2, [r3, #16]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac4:	b2d2      	uxtb	r2, r2
 8003ac6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	1c5a      	adds	r2, r3, #1
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	f003 0304 	and.w	r3, r3, #4
 8003af6:	2b04      	cmp	r3, #4
 8003af8:	d118      	bne.n	8003b2c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	691a      	ldr	r2, [r3, #16]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	b2d2      	uxtb	r2, r2
 8003b06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0c:	1c5a      	adds	r2, r3, #1
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b16:	3b01      	subs	r3, #1
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	3b01      	subs	r3, #1
 8003b26:	b29a      	uxth	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f47f aec2 	bne.w	80038ba <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2220      	movs	r2, #32
 8003b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	e000      	b.n	8003b54 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003b52:	2302      	movs	r3, #2
  }
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3728      	adds	r7, #40	; 0x28
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	00010004 	.word	0x00010004

08003b60 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b088      	sub	sp, #32
 8003b64:	af02      	add	r7, sp, #8
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	4608      	mov	r0, r1
 8003b6a:	4611      	mov	r1, r2
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	4603      	mov	r3, r0
 8003b70:	817b      	strh	r3, [r7, #10]
 8003b72:	460b      	mov	r3, r1
 8003b74:	813b      	strh	r3, [r7, #8]
 8003b76:	4613      	mov	r3, r2
 8003b78:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b7a:	f7fe fffd 	bl	8002b78 <HAL_GetTick>
 8003b7e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2b20      	cmp	r3, #32
 8003b8a:	f040 80d9 	bne.w	8003d40 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	2319      	movs	r3, #25
 8003b94:	2201      	movs	r2, #1
 8003b96:	496d      	ldr	r1, [pc, #436]	; (8003d4c <HAL_I2C_Mem_Write+0x1ec>)
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f002 fb8b 	bl	80062b4 <I2C_WaitOnFlagUntilTimeout>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	e0cc      	b.n	8003d42 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d101      	bne.n	8003bb6 <HAL_I2C_Mem_Write+0x56>
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	e0c5      	b.n	8003d42 <HAL_I2C_Mem_Write+0x1e2>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0301 	and.w	r3, r3, #1
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d007      	beq.n	8003bdc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f042 0201 	orr.w	r2, r2, #1
 8003bda:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2221      	movs	r2, #33	; 0x21
 8003bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2240      	movs	r2, #64	; 0x40
 8003bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6a3a      	ldr	r2, [r7, #32]
 8003c06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	4a4d      	ldr	r2, [pc, #308]	; (8003d50 <HAL_I2C_Mem_Write+0x1f0>)
 8003c1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c1e:	88f8      	ldrh	r0, [r7, #6]
 8003c20:	893a      	ldrh	r2, [r7, #8]
 8003c22:	8979      	ldrh	r1, [r7, #10]
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	9301      	str	r3, [sp, #4]
 8003c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c2a:	9300      	str	r3, [sp, #0]
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f002 f91a 	bl	8005e68 <I2C_RequestMemoryWrite>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d052      	beq.n	8003ce0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e081      	b.n	8003d42 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f002 fc0c 	bl	8006460 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00d      	beq.n	8003c6a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	2b04      	cmp	r3, #4
 8003c54:	d107      	bne.n	8003c66 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c64:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e06b      	b.n	8003d42 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6e:	781a      	ldrb	r2, [r3, #0]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7a:	1c5a      	adds	r2, r3, #1
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c84:	3b01      	subs	r3, #1
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	3b01      	subs	r3, #1
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	695b      	ldr	r3, [r3, #20]
 8003ca0:	f003 0304 	and.w	r3, r3, #4
 8003ca4:	2b04      	cmp	r3, #4
 8003ca6:	d11b      	bne.n	8003ce0 <HAL_I2C_Mem_Write+0x180>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d017      	beq.n	8003ce0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb4:	781a      	ldrb	r2, [r3, #0]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc0:	1c5a      	adds	r2, r3, #1
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d1aa      	bne.n	8003c3e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	f002 fbf8 	bl	80064e2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00d      	beq.n	8003d14 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfc:	2b04      	cmp	r3, #4
 8003cfe:	d107      	bne.n	8003d10 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d0e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e016      	b.n	8003d42 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2220      	movs	r2, #32
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	e000      	b.n	8003d42 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003d40:	2302      	movs	r3, #2
  }
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3718      	adds	r7, #24
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	00100002 	.word	0x00100002
 8003d50:	ffff0000 	.word	0xffff0000

08003d54 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b08c      	sub	sp, #48	; 0x30
 8003d58:	af02      	add	r7, sp, #8
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	4608      	mov	r0, r1
 8003d5e:	4611      	mov	r1, r2
 8003d60:	461a      	mov	r2, r3
 8003d62:	4603      	mov	r3, r0
 8003d64:	817b      	strh	r3, [r7, #10]
 8003d66:	460b      	mov	r3, r1
 8003d68:	813b      	strh	r3, [r7, #8]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d6e:	f7fe ff03 	bl	8002b78 <HAL_GetTick>
 8003d72:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b20      	cmp	r3, #32
 8003d7e:	f040 8208 	bne.w	8004192 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	9300      	str	r3, [sp, #0]
 8003d86:	2319      	movs	r3, #25
 8003d88:	2201      	movs	r2, #1
 8003d8a:	497b      	ldr	r1, [pc, #492]	; (8003f78 <HAL_I2C_Mem_Read+0x224>)
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f002 fa91 	bl	80062b4 <I2C_WaitOnFlagUntilTimeout>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d001      	beq.n	8003d9c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003d98:	2302      	movs	r3, #2
 8003d9a:	e1fb      	b.n	8004194 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d101      	bne.n	8003daa <HAL_I2C_Mem_Read+0x56>
 8003da6:	2302      	movs	r3, #2
 8003da8:	e1f4      	b.n	8004194 <HAL_I2C_Mem_Read+0x440>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0301 	and.w	r3, r3, #1
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d007      	beq.n	8003dd0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f042 0201 	orr.w	r2, r2, #1
 8003dce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dde:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2222      	movs	r2, #34	; 0x22
 8003de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2240      	movs	r2, #64	; 0x40
 8003dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dfa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003e00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e06:	b29a      	uxth	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	4a5b      	ldr	r2, [pc, #364]	; (8003f7c <HAL_I2C_Mem_Read+0x228>)
 8003e10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e12:	88f8      	ldrh	r0, [r7, #6]
 8003e14:	893a      	ldrh	r2, [r7, #8]
 8003e16:	8979      	ldrh	r1, [r7, #10]
 8003e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1a:	9301      	str	r3, [sp, #4]
 8003e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e1e:	9300      	str	r3, [sp, #0]
 8003e20:	4603      	mov	r3, r0
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	f002 f8b6 	bl	8005f94 <I2C_RequestMemoryRead>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e1b0      	b.n	8004194 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d113      	bne.n	8003e62 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	623b      	str	r3, [r7, #32]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	695b      	ldr	r3, [r3, #20]
 8003e44:	623b      	str	r3, [r7, #32]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	623b      	str	r3, [r7, #32]
 8003e4e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e5e:	601a      	str	r2, [r3, #0]
 8003e60:	e184      	b.n	800416c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d11b      	bne.n	8003ea2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	61fb      	str	r3, [r7, #28]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	695b      	ldr	r3, [r3, #20]
 8003e84:	61fb      	str	r3, [r7, #28]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	61fb      	str	r3, [r7, #28]
 8003e8e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	e164      	b.n	800416c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d11b      	bne.n	8003ee2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eb8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ec8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eca:	2300      	movs	r3, #0
 8003ecc:	61bb      	str	r3, [r7, #24]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	695b      	ldr	r3, [r3, #20]
 8003ed4:	61bb      	str	r3, [r7, #24]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	61bb      	str	r3, [r7, #24]
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	e144      	b.n	800416c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	617b      	str	r3, [r7, #20]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	617b      	str	r3, [r7, #20]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	617b      	str	r3, [r7, #20]
 8003ef6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003ef8:	e138      	b.n	800416c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003efe:	2b03      	cmp	r3, #3
 8003f00:	f200 80f1 	bhi.w	80040e6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d123      	bne.n	8003f54 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f0e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f002 fb59 	bl	80065c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d001      	beq.n	8003f20 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e139      	b.n	8004194 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	691a      	ldr	r2, [r3, #16]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2a:	b2d2      	uxtb	r2, r2
 8003f2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f32:	1c5a      	adds	r2, r3, #1
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	b29a      	uxth	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f52:	e10b      	b.n	800416c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d14e      	bne.n	8003ffa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5e:	9300      	str	r3, [sp, #0]
 8003f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f62:	2200      	movs	r2, #0
 8003f64:	4906      	ldr	r1, [pc, #24]	; (8003f80 <HAL_I2C_Mem_Read+0x22c>)
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f002 f9a4 	bl	80062b4 <I2C_WaitOnFlagUntilTimeout>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d008      	beq.n	8003f84 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e10e      	b.n	8004194 <HAL_I2C_Mem_Read+0x440>
 8003f76:	bf00      	nop
 8003f78:	00100002 	.word	0x00100002
 8003f7c:	ffff0000 	.word	0xffff0000
 8003f80:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	691a      	ldr	r2, [r3, #16]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9e:	b2d2      	uxtb	r2, r2
 8003fa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa6:	1c5a      	adds	r2, r3, #1
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	691a      	ldr	r2, [r3, #16]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd0:	b2d2      	uxtb	r2, r2
 8003fd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd8:	1c5a      	adds	r2, r3, #1
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ff8:	e0b8      	b.n	800416c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffc:	9300      	str	r3, [sp, #0]
 8003ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004000:	2200      	movs	r2, #0
 8004002:	4966      	ldr	r1, [pc, #408]	; (800419c <HAL_I2C_Mem_Read+0x448>)
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f002 f955 	bl	80062b4 <I2C_WaitOnFlagUntilTimeout>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d001      	beq.n	8004014 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e0bf      	b.n	8004194 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004022:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	691a      	ldr	r2, [r3, #16]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402e:	b2d2      	uxtb	r2, r2
 8004030:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004036:	1c5a      	adds	r2, r3, #1
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004040:	3b01      	subs	r3, #1
 8004042:	b29a      	uxth	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800404c:	b29b      	uxth	r3, r3
 800404e:	3b01      	subs	r3, #1
 8004050:	b29a      	uxth	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004058:	9300      	str	r3, [sp, #0]
 800405a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800405c:	2200      	movs	r2, #0
 800405e:	494f      	ldr	r1, [pc, #316]	; (800419c <HAL_I2C_Mem_Read+0x448>)
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f002 f927 	bl	80062b4 <I2C_WaitOnFlagUntilTimeout>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d001      	beq.n	8004070 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e091      	b.n	8004194 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800407e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	691a      	ldr	r2, [r3, #16]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408a:	b2d2      	uxtb	r2, r2
 800408c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004092:	1c5a      	adds	r2, r3, #1
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800409c:	3b01      	subs	r3, #1
 800409e:	b29a      	uxth	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	3b01      	subs	r3, #1
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	691a      	ldr	r2, [r3, #16]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040bc:	b2d2      	uxtb	r2, r2
 80040be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c4:	1c5a      	adds	r2, r3, #1
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ce:	3b01      	subs	r3, #1
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040da:	b29b      	uxth	r3, r3
 80040dc:	3b01      	subs	r3, #1
 80040de:	b29a      	uxth	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040e4:	e042      	b.n	800416c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f002 fa6c 	bl	80065c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e04c      	b.n	8004194 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	691a      	ldr	r2, [r3, #16]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004104:	b2d2      	uxtb	r2, r2
 8004106:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410c:	1c5a      	adds	r2, r3, #1
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004116:	3b01      	subs	r3, #1
 8004118:	b29a      	uxth	r2, r3
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004122:	b29b      	uxth	r3, r3
 8004124:	3b01      	subs	r3, #1
 8004126:	b29a      	uxth	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	f003 0304 	and.w	r3, r3, #4
 8004136:	2b04      	cmp	r3, #4
 8004138:	d118      	bne.n	800416c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	691a      	ldr	r2, [r3, #16]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004144:	b2d2      	uxtb	r2, r2
 8004146:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414c:	1c5a      	adds	r2, r3, #1
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004156:	3b01      	subs	r3, #1
 8004158:	b29a      	uxth	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004162:	b29b      	uxth	r3, r3
 8004164:	3b01      	subs	r3, #1
 8004166:	b29a      	uxth	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004170:	2b00      	cmp	r3, #0
 8004172:	f47f aec2 	bne.w	8003efa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2220      	movs	r2, #32
 800417a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800418e:	2300      	movs	r3, #0
 8004190:	e000      	b.n	8004194 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004192:	2302      	movs	r3, #2
  }
}
 8004194:	4618      	mov	r0, r3
 8004196:	3728      	adds	r7, #40	; 0x28
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	00010004 	.word	0x00010004

080041a0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b08a      	sub	sp, #40	; 0x28
 80041a4:	af02      	add	r7, sp, #8
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	607a      	str	r2, [r7, #4]
 80041aa:	603b      	str	r3, [r7, #0]
 80041ac:	460b      	mov	r3, r1
 80041ae:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80041b0:	f7fe fce2 	bl	8002b78 <HAL_GetTick>
 80041b4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80041b6:	2300      	movs	r3, #0
 80041b8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b20      	cmp	r3, #32
 80041c4:	f040 8111 	bne.w	80043ea <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	9300      	str	r3, [sp, #0]
 80041cc:	2319      	movs	r3, #25
 80041ce:	2201      	movs	r2, #1
 80041d0:	4988      	ldr	r1, [pc, #544]	; (80043f4 <HAL_I2C_IsDeviceReady+0x254>)
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f002 f86e 	bl	80062b4 <I2C_WaitOnFlagUntilTimeout>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80041de:	2302      	movs	r3, #2
 80041e0:	e104      	b.n	80043ec <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d101      	bne.n	80041f0 <HAL_I2C_IsDeviceReady+0x50>
 80041ec:	2302      	movs	r3, #2
 80041ee:	e0fd      	b.n	80043ec <HAL_I2C_IsDeviceReady+0x24c>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0301 	and.w	r3, r3, #1
 8004202:	2b01      	cmp	r3, #1
 8004204:	d007      	beq.n	8004216 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f042 0201 	orr.w	r2, r2, #1
 8004214:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004224:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2224      	movs	r2, #36	; 0x24
 800422a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	4a70      	ldr	r2, [pc, #448]	; (80043f8 <HAL_I2C_IsDeviceReady+0x258>)
 8004238:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004248:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	9300      	str	r3, [sp, #0]
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	2200      	movs	r2, #0
 8004252:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	f002 f82c 	bl	80062b4 <I2C_WaitOnFlagUntilTimeout>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00d      	beq.n	800427e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800426c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004270:	d103      	bne.n	800427a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004278:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e0b6      	b.n	80043ec <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800427e:	897b      	ldrh	r3, [r7, #10]
 8004280:	b2db      	uxtb	r3, r3
 8004282:	461a      	mov	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800428c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800428e:	f7fe fc73 	bl	8002b78 <HAL_GetTick>
 8004292:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b02      	cmp	r3, #2
 80042a0:	bf0c      	ite	eq
 80042a2:	2301      	moveq	r3, #1
 80042a4:	2300      	movne	r3, #0
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042b8:	bf0c      	ite	eq
 80042ba:	2301      	moveq	r3, #1
 80042bc:	2300      	movne	r3, #0
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80042c2:	e025      	b.n	8004310 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80042c4:	f7fe fc58 	bl	8002b78 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	683a      	ldr	r2, [r7, #0]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d302      	bcc.n	80042da <HAL_I2C_IsDeviceReady+0x13a>
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d103      	bne.n	80042e2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	22a0      	movs	r2, #160	; 0xa0
 80042de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	695b      	ldr	r3, [r3, #20]
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	bf0c      	ite	eq
 80042f0:	2301      	moveq	r3, #1
 80042f2:	2300      	movne	r3, #0
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004302:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004306:	bf0c      	ite	eq
 8004308:	2301      	moveq	r3, #1
 800430a:	2300      	movne	r3, #0
 800430c:	b2db      	uxtb	r3, r3
 800430e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2ba0      	cmp	r3, #160	; 0xa0
 800431a:	d005      	beq.n	8004328 <HAL_I2C_IsDeviceReady+0x188>
 800431c:	7dfb      	ldrb	r3, [r7, #23]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d102      	bne.n	8004328 <HAL_I2C_IsDeviceReady+0x188>
 8004322:	7dbb      	ldrb	r3, [r7, #22]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d0cd      	beq.n	80042c4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2220      	movs	r2, #32
 800432c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b02      	cmp	r3, #2
 800433c:	d129      	bne.n	8004392 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800434c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800434e:	2300      	movs	r3, #0
 8004350:	613b      	str	r3, [r7, #16]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	695b      	ldr	r3, [r3, #20]
 8004358:	613b      	str	r3, [r7, #16]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	613b      	str	r3, [r7, #16]
 8004362:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	9300      	str	r3, [sp, #0]
 8004368:	2319      	movs	r3, #25
 800436a:	2201      	movs	r2, #1
 800436c:	4921      	ldr	r1, [pc, #132]	; (80043f4 <HAL_I2C_IsDeviceReady+0x254>)
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f001 ffa0 	bl	80062b4 <I2C_WaitOnFlagUntilTimeout>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d001      	beq.n	800437e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e036      	b.n	80043ec <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2220      	movs	r2, #32
 8004382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800438e:	2300      	movs	r3, #0
 8004390:	e02c      	b.n	80043ec <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043a0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80043aa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	9300      	str	r3, [sp, #0]
 80043b0:	2319      	movs	r3, #25
 80043b2:	2201      	movs	r2, #1
 80043b4:	490f      	ldr	r1, [pc, #60]	; (80043f4 <HAL_I2C_IsDeviceReady+0x254>)
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f001 ff7c 	bl	80062b4 <I2C_WaitOnFlagUntilTimeout>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d001      	beq.n	80043c6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e012      	b.n	80043ec <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	3301      	adds	r3, #1
 80043ca:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	f4ff af32 	bcc.w	800423a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2220      	movs	r2, #32
 80043da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e000      	b.n	80043ec <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80043ea:	2302      	movs	r3, #2
  }
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3720      	adds	r7, #32
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	00100002 	.word	0x00100002
 80043f8:	ffff0000 	.word	0xffff0000

080043fc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b088      	sub	sp, #32
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004404:	2300      	movs	r3, #0
 8004406:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004414:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800441c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004424:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004426:	7bfb      	ldrb	r3, [r7, #15]
 8004428:	2b10      	cmp	r3, #16
 800442a:	d003      	beq.n	8004434 <HAL_I2C_EV_IRQHandler+0x38>
 800442c:	7bfb      	ldrb	r3, [r7, #15]
 800442e:	2b40      	cmp	r3, #64	; 0x40
 8004430:	f040 80c1 	bne.w	80045b6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	699b      	ldr	r3, [r3, #24]
 800443a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10d      	bne.n	800446a <HAL_I2C_EV_IRQHandler+0x6e>
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004454:	d003      	beq.n	800445e <HAL_I2C_EV_IRQHandler+0x62>
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800445c:	d101      	bne.n	8004462 <HAL_I2C_EV_IRQHandler+0x66>
 800445e:	2301      	movs	r3, #1
 8004460:	e000      	b.n	8004464 <HAL_I2C_EV_IRQHandler+0x68>
 8004462:	2300      	movs	r3, #0
 8004464:	2b01      	cmp	r3, #1
 8004466:	f000 8132 	beq.w	80046ce <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00c      	beq.n	800448e <HAL_I2C_EV_IRQHandler+0x92>
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	0a5b      	lsrs	r3, r3, #9
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	2b00      	cmp	r3, #0
 800447e:	d006      	beq.n	800448e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f002 f926 	bl	80066d2 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 fd83 	bl	8004f92 <I2C_Master_SB>
 800448c:	e092      	b.n	80045b4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	08db      	lsrs	r3, r3, #3
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	2b00      	cmp	r3, #0
 8004498:	d009      	beq.n	80044ae <HAL_I2C_EV_IRQHandler+0xb2>
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	0a5b      	lsrs	r3, r3, #9
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d003      	beq.n	80044ae <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 fdf9 	bl	800509e <I2C_Master_ADD10>
 80044ac:	e082      	b.n	80045b4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	085b      	lsrs	r3, r3, #1
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d009      	beq.n	80044ce <HAL_I2C_EV_IRQHandler+0xd2>
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	0a5b      	lsrs	r3, r3, #9
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d003      	beq.n	80044ce <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 fe13 	bl	80050f2 <I2C_Master_ADDR>
 80044cc:	e072      	b.n	80045b4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	089b      	lsrs	r3, r3, #2
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d03b      	beq.n	8004552 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044e8:	f000 80f3 	beq.w	80046d2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	09db      	lsrs	r3, r3, #7
 80044f0:	f003 0301 	and.w	r3, r3, #1
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00f      	beq.n	8004518 <HAL_I2C_EV_IRQHandler+0x11c>
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	0a9b      	lsrs	r3, r3, #10
 80044fc:	f003 0301 	and.w	r3, r3, #1
 8004500:	2b00      	cmp	r3, #0
 8004502:	d009      	beq.n	8004518 <HAL_I2C_EV_IRQHandler+0x11c>
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	089b      	lsrs	r3, r3, #2
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	2b00      	cmp	r3, #0
 800450e:	d103      	bne.n	8004518 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 f9f3 	bl	80048fc <I2C_MasterTransmit_TXE>
 8004516:	e04d      	b.n	80045b4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	089b      	lsrs	r3, r3, #2
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	2b00      	cmp	r3, #0
 8004522:	f000 80d6 	beq.w	80046d2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	0a5b      	lsrs	r3, r3, #9
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	2b00      	cmp	r3, #0
 8004530:	f000 80cf 	beq.w	80046d2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004534:	7bbb      	ldrb	r3, [r7, #14]
 8004536:	2b21      	cmp	r3, #33	; 0x21
 8004538:	d103      	bne.n	8004542 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 fa7a 	bl	8004a34 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004540:	e0c7      	b.n	80046d2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004542:	7bfb      	ldrb	r3, [r7, #15]
 8004544:	2b40      	cmp	r3, #64	; 0x40
 8004546:	f040 80c4 	bne.w	80046d2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 fae8 	bl	8004b20 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004550:	e0bf      	b.n	80046d2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800455c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004560:	f000 80b7 	beq.w	80046d2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	099b      	lsrs	r3, r3, #6
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	2b00      	cmp	r3, #0
 800456e:	d00f      	beq.n	8004590 <HAL_I2C_EV_IRQHandler+0x194>
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	0a9b      	lsrs	r3, r3, #10
 8004574:	f003 0301 	and.w	r3, r3, #1
 8004578:	2b00      	cmp	r3, #0
 800457a:	d009      	beq.n	8004590 <HAL_I2C_EV_IRQHandler+0x194>
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	089b      	lsrs	r3, r3, #2
 8004580:	f003 0301 	and.w	r3, r3, #1
 8004584:	2b00      	cmp	r3, #0
 8004586:	d103      	bne.n	8004590 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 fb5d 	bl	8004c48 <I2C_MasterReceive_RXNE>
 800458e:	e011      	b.n	80045b4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	089b      	lsrs	r3, r3, #2
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	2b00      	cmp	r3, #0
 800459a:	f000 809a 	beq.w	80046d2 <HAL_I2C_EV_IRQHandler+0x2d6>
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	0a5b      	lsrs	r3, r3, #9
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f000 8093 	beq.w	80046d2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 fc06 	bl	8004dbe <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045b2:	e08e      	b.n	80046d2 <HAL_I2C_EV_IRQHandler+0x2d6>
 80045b4:	e08d      	b.n	80046d2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d004      	beq.n	80045c8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	695b      	ldr	r3, [r3, #20]
 80045c4:	61fb      	str	r3, [r7, #28]
 80045c6:	e007      	b.n	80045d8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	085b      	lsrs	r3, r3, #1
 80045dc:	f003 0301 	and.w	r3, r3, #1
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d012      	beq.n	800460a <HAL_I2C_EV_IRQHandler+0x20e>
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	0a5b      	lsrs	r3, r3, #9
 80045e8:	f003 0301 	and.w	r3, r3, #1
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00c      	beq.n	800460a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d003      	beq.n	8004600 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004600:	69b9      	ldr	r1, [r7, #24]
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 ffc4 	bl	8005590 <I2C_Slave_ADDR>
 8004608:	e066      	b.n	80046d8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	091b      	lsrs	r3, r3, #4
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b00      	cmp	r3, #0
 8004614:	d009      	beq.n	800462a <HAL_I2C_EV_IRQHandler+0x22e>
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	0a5b      	lsrs	r3, r3, #9
 800461a:	f003 0301 	and.w	r3, r3, #1
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 fffe 	bl	8005624 <I2C_Slave_STOPF>
 8004628:	e056      	b.n	80046d8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800462a:	7bbb      	ldrb	r3, [r7, #14]
 800462c:	2b21      	cmp	r3, #33	; 0x21
 800462e:	d002      	beq.n	8004636 <HAL_I2C_EV_IRQHandler+0x23a>
 8004630:	7bbb      	ldrb	r3, [r7, #14]
 8004632:	2b29      	cmp	r3, #41	; 0x29
 8004634:	d125      	bne.n	8004682 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	09db      	lsrs	r3, r3, #7
 800463a:	f003 0301 	and.w	r3, r3, #1
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00f      	beq.n	8004662 <HAL_I2C_EV_IRQHandler+0x266>
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	0a9b      	lsrs	r3, r3, #10
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b00      	cmp	r3, #0
 800464c:	d009      	beq.n	8004662 <HAL_I2C_EV_IRQHandler+0x266>
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	089b      	lsrs	r3, r3, #2
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b00      	cmp	r3, #0
 8004658:	d103      	bne.n	8004662 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 feda 	bl	8005414 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004660:	e039      	b.n	80046d6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	089b      	lsrs	r3, r3, #2
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	2b00      	cmp	r3, #0
 800466c:	d033      	beq.n	80046d6 <HAL_I2C_EV_IRQHandler+0x2da>
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	0a5b      	lsrs	r3, r3, #9
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	2b00      	cmp	r3, #0
 8004678:	d02d      	beq.n	80046d6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 ff07 	bl	800548e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004680:	e029      	b.n	80046d6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	099b      	lsrs	r3, r3, #6
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00f      	beq.n	80046ae <HAL_I2C_EV_IRQHandler+0x2b2>
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	0a9b      	lsrs	r3, r3, #10
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b00      	cmp	r3, #0
 8004698:	d009      	beq.n	80046ae <HAL_I2C_EV_IRQHandler+0x2b2>
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	089b      	lsrs	r3, r3, #2
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d103      	bne.n	80046ae <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 ff12 	bl	80054d0 <I2C_SlaveReceive_RXNE>
 80046ac:	e014      	b.n	80046d8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	089b      	lsrs	r3, r3, #2
 80046b2:	f003 0301 	and.w	r3, r3, #1
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00e      	beq.n	80046d8 <HAL_I2C_EV_IRQHandler+0x2dc>
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	0a5b      	lsrs	r3, r3, #9
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d008      	beq.n	80046d8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 ff40 	bl	800554c <I2C_SlaveReceive_BTF>
 80046cc:	e004      	b.n	80046d8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80046ce:	bf00      	nop
 80046d0:	e002      	b.n	80046d8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046d2:	bf00      	nop
 80046d4:	e000      	b.n	80046d8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046d6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80046d8:	3720      	adds	r7, #32
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80046de:	b580      	push	{r7, lr}
 80046e0:	b08a      	sub	sp, #40	; 0x28
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	695b      	ldr	r3, [r3, #20]
 80046ec:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80046f6:	2300      	movs	r3, #0
 80046f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004700:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004702:	6a3b      	ldr	r3, [r7, #32]
 8004704:	0a1b      	lsrs	r3, r3, #8
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00e      	beq.n	800472c <HAL_I2C_ER_IRQHandler+0x4e>
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	0a1b      	lsrs	r3, r3, #8
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	2b00      	cmp	r3, #0
 8004718:	d008      	beq.n	800472c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800471a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471c:	f043 0301 	orr.w	r3, r3, #1
 8004720:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800472a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800472c:	6a3b      	ldr	r3, [r7, #32]
 800472e:	0a5b      	lsrs	r3, r3, #9
 8004730:	f003 0301 	and.w	r3, r3, #1
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00e      	beq.n	8004756 <HAL_I2C_ER_IRQHandler+0x78>
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	0a1b      	lsrs	r3, r3, #8
 800473c:	f003 0301 	and.w	r3, r3, #1
 8004740:	2b00      	cmp	r3, #0
 8004742:	d008      	beq.n	8004756 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004746:	f043 0302 	orr.w	r3, r3, #2
 800474a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004754:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004756:	6a3b      	ldr	r3, [r7, #32]
 8004758:	0a9b      	lsrs	r3, r3, #10
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b00      	cmp	r3, #0
 8004760:	d03f      	beq.n	80047e2 <HAL_I2C_ER_IRQHandler+0x104>
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	0a1b      	lsrs	r3, r3, #8
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b00      	cmp	r3, #0
 800476c:	d039      	beq.n	80047e2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800476e:	7efb      	ldrb	r3, [r7, #27]
 8004770:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004776:	b29b      	uxth	r3, r3
 8004778:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004780:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004786:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004788:	7ebb      	ldrb	r3, [r7, #26]
 800478a:	2b20      	cmp	r3, #32
 800478c:	d112      	bne.n	80047b4 <HAL_I2C_ER_IRQHandler+0xd6>
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10f      	bne.n	80047b4 <HAL_I2C_ER_IRQHandler+0xd6>
 8004794:	7cfb      	ldrb	r3, [r7, #19]
 8004796:	2b21      	cmp	r3, #33	; 0x21
 8004798:	d008      	beq.n	80047ac <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800479a:	7cfb      	ldrb	r3, [r7, #19]
 800479c:	2b29      	cmp	r3, #41	; 0x29
 800479e:	d005      	beq.n	80047ac <HAL_I2C_ER_IRQHandler+0xce>
 80047a0:	7cfb      	ldrb	r3, [r7, #19]
 80047a2:	2b28      	cmp	r3, #40	; 0x28
 80047a4:	d106      	bne.n	80047b4 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2b21      	cmp	r3, #33	; 0x21
 80047aa:	d103      	bne.n	80047b4 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f001 f869 	bl	8005884 <I2C_Slave_AF>
 80047b2:	e016      	b.n	80047e2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047bc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80047be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c0:	f043 0304 	orr.w	r3, r3, #4
 80047c4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80047c6:	7efb      	ldrb	r3, [r7, #27]
 80047c8:	2b10      	cmp	r3, #16
 80047ca:	d002      	beq.n	80047d2 <HAL_I2C_ER_IRQHandler+0xf4>
 80047cc:	7efb      	ldrb	r3, [r7, #27]
 80047ce:	2b40      	cmp	r3, #64	; 0x40
 80047d0:	d107      	bne.n	80047e2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047e0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80047e2:	6a3b      	ldr	r3, [r7, #32]
 80047e4:	0adb      	lsrs	r3, r3, #11
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00e      	beq.n	800480c <HAL_I2C_ER_IRQHandler+0x12e>
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	0a1b      	lsrs	r3, r3, #8
 80047f2:	f003 0301 	and.w	r3, r3, #1
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d008      	beq.n	800480c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80047fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fc:	f043 0308 	orr.w	r3, r3, #8
 8004800:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800480a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800480c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480e:	2b00      	cmp	r3, #0
 8004810:	d008      	beq.n	8004824 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004818:	431a      	orrs	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f001 f8a0 	bl	8005964 <I2C_ITError>
  }
}
 8004824:	bf00      	nop
 8004826:	3728      	adds	r7, #40	; 0x28
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004834:	bf00      	nop
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004848:	bf00      	nop
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	460b      	mov	r3, r1
 8004886:	70fb      	strb	r3, [r7, #3]
 8004888:	4613      	mov	r3, r2
 800488a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80048dc:	bf00      	nop
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800490a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004912:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004918:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800491e:	2b00      	cmp	r3, #0
 8004920:	d150      	bne.n	80049c4 <I2C_MasterTransmit_TXE+0xc8>
 8004922:	7bfb      	ldrb	r3, [r7, #15]
 8004924:	2b21      	cmp	r3, #33	; 0x21
 8004926:	d14d      	bne.n	80049c4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	2b08      	cmp	r3, #8
 800492c:	d01d      	beq.n	800496a <I2C_MasterTransmit_TXE+0x6e>
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	2b20      	cmp	r3, #32
 8004932:	d01a      	beq.n	800496a <I2C_MasterTransmit_TXE+0x6e>
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800493a:	d016      	beq.n	800496a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685a      	ldr	r2, [r3, #4]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800494a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2211      	movs	r2, #17
 8004950:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2220      	movs	r2, #32
 800495e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f7ff ff62 	bl	800482c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004968:	e060      	b.n	8004a2c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004978:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004988:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2220      	movs	r2, #32
 8004994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	2b40      	cmp	r3, #64	; 0x40
 80049a2:	d107      	bne.n	80049b4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f7ff ff7d 	bl	80048ac <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80049b2:	e03b      	b.n	8004a2c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f7ff ff35 	bl	800482c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80049c2:	e033      	b.n	8004a2c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80049c4:	7bfb      	ldrb	r3, [r7, #15]
 80049c6:	2b21      	cmp	r3, #33	; 0x21
 80049c8:	d005      	beq.n	80049d6 <I2C_MasterTransmit_TXE+0xda>
 80049ca:	7bbb      	ldrb	r3, [r7, #14]
 80049cc:	2b40      	cmp	r3, #64	; 0x40
 80049ce:	d12d      	bne.n	8004a2c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80049d0:	7bfb      	ldrb	r3, [r7, #15]
 80049d2:	2b22      	cmp	r3, #34	; 0x22
 80049d4:	d12a      	bne.n	8004a2c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049da:	b29b      	uxth	r3, r3
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d108      	bne.n	80049f2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	685a      	ldr	r2, [r3, #4]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049ee:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80049f0:	e01c      	b.n	8004a2c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b40      	cmp	r3, #64	; 0x40
 80049fc:	d103      	bne.n	8004a06 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f88e 	bl	8004b20 <I2C_MemoryTransmit_TXE_BTF>
}
 8004a04:	e012      	b.n	8004a2c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0a:	781a      	ldrb	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a16:	1c5a      	adds	r2, r3, #1
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	3b01      	subs	r3, #1
 8004a24:	b29a      	uxth	r2, r3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004a2a:	e7ff      	b.n	8004a2c <I2C_MasterTransmit_TXE+0x130>
 8004a2c:	bf00      	nop
 8004a2e:	3710      	adds	r7, #16
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a40:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b21      	cmp	r3, #33	; 0x21
 8004a4c:	d164      	bne.n	8004b18 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d012      	beq.n	8004a7e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5c:	781a      	ldrb	r2, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a68:	1c5a      	adds	r2, r3, #1
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	3b01      	subs	r3, #1
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004a7c:	e04c      	b.n	8004b18 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2b08      	cmp	r3, #8
 8004a82:	d01d      	beq.n	8004ac0 <I2C_MasterTransmit_BTF+0x8c>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2b20      	cmp	r3, #32
 8004a88:	d01a      	beq.n	8004ac0 <I2C_MasterTransmit_BTF+0x8c>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a90:	d016      	beq.n	8004ac0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	685a      	ldr	r2, [r3, #4]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004aa0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2211      	movs	r2, #17
 8004aa6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2220      	movs	r2, #32
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f7ff feb7 	bl	800482c <HAL_I2C_MasterTxCpltCallback>
}
 8004abe:	e02b      	b.n	8004b18 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	685a      	ldr	r2, [r3, #4]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ace:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ade:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2220      	movs	r2, #32
 8004aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	2b40      	cmp	r3, #64	; 0x40
 8004af8:	d107      	bne.n	8004b0a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f7ff fed2 	bl	80048ac <HAL_I2C_MemTxCpltCallback>
}
 8004b08:	e006      	b.n	8004b18 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f7ff fe8a 	bl	800482c <HAL_I2C_MasterTxCpltCallback>
}
 8004b18:	bf00      	nop
 8004b1a:	3710      	adds	r7, #16
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b2e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d11d      	bne.n	8004b74 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d10b      	bne.n	8004b58 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b44:	b2da      	uxtb	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b50:	1c9a      	adds	r2, r3, #2
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004b56:	e073      	b.n	8004c40 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	121b      	asrs	r3, r3, #8
 8004b60:	b2da      	uxtb	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b6c:	1c5a      	adds	r2, r3, #1
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004b72:	e065      	b.n	8004c40 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d10b      	bne.n	8004b94 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b80:	b2da      	uxtb	r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b8c:	1c5a      	adds	r2, r3, #1
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004b92:	e055      	b.n	8004c40 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d151      	bne.n	8004c40 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004b9c:	7bfb      	ldrb	r3, [r7, #15]
 8004b9e:	2b22      	cmp	r3, #34	; 0x22
 8004ba0:	d10d      	bne.n	8004bbe <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bb0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bb6:	1c5a      	adds	r2, r3, #1
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004bbc:	e040      	b.n	8004c40 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d015      	beq.n	8004bf4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004bc8:	7bfb      	ldrb	r3, [r7, #15]
 8004bca:	2b21      	cmp	r3, #33	; 0x21
 8004bcc:	d112      	bne.n	8004bf4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd2:	781a      	ldrb	r2, [r3, #0]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bde:	1c5a      	adds	r2, r3, #1
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	3b01      	subs	r3, #1
 8004bec:	b29a      	uxth	r2, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004bf2:	e025      	b.n	8004c40 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d120      	bne.n	8004c40 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004bfe:	7bfb      	ldrb	r3, [r7, #15]
 8004c00:	2b21      	cmp	r3, #33	; 0x21
 8004c02:	d11d      	bne.n	8004c40 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	685a      	ldr	r2, [r3, #4]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c12:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c22:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2220      	movs	r2, #32
 8004c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f7ff fe36 	bl	80048ac <HAL_I2C_MemTxCpltCallback>
}
 8004c40:	bf00      	nop
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	2b22      	cmp	r3, #34	; 0x22
 8004c5a:	f040 80ac 	bne.w	8004db6 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2b03      	cmp	r3, #3
 8004c6a:	d921      	bls.n	8004cb0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	691a      	ldr	r2, [r3, #16]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c76:	b2d2      	uxtb	r2, r2
 8004c78:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7e:	1c5a      	adds	r2, r3, #1
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	b29a      	uxth	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c96:	b29b      	uxth	r3, r3
 8004c98:	2b03      	cmp	r3, #3
 8004c9a:	f040 808c 	bne.w	8004db6 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	685a      	ldr	r2, [r3, #4]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cac:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004cae:	e082      	b.n	8004db6 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d075      	beq.n	8004da4 <I2C_MasterReceive_RXNE+0x15c>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d002      	beq.n	8004cc4 <I2C_MasterReceive_RXNE+0x7c>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d16f      	bne.n	8004da4 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f001 fc4d 	bl	8006564 <I2C_WaitOnSTOPRequestThroughIT>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d142      	bne.n	8004d56 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cde:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	685a      	ldr	r2, [r3, #4]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004cee:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	691a      	ldr	r2, [r3, #16]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfa:	b2d2      	uxtb	r2, r2
 8004cfc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d02:	1c5a      	adds	r2, r3, #1
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2220      	movs	r2, #32
 8004d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b40      	cmp	r3, #64	; 0x40
 8004d28:	d10a      	bne.n	8004d40 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f7ff fdc1 	bl	80048c0 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004d3e:	e03a      	b.n	8004db6 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2212      	movs	r2, #18
 8004d4c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f7ff fd76 	bl	8004840 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004d54:	e02f      	b.n	8004db6 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	685a      	ldr	r2, [r3, #4]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d64:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	691a      	ldr	r2, [r3, #16]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d70:	b2d2      	uxtb	r2, r2
 8004d72:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d78:	1c5a      	adds	r2, r3, #1
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	3b01      	subs	r3, #1
 8004d86:	b29a      	uxth	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2220      	movs	r2, #32
 8004d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f7ff fd99 	bl	80048d4 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004da2:	e008      	b.n	8004db6 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	685a      	ldr	r2, [r3, #4]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004db2:	605a      	str	r2, [r3, #4]
}
 8004db4:	e7ff      	b.n	8004db6 <I2C_MasterReceive_RXNE+0x16e>
 8004db6:	bf00      	nop
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b084      	sub	sp, #16
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dca:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	2b04      	cmp	r3, #4
 8004dd4:	d11b      	bne.n	8004e0e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	685a      	ldr	r2, [r3, #4]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004de4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	691a      	ldr	r2, [r3, #16]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df0:	b2d2      	uxtb	r2, r2
 8004df2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df8:	1c5a      	adds	r2, r3, #1
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	3b01      	subs	r3, #1
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004e0c:	e0bd      	b.n	8004f8a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	2b03      	cmp	r3, #3
 8004e16:	d129      	bne.n	8004e6c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	685a      	ldr	r2, [r3, #4]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e26:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2b04      	cmp	r3, #4
 8004e2c:	d00a      	beq.n	8004e44 <I2C_MasterReceive_BTF+0x86>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d007      	beq.n	8004e44 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e42:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	691a      	ldr	r2, [r3, #16]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4e:	b2d2      	uxtb	r2, r2
 8004e50:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e56:	1c5a      	adds	r2, r3, #1
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	3b01      	subs	r3, #1
 8004e64:	b29a      	uxth	r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004e6a:	e08e      	b.n	8004f8a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d176      	bne.n	8004f64 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d002      	beq.n	8004e82 <I2C_MasterReceive_BTF+0xc4>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2b10      	cmp	r3, #16
 8004e80:	d108      	bne.n	8004e94 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e90:	601a      	str	r2, [r3, #0]
 8004e92:	e019      	b.n	8004ec8 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2b04      	cmp	r3, #4
 8004e98:	d002      	beq.n	8004ea0 <I2C_MasterReceive_BTF+0xe2>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d108      	bne.n	8004eb2 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004eae:	601a      	str	r2, [r3, #0]
 8004eb0:	e00a      	b.n	8004ec8 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2b10      	cmp	r3, #16
 8004eb6:	d007      	beq.n	8004ec8 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ec6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	691a      	ldr	r2, [r3, #16]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed2:	b2d2      	uxtb	r2, r2
 8004ed4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eda:	1c5a      	adds	r2, r3, #1
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	b29a      	uxth	r2, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	691a      	ldr	r2, [r3, #16]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef8:	b2d2      	uxtb	r2, r2
 8004efa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f00:	1c5a      	adds	r2, r3, #1
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	685a      	ldr	r2, [r3, #4]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004f22:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2220      	movs	r2, #32
 8004f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	2b40      	cmp	r3, #64	; 0x40
 8004f36:	d10a      	bne.n	8004f4e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f7ff fcba 	bl	80048c0 <HAL_I2C_MemRxCpltCallback>
}
 8004f4c:	e01d      	b.n	8004f8a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2212      	movs	r2, #18
 8004f5a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f7ff fc6f 	bl	8004840 <HAL_I2C_MasterRxCpltCallback>
}
 8004f62:	e012      	b.n	8004f8a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	691a      	ldr	r2, [r3, #16]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6e:	b2d2      	uxtb	r2, r2
 8004f70:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f76:	1c5a      	adds	r2, r3, #1
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	3b01      	subs	r3, #1
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004f8a:	bf00      	nop
 8004f8c:	3710      	adds	r7, #16
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004f92:	b480      	push	{r7}
 8004f94:	b083      	sub	sp, #12
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	2b40      	cmp	r3, #64	; 0x40
 8004fa4:	d117      	bne.n	8004fd6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d109      	bne.n	8004fc2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004fbe:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004fc0:	e067      	b.n	8005092 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	f043 0301 	orr.w	r3, r3, #1
 8004fcc:	b2da      	uxtb	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	611a      	str	r2, [r3, #16]
}
 8004fd4:	e05d      	b.n	8005092 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fde:	d133      	bne.n	8005048 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	2b21      	cmp	r3, #33	; 0x21
 8004fea:	d109      	bne.n	8005000 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ffc:	611a      	str	r2, [r3, #16]
 8004ffe:	e008      	b.n	8005012 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005004:	b2db      	uxtb	r3, r3
 8005006:	f043 0301 	orr.w	r3, r3, #1
 800500a:	b2da      	uxtb	r2, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005016:	2b00      	cmp	r3, #0
 8005018:	d004      	beq.n	8005024 <I2C_Master_SB+0x92>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800501e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005020:	2b00      	cmp	r3, #0
 8005022:	d108      	bne.n	8005036 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005028:	2b00      	cmp	r3, #0
 800502a:	d032      	beq.n	8005092 <I2C_Master_SB+0x100>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005032:	2b00      	cmp	r3, #0
 8005034:	d02d      	beq.n	8005092 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	685a      	ldr	r2, [r3, #4]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005044:	605a      	str	r2, [r3, #4]
}
 8005046:	e024      	b.n	8005092 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800504c:	2b00      	cmp	r3, #0
 800504e:	d10e      	bne.n	800506e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005054:	b29b      	uxth	r3, r3
 8005056:	11db      	asrs	r3, r3, #7
 8005058:	b2db      	uxtb	r3, r3
 800505a:	f003 0306 	and.w	r3, r3, #6
 800505e:	b2db      	uxtb	r3, r3
 8005060:	f063 030f 	orn	r3, r3, #15
 8005064:	b2da      	uxtb	r2, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	611a      	str	r2, [r3, #16]
}
 800506c:	e011      	b.n	8005092 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005072:	2b01      	cmp	r3, #1
 8005074:	d10d      	bne.n	8005092 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800507a:	b29b      	uxth	r3, r3
 800507c:	11db      	asrs	r3, r3, #7
 800507e:	b2db      	uxtb	r3, r3
 8005080:	f003 0306 	and.w	r3, r3, #6
 8005084:	b2db      	uxtb	r3, r3
 8005086:	f063 030e 	orn	r3, r3, #14
 800508a:	b2da      	uxtb	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	611a      	str	r2, [r3, #16]
}
 8005092:	bf00      	nop
 8005094:	370c      	adds	r7, #12
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr

0800509e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800509e:	b480      	push	{r7}
 80050a0:	b083      	sub	sp, #12
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050aa:	b2da      	uxtb	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d004      	beq.n	80050c4 <I2C_Master_ADD10+0x26>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d108      	bne.n	80050d6 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d00c      	beq.n	80050e6 <I2C_Master_ADD10+0x48>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d007      	beq.n	80050e6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	685a      	ldr	r2, [r3, #4]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050e4:	605a      	str	r2, [r3, #4]
  }
}
 80050e6:	bf00      	nop
 80050e8:	370c      	adds	r7, #12
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr

080050f2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80050f2:	b480      	push	{r7}
 80050f4:	b091      	sub	sp, #68	; 0x44
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005100:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005108:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005116:	b2db      	uxtb	r3, r3
 8005118:	2b22      	cmp	r3, #34	; 0x22
 800511a:	f040 8169 	bne.w	80053f0 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005122:	2b00      	cmp	r3, #0
 8005124:	d10f      	bne.n	8005146 <I2C_Master_ADDR+0x54>
 8005126:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800512a:	2b40      	cmp	r3, #64	; 0x40
 800512c:	d10b      	bne.n	8005146 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800512e:	2300      	movs	r3, #0
 8005130:	633b      	str	r3, [r7, #48]	; 0x30
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	695b      	ldr	r3, [r3, #20]
 8005138:	633b      	str	r3, [r7, #48]	; 0x30
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	699b      	ldr	r3, [r3, #24]
 8005140:	633b      	str	r3, [r7, #48]	; 0x30
 8005142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005144:	e160      	b.n	8005408 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800514a:	2b00      	cmp	r3, #0
 800514c:	d11d      	bne.n	800518a <I2C_Master_ADDR+0x98>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005156:	d118      	bne.n	800518a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005158:	2300      	movs	r3, #0
 800515a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800516c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800517c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005182:	1c5a      	adds	r2, r3, #1
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	651a      	str	r2, [r3, #80]	; 0x50
 8005188:	e13e      	b.n	8005408 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800518e:	b29b      	uxth	r3, r3
 8005190:	2b00      	cmp	r3, #0
 8005192:	d113      	bne.n	80051bc <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005194:	2300      	movs	r3, #0
 8005196:	62bb      	str	r3, [r7, #40]	; 0x28
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	62bb      	str	r3, [r7, #40]	; 0x28
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80051a8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051b8:	601a      	str	r2, [r3, #0]
 80051ba:	e115      	b.n	80053e8 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	f040 808a 	bne.w	80052dc <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80051c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80051ce:	d137      	bne.n	8005240 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051de:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051ee:	d113      	bne.n	8005218 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051fe:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005200:	2300      	movs	r3, #0
 8005202:	627b      	str	r3, [r7, #36]	; 0x24
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	627b      	str	r3, [r7, #36]	; 0x24
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	627b      	str	r3, [r7, #36]	; 0x24
 8005214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005216:	e0e7      	b.n	80053e8 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005218:	2300      	movs	r3, #0
 800521a:	623b      	str	r3, [r7, #32]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	695b      	ldr	r3, [r3, #20]
 8005222:	623b      	str	r3, [r7, #32]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	623b      	str	r3, [r7, #32]
 800522c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800523c:	601a      	str	r2, [r3, #0]
 800523e:	e0d3      	b.n	80053e8 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005242:	2b08      	cmp	r3, #8
 8005244:	d02e      	beq.n	80052a4 <I2C_Master_ADDR+0x1b2>
 8005246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005248:	2b20      	cmp	r3, #32
 800524a:	d02b      	beq.n	80052a4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800524c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800524e:	2b12      	cmp	r3, #18
 8005250:	d102      	bne.n	8005258 <I2C_Master_ADDR+0x166>
 8005252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005254:	2b01      	cmp	r3, #1
 8005256:	d125      	bne.n	80052a4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800525a:	2b04      	cmp	r3, #4
 800525c:	d00e      	beq.n	800527c <I2C_Master_ADDR+0x18a>
 800525e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005260:	2b02      	cmp	r3, #2
 8005262:	d00b      	beq.n	800527c <I2C_Master_ADDR+0x18a>
 8005264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005266:	2b10      	cmp	r3, #16
 8005268:	d008      	beq.n	800527c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005278:	601a      	str	r2, [r3, #0]
 800527a:	e007      	b.n	800528c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800528a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800528c:	2300      	movs	r3, #0
 800528e:	61fb      	str	r3, [r7, #28]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	61fb      	str	r3, [r7, #28]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	61fb      	str	r3, [r7, #28]
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	e0a1      	b.n	80053e8 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052b2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052b4:	2300      	movs	r3, #0
 80052b6:	61bb      	str	r3, [r7, #24]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	61bb      	str	r3, [r7, #24]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	61bb      	str	r3, [r7, #24]
 80052c8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052d8:	601a      	str	r2, [r3, #0]
 80052da:	e085      	b.n	80053e8 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d14d      	bne.n	8005382 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80052e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e8:	2b04      	cmp	r3, #4
 80052ea:	d016      	beq.n	800531a <I2C_Master_ADDR+0x228>
 80052ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d013      	beq.n	800531a <I2C_Master_ADDR+0x228>
 80052f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f4:	2b10      	cmp	r3, #16
 80052f6:	d010      	beq.n	800531a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005306:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005316:	601a      	str	r2, [r3, #0]
 8005318:	e007      	b.n	800532a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005328:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005334:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005338:	d117      	bne.n	800536a <I2C_Master_ADDR+0x278>
 800533a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800533c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005340:	d00b      	beq.n	800535a <I2C_Master_ADDR+0x268>
 8005342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005344:	2b01      	cmp	r3, #1
 8005346:	d008      	beq.n	800535a <I2C_Master_ADDR+0x268>
 8005348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800534a:	2b08      	cmp	r3, #8
 800534c:	d005      	beq.n	800535a <I2C_Master_ADDR+0x268>
 800534e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005350:	2b10      	cmp	r3, #16
 8005352:	d002      	beq.n	800535a <I2C_Master_ADDR+0x268>
 8005354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005356:	2b20      	cmp	r3, #32
 8005358:	d107      	bne.n	800536a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	685a      	ldr	r2, [r3, #4]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005368:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800536a:	2300      	movs	r3, #0
 800536c:	617b      	str	r3, [r7, #20]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	695b      	ldr	r3, [r3, #20]
 8005374:	617b      	str	r3, [r7, #20]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	699b      	ldr	r3, [r3, #24]
 800537c:	617b      	str	r3, [r7, #20]
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	e032      	b.n	80053e8 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005390:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800539c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053a0:	d117      	bne.n	80053d2 <I2C_Master_ADDR+0x2e0>
 80053a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80053a8:	d00b      	beq.n	80053c2 <I2C_Master_ADDR+0x2d0>
 80053aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d008      	beq.n	80053c2 <I2C_Master_ADDR+0x2d0>
 80053b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b2:	2b08      	cmp	r3, #8
 80053b4:	d005      	beq.n	80053c2 <I2C_Master_ADDR+0x2d0>
 80053b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b8:	2b10      	cmp	r3, #16
 80053ba:	d002      	beq.n	80053c2 <I2C_Master_ADDR+0x2d0>
 80053bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053be:	2b20      	cmp	r3, #32
 80053c0:	d107      	bne.n	80053d2 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	685a      	ldr	r2, [r3, #4]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80053d0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053d2:	2300      	movs	r3, #0
 80053d4:	613b      	str	r3, [r7, #16]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	695b      	ldr	r3, [r3, #20]
 80053dc:	613b      	str	r3, [r7, #16]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	699b      	ldr	r3, [r3, #24]
 80053e4:	613b      	str	r3, [r7, #16]
 80053e6:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80053ee:	e00b      	b.n	8005408 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053f0:	2300      	movs	r3, #0
 80053f2:	60fb      	str	r3, [r7, #12]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	60fb      	str	r3, [r7, #12]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	60fb      	str	r3, [r7, #12]
 8005404:	68fb      	ldr	r3, [r7, #12]
}
 8005406:	e7ff      	b.n	8005408 <I2C_Master_ADDR+0x316>
 8005408:	bf00      	nop
 800540a:	3744      	adds	r7, #68	; 0x44
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005422:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005428:	b29b      	uxth	r3, r3
 800542a:	2b00      	cmp	r3, #0
 800542c:	d02b      	beq.n	8005486 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005432:	781a      	ldrb	r2, [r3, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800543e:	1c5a      	adds	r2, r3, #1
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005448:	b29b      	uxth	r3, r3
 800544a:	3b01      	subs	r3, #1
 800544c:	b29a      	uxth	r2, r3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005456:	b29b      	uxth	r3, r3
 8005458:	2b00      	cmp	r3, #0
 800545a:	d114      	bne.n	8005486 <I2C_SlaveTransmit_TXE+0x72>
 800545c:	7bfb      	ldrb	r3, [r7, #15]
 800545e:	2b29      	cmp	r3, #41	; 0x29
 8005460:	d111      	bne.n	8005486 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	685a      	ldr	r2, [r3, #4]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005470:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2221      	movs	r2, #33	; 0x21
 8005476:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2228      	movs	r2, #40	; 0x28
 800547c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f7ff f9e7 	bl	8004854 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005486:	bf00      	nop
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800548e:	b480      	push	{r7}
 8005490:	b083      	sub	sp, #12
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800549a:	b29b      	uxth	r3, r3
 800549c:	2b00      	cmp	r3, #0
 800549e:	d011      	beq.n	80054c4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a4:	781a      	ldrb	r2, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b0:	1c5a      	adds	r2, r3, #1
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	3b01      	subs	r3, #1
 80054be:	b29a      	uxth	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054de:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d02c      	beq.n	8005544 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	691a      	ldr	r2, [r3, #16]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f4:	b2d2      	uxtb	r2, r2
 80054f6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fc:	1c5a      	adds	r2, r3, #1
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005506:	b29b      	uxth	r3, r3
 8005508:	3b01      	subs	r3, #1
 800550a:	b29a      	uxth	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005514:	b29b      	uxth	r3, r3
 8005516:	2b00      	cmp	r3, #0
 8005518:	d114      	bne.n	8005544 <I2C_SlaveReceive_RXNE+0x74>
 800551a:	7bfb      	ldrb	r3, [r7, #15]
 800551c:	2b2a      	cmp	r3, #42	; 0x2a
 800551e:	d111      	bne.n	8005544 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800552e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2222      	movs	r2, #34	; 0x22
 8005534:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2228      	movs	r2, #40	; 0x28
 800553a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f7ff f992 	bl	8004868 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005544:	bf00      	nop
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005558:	b29b      	uxth	r3, r3
 800555a:	2b00      	cmp	r3, #0
 800555c:	d012      	beq.n	8005584 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	691a      	ldr	r2, [r3, #16]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005568:	b2d2      	uxtb	r2, r2
 800556a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005570:	1c5a      	adds	r2, r3, #1
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800557a:	b29b      	uxth	r3, r3
 800557c:	3b01      	subs	r3, #1
 800557e:	b29a      	uxth	r2, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005584:	bf00      	nop
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800559a:	2300      	movs	r3, #0
 800559c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80055aa:	2b28      	cmp	r3, #40	; 0x28
 80055ac:	d127      	bne.n	80055fe <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	685a      	ldr	r2, [r3, #4]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055bc:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	089b      	lsrs	r3, r3, #2
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80055ca:	2301      	movs	r3, #1
 80055cc:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	09db      	lsrs	r3, r3, #7
 80055d2:	f003 0301 	and.w	r3, r3, #1
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d103      	bne.n	80055e2 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	81bb      	strh	r3, [r7, #12]
 80055e0:	e002      	b.n	80055e8 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80055f0:	89ba      	ldrh	r2, [r7, #12]
 80055f2:	7bfb      	ldrb	r3, [r7, #15]
 80055f4:	4619      	mov	r1, r3
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f7ff f940 	bl	800487c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80055fc:	e00e      	b.n	800561c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055fe:	2300      	movs	r3, #0
 8005600:	60bb      	str	r3, [r7, #8]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	695b      	ldr	r3, [r3, #20]
 8005608:	60bb      	str	r3, [r7, #8]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	699b      	ldr	r3, [r3, #24]
 8005610:	60bb      	str	r3, [r7, #8]
 8005612:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800561c:	bf00      	nop
 800561e:	3710      	adds	r7, #16
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005632:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	685a      	ldr	r2, [r3, #4]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005642:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005644:	2300      	movs	r3, #0
 8005646:	60bb      	str	r3, [r7, #8]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	60bb      	str	r3, [r7, #8]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f042 0201 	orr.w	r2, r2, #1
 800565e:	601a      	str	r2, [r3, #0]
 8005660:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005670:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800567c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005680:	d172      	bne.n	8005768 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005682:	7bfb      	ldrb	r3, [r7, #15]
 8005684:	2b22      	cmp	r3, #34	; 0x22
 8005686:	d002      	beq.n	800568e <I2C_Slave_STOPF+0x6a>
 8005688:	7bfb      	ldrb	r3, [r7, #15]
 800568a:	2b2a      	cmp	r3, #42	; 0x2a
 800568c:	d135      	bne.n	80056fa <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	b29a      	uxth	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d005      	beq.n	80056b2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056aa:	f043 0204 	orr.w	r2, r3, #4
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	685a      	ldr	r2, [r3, #4]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056c0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7fd fbfa 	bl	8002ec0 <HAL_DMA_GetState>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d049      	beq.n	8005766 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d6:	4a69      	ldr	r2, [pc, #420]	; (800587c <I2C_Slave_STOPF+0x258>)
 80056d8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056de:	4618      	mov	r0, r3
 80056e0:	f7fd fbcc 	bl	8002e7c <HAL_DMA_Abort_IT>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d03d      	beq.n	8005766 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80056f4:	4610      	mov	r0, r2
 80056f6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80056f8:	e035      	b.n	8005766 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	b29a      	uxth	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800570c:	b29b      	uxth	r3, r3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d005      	beq.n	800571e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005716:	f043 0204 	orr.w	r2, r3, #4
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	685a      	ldr	r2, [r3, #4]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800572c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005732:	4618      	mov	r0, r3
 8005734:	f7fd fbc4 	bl	8002ec0 <HAL_DMA_GetState>
 8005738:	4603      	mov	r3, r0
 800573a:	2b01      	cmp	r3, #1
 800573c:	d014      	beq.n	8005768 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005742:	4a4e      	ldr	r2, [pc, #312]	; (800587c <I2C_Slave_STOPF+0x258>)
 8005744:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800574a:	4618      	mov	r0, r3
 800574c:	f7fd fb96 	bl	8002e7c <HAL_DMA_Abort_IT>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d008      	beq.n	8005768 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800575a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005760:	4610      	mov	r0, r2
 8005762:	4798      	blx	r3
 8005764:	e000      	b.n	8005768 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005766:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800576c:	b29b      	uxth	r3, r3
 800576e:	2b00      	cmp	r3, #0
 8005770:	d03e      	beq.n	80057f0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	695b      	ldr	r3, [r3, #20]
 8005778:	f003 0304 	and.w	r3, r3, #4
 800577c:	2b04      	cmp	r3, #4
 800577e:	d112      	bne.n	80057a6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	691a      	ldr	r2, [r3, #16]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578a:	b2d2      	uxtb	r2, r2
 800578c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005792:	1c5a      	adds	r2, r3, #1
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800579c:	b29b      	uxth	r3, r3
 800579e:	3b01      	subs	r3, #1
 80057a0:	b29a      	uxth	r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	695b      	ldr	r3, [r3, #20]
 80057ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057b0:	2b40      	cmp	r3, #64	; 0x40
 80057b2:	d112      	bne.n	80057da <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	691a      	ldr	r2, [r3, #16]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057be:	b2d2      	uxtb	r2, r2
 80057c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c6:	1c5a      	adds	r2, r3, #1
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	3b01      	subs	r3, #1
 80057d4:	b29a      	uxth	r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057de:	b29b      	uxth	r3, r3
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d005      	beq.n	80057f0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e8:	f043 0204 	orr.w	r2, r3, #4
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d003      	beq.n	8005800 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 f8b3 	bl	8005964 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80057fe:	e039      	b.n	8005874 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005800:	7bfb      	ldrb	r3, [r7, #15]
 8005802:	2b2a      	cmp	r3, #42	; 0x2a
 8005804:	d109      	bne.n	800581a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2228      	movs	r2, #40	; 0x28
 8005810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f7ff f827 	bl	8004868 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005820:	b2db      	uxtb	r3, r3
 8005822:	2b28      	cmp	r3, #40	; 0x28
 8005824:	d111      	bne.n	800584a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a15      	ldr	r2, [pc, #84]	; (8005880 <I2C_Slave_STOPF+0x25c>)
 800582a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2220      	movs	r2, #32
 8005836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f7ff f828 	bl	8004898 <HAL_I2C_ListenCpltCallback>
}
 8005848:	e014      	b.n	8005874 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800584e:	2b22      	cmp	r3, #34	; 0x22
 8005850:	d002      	beq.n	8005858 <I2C_Slave_STOPF+0x234>
 8005852:	7bfb      	ldrb	r3, [r7, #15]
 8005854:	2b22      	cmp	r3, #34	; 0x22
 8005856:	d10d      	bne.n	8005874 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2220      	movs	r2, #32
 8005862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f7fe fffa 	bl	8004868 <HAL_I2C_SlaveRxCpltCallback>
}
 8005874:	bf00      	nop
 8005876:	3710      	adds	r7, #16
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}
 800587c:	08006165 	.word	0x08006165
 8005880:	ffff0000 	.word	0xffff0000

08005884 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005892:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005898:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	2b08      	cmp	r3, #8
 800589e:	d002      	beq.n	80058a6 <I2C_Slave_AF+0x22>
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	2b20      	cmp	r3, #32
 80058a4:	d129      	bne.n	80058fa <I2C_Slave_AF+0x76>
 80058a6:	7bfb      	ldrb	r3, [r7, #15]
 80058a8:	2b28      	cmp	r3, #40	; 0x28
 80058aa:	d126      	bne.n	80058fa <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a2c      	ldr	r2, [pc, #176]	; (8005960 <I2C_Slave_AF+0xdc>)
 80058b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	685a      	ldr	r2, [r3, #4]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80058c0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80058ca:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058da:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2220      	movs	r2, #32
 80058e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f7fe ffd0 	bl	8004898 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80058f8:	e02e      	b.n	8005958 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80058fa:	7bfb      	ldrb	r3, [r7, #15]
 80058fc:	2b21      	cmp	r3, #33	; 0x21
 80058fe:	d126      	bne.n	800594e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a17      	ldr	r2, [pc, #92]	; (8005960 <I2C_Slave_AF+0xdc>)
 8005904:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2221      	movs	r2, #33	; 0x21
 800590a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2220      	movs	r2, #32
 8005910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	685a      	ldr	r2, [r3, #4]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800592a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005934:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005944:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f7fe ff84 	bl	8004854 <HAL_I2C_SlaveTxCpltCallback>
}
 800594c:	e004      	b.n	8005958 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005956:	615a      	str	r2, [r3, #20]
}
 8005958:	bf00      	nop
 800595a:	3710      	adds	r7, #16
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}
 8005960:	ffff0000 	.word	0xffff0000

08005964 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005972:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800597a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800597c:	7bbb      	ldrb	r3, [r7, #14]
 800597e:	2b10      	cmp	r3, #16
 8005980:	d002      	beq.n	8005988 <I2C_ITError+0x24>
 8005982:	7bbb      	ldrb	r3, [r7, #14]
 8005984:	2b40      	cmp	r3, #64	; 0x40
 8005986:	d10a      	bne.n	800599e <I2C_ITError+0x3a>
 8005988:	7bfb      	ldrb	r3, [r7, #15]
 800598a:	2b22      	cmp	r3, #34	; 0x22
 800598c:	d107      	bne.n	800599e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800599c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800599e:	7bfb      	ldrb	r3, [r7, #15]
 80059a0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80059a4:	2b28      	cmp	r3, #40	; 0x28
 80059a6:	d107      	bne.n	80059b8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2228      	movs	r2, #40	; 0x28
 80059b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80059b6:	e015      	b.n	80059e4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059c6:	d00a      	beq.n	80059de <I2C_ITError+0x7a>
 80059c8:	7bfb      	ldrb	r3, [r7, #15]
 80059ca:	2b60      	cmp	r3, #96	; 0x60
 80059cc:	d007      	beq.n	80059de <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2220      	movs	r2, #32
 80059d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059f2:	d162      	bne.n	8005aba <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	685a      	ldr	r2, [r3, #4]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a02:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d020      	beq.n	8005a54 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a16:	4a6a      	ldr	r2, [pc, #424]	; (8005bc0 <I2C_ITError+0x25c>)
 8005a18:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7fd fa2c 	bl	8002e7c <HAL_DMA_Abort_IT>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	f000 8089 	beq.w	8005b3e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f022 0201 	bic.w	r2, r2, #1
 8005a3a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2220      	movs	r2, #32
 8005a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a4e:	4610      	mov	r0, r2
 8005a50:	4798      	blx	r3
 8005a52:	e074      	b.n	8005b3e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a58:	4a59      	ldr	r2, [pc, #356]	; (8005bc0 <I2C_ITError+0x25c>)
 8005a5a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a60:	4618      	mov	r0, r3
 8005a62:	f7fd fa0b 	bl	8002e7c <HAL_DMA_Abort_IT>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d068      	beq.n	8005b3e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a76:	2b40      	cmp	r3, #64	; 0x40
 8005a78:	d10b      	bne.n	8005a92 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	691a      	ldr	r2, [r3, #16]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a84:	b2d2      	uxtb	r2, r2
 8005a86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8c:	1c5a      	adds	r2, r3, #1
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f022 0201 	bic.w	r2, r2, #1
 8005aa0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2220      	movs	r2, #32
 8005aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ab4:	4610      	mov	r0, r2
 8005ab6:	4798      	blx	r3
 8005ab8:	e041      	b.n	8005b3e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	2b60      	cmp	r3, #96	; 0x60
 8005ac4:	d125      	bne.n	8005b12 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2220      	movs	r2, #32
 8005aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	695b      	ldr	r3, [r3, #20]
 8005ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ade:	2b40      	cmp	r3, #64	; 0x40
 8005ae0:	d10b      	bne.n	8005afa <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	691a      	ldr	r2, [r3, #16]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aec:	b2d2      	uxtb	r2, r2
 8005aee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af4:	1c5a      	adds	r2, r3, #1
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f022 0201 	bic.w	r2, r2, #1
 8005b08:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f7fe feec 	bl	80048e8 <HAL_I2C_AbortCpltCallback>
 8005b10:	e015      	b.n	8005b3e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	695b      	ldr	r3, [r3, #20]
 8005b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b1c:	2b40      	cmp	r3, #64	; 0x40
 8005b1e:	d10b      	bne.n	8005b38 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	691a      	ldr	r2, [r3, #16]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2a:	b2d2      	uxtb	r2, r2
 8005b2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b32:	1c5a      	adds	r2, r3, #1
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f7fe fecb 	bl	80048d4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b42:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d10e      	bne.n	8005b6c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d109      	bne.n	8005b6c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d104      	bne.n	8005b6c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d007      	beq.n	8005b7c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	685a      	ldr	r2, [r3, #4]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005b7a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b82:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b88:	f003 0304 	and.w	r3, r3, #4
 8005b8c:	2b04      	cmp	r3, #4
 8005b8e:	d113      	bne.n	8005bb8 <I2C_ITError+0x254>
 8005b90:	7bfb      	ldrb	r3, [r7, #15]
 8005b92:	2b28      	cmp	r3, #40	; 0x28
 8005b94:	d110      	bne.n	8005bb8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a0a      	ldr	r2, [pc, #40]	; (8005bc4 <I2C_ITError+0x260>)
 8005b9a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2220      	movs	r2, #32
 8005ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f7fe fe70 	bl	8004898 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005bb8:	bf00      	nop
 8005bba:	3710      	adds	r7, #16
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	08006165 	.word	0x08006165
 8005bc4:	ffff0000 	.word	0xffff0000

08005bc8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b088      	sub	sp, #32
 8005bcc:	af02      	add	r7, sp, #8
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	607a      	str	r2, [r7, #4]
 8005bd2:	603b      	str	r3, [r7, #0]
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bdc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	2b08      	cmp	r3, #8
 8005be2:	d006      	beq.n	8005bf2 <I2C_MasterRequestWrite+0x2a>
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d003      	beq.n	8005bf2 <I2C_MasterRequestWrite+0x2a>
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005bf0:	d108      	bne.n	8005c04 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c00:	601a      	str	r2, [r3, #0]
 8005c02:	e00b      	b.n	8005c1c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c08:	2b12      	cmp	r3, #18
 8005c0a:	d107      	bne.n	8005c1c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c1a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	9300      	str	r3, [sp, #0]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	f000 fb43 	bl	80062b4 <I2C_WaitOnFlagUntilTimeout>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d00d      	beq.n	8005c50 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c42:	d103      	bne.n	8005c4c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e035      	b.n	8005cbc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c58:	d108      	bne.n	8005c6c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c5a:	897b      	ldrh	r3, [r7, #10]
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	461a      	mov	r2, r3
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005c68:	611a      	str	r2, [r3, #16]
 8005c6a:	e01b      	b.n	8005ca4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005c6c:	897b      	ldrh	r3, [r7, #10]
 8005c6e:	11db      	asrs	r3, r3, #7
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	f003 0306 	and.w	r3, r3, #6
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	f063 030f 	orn	r3, r3, #15
 8005c7c:	b2da      	uxtb	r2, r3
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	490e      	ldr	r1, [pc, #56]	; (8005cc4 <I2C_MasterRequestWrite+0xfc>)
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	f000 fb69 	bl	8006362 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d001      	beq.n	8005c9a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e010      	b.n	8005cbc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005c9a:	897b      	ldrh	r3, [r7, #10]
 8005c9c:	b2da      	uxtb	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	4907      	ldr	r1, [pc, #28]	; (8005cc8 <I2C_MasterRequestWrite+0x100>)
 8005caa:	68f8      	ldr	r0, [r7, #12]
 8005cac:	f000 fb59 	bl	8006362 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d001      	beq.n	8005cba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e000      	b.n	8005cbc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3718      	adds	r7, #24
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	00010008 	.word	0x00010008
 8005cc8:	00010002 	.word	0x00010002

08005ccc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b088      	sub	sp, #32
 8005cd0:	af02      	add	r7, sp, #8
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	607a      	str	r2, [r7, #4]
 8005cd6:	603b      	str	r3, [r7, #0]
 8005cd8:	460b      	mov	r3, r1
 8005cda:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005cf0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	2b08      	cmp	r3, #8
 8005cf6:	d006      	beq.n	8005d06 <I2C_MasterRequestRead+0x3a>
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d003      	beq.n	8005d06 <I2C_MasterRequestRead+0x3a>
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d04:	d108      	bne.n	8005d18 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d14:	601a      	str	r2, [r3, #0]
 8005d16:	e00b      	b.n	8005d30 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1c:	2b11      	cmp	r3, #17
 8005d1e:	d107      	bne.n	8005d30 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d2e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	9300      	str	r3, [sp, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f000 fab9 	bl	80062b4 <I2C_WaitOnFlagUntilTimeout>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00d      	beq.n	8005d64 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d56:	d103      	bne.n	8005d60 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d60:	2303      	movs	r3, #3
 8005d62:	e079      	b.n	8005e58 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d6c:	d108      	bne.n	8005d80 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005d6e:	897b      	ldrh	r3, [r7, #10]
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	f043 0301 	orr.w	r3, r3, #1
 8005d76:	b2da      	uxtb	r2, r3
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	611a      	str	r2, [r3, #16]
 8005d7e:	e05f      	b.n	8005e40 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005d80:	897b      	ldrh	r3, [r7, #10]
 8005d82:	11db      	asrs	r3, r3, #7
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	f003 0306 	and.w	r3, r3, #6
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	f063 030f 	orn	r3, r3, #15
 8005d90:	b2da      	uxtb	r2, r3
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	4930      	ldr	r1, [pc, #192]	; (8005e60 <I2C_MasterRequestRead+0x194>)
 8005d9e:	68f8      	ldr	r0, [r7, #12]
 8005da0:	f000 fadf 	bl	8006362 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d001      	beq.n	8005dae <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e054      	b.n	8005e58 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005dae:	897b      	ldrh	r3, [r7, #10]
 8005db0:	b2da      	uxtb	r2, r3
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	4929      	ldr	r1, [pc, #164]	; (8005e64 <I2C_MasterRequestRead+0x198>)
 8005dbe:	68f8      	ldr	r0, [r7, #12]
 8005dc0:	f000 facf 	bl	8006362 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d001      	beq.n	8005dce <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e044      	b.n	8005e58 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dce:	2300      	movs	r3, #0
 8005dd0:	613b      	str	r3, [r7, #16]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	695b      	ldr	r3, [r3, #20]
 8005dd8:	613b      	str	r3, [r7, #16]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	699b      	ldr	r3, [r3, #24]
 8005de0:	613b      	str	r3, [r7, #16]
 8005de2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005df2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	9300      	str	r3, [sp, #0]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	f000 fa57 	bl	80062b4 <I2C_WaitOnFlagUntilTimeout>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d00d      	beq.n	8005e28 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e1a:	d103      	bne.n	8005e24 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e22:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005e24:	2303      	movs	r3, #3
 8005e26:	e017      	b.n	8005e58 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005e28:	897b      	ldrh	r3, [r7, #10]
 8005e2a:	11db      	asrs	r3, r3, #7
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	f003 0306 	and.w	r3, r3, #6
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	f063 030e 	orn	r3, r3, #14
 8005e38:	b2da      	uxtb	r2, r3
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	4907      	ldr	r1, [pc, #28]	; (8005e64 <I2C_MasterRequestRead+0x198>)
 8005e46:	68f8      	ldr	r0, [r7, #12]
 8005e48:	f000 fa8b 	bl	8006362 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d001      	beq.n	8005e56 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e000      	b.n	8005e58 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005e56:	2300      	movs	r3, #0
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3718      	adds	r7, #24
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	00010008 	.word	0x00010008
 8005e64:	00010002 	.word	0x00010002

08005e68 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b088      	sub	sp, #32
 8005e6c:	af02      	add	r7, sp, #8
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	4608      	mov	r0, r1
 8005e72:	4611      	mov	r1, r2
 8005e74:	461a      	mov	r2, r3
 8005e76:	4603      	mov	r3, r0
 8005e78:	817b      	strh	r3, [r7, #10]
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	813b      	strh	r3, [r7, #8]
 8005e7e:	4613      	mov	r3, r2
 8005e80:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e94:	9300      	str	r3, [sp, #0]
 8005e96:	6a3b      	ldr	r3, [r7, #32]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f000 fa08 	bl	80062b4 <I2C_WaitOnFlagUntilTimeout>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00d      	beq.n	8005ec6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eb8:	d103      	bne.n	8005ec2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ec0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e05f      	b.n	8005f86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005ec6:	897b      	ldrh	r3, [r7, #10]
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	461a      	mov	r2, r3
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005ed4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed8:	6a3a      	ldr	r2, [r7, #32]
 8005eda:	492d      	ldr	r1, [pc, #180]	; (8005f90 <I2C_RequestMemoryWrite+0x128>)
 8005edc:	68f8      	ldr	r0, [r7, #12]
 8005ede:	f000 fa40 	bl	8006362 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d001      	beq.n	8005eec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e04c      	b.n	8005f86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005eec:	2300      	movs	r3, #0
 8005eee:	617b      	str	r3, [r7, #20]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	617b      	str	r3, [r7, #20]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	699b      	ldr	r3, [r3, #24]
 8005efe:	617b      	str	r3, [r7, #20]
 8005f00:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f04:	6a39      	ldr	r1, [r7, #32]
 8005f06:	68f8      	ldr	r0, [r7, #12]
 8005f08:	f000 faaa 	bl	8006460 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00d      	beq.n	8005f2e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f16:	2b04      	cmp	r3, #4
 8005f18:	d107      	bne.n	8005f2a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f28:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e02b      	b.n	8005f86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f2e:	88fb      	ldrh	r3, [r7, #6]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d105      	bne.n	8005f40 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f34:	893b      	ldrh	r3, [r7, #8]
 8005f36:	b2da      	uxtb	r2, r3
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	611a      	str	r2, [r3, #16]
 8005f3e:	e021      	b.n	8005f84 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005f40:	893b      	ldrh	r3, [r7, #8]
 8005f42:	0a1b      	lsrs	r3, r3, #8
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	b2da      	uxtb	r2, r3
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f50:	6a39      	ldr	r1, [r7, #32]
 8005f52:	68f8      	ldr	r0, [r7, #12]
 8005f54:	f000 fa84 	bl	8006460 <I2C_WaitOnTXEFlagUntilTimeout>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00d      	beq.n	8005f7a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f62:	2b04      	cmp	r3, #4
 8005f64:	d107      	bne.n	8005f76 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f74:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e005      	b.n	8005f86 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f7a:	893b      	ldrh	r3, [r7, #8]
 8005f7c:	b2da      	uxtb	r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3718      	adds	r7, #24
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	00010002 	.word	0x00010002

08005f94 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b088      	sub	sp, #32
 8005f98:	af02      	add	r7, sp, #8
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	4608      	mov	r0, r1
 8005f9e:	4611      	mov	r1, r2
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	817b      	strh	r3, [r7, #10]
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	813b      	strh	r3, [r7, #8]
 8005faa:	4613      	mov	r3, r2
 8005fac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005fbc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fcc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd0:	9300      	str	r3, [sp, #0]
 8005fd2:	6a3b      	ldr	r3, [r7, #32]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005fda:	68f8      	ldr	r0, [r7, #12]
 8005fdc:	f000 f96a 	bl	80062b4 <I2C_WaitOnFlagUntilTimeout>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00d      	beq.n	8006002 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ff0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ff4:	d103      	bne.n	8005ffe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ffc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e0aa      	b.n	8006158 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006002:	897b      	ldrh	r3, [r7, #10]
 8006004:	b2db      	uxtb	r3, r3
 8006006:	461a      	mov	r2, r3
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006010:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006014:	6a3a      	ldr	r2, [r7, #32]
 8006016:	4952      	ldr	r1, [pc, #328]	; (8006160 <I2C_RequestMemoryRead+0x1cc>)
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f000 f9a2 	bl	8006362 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d001      	beq.n	8006028 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e097      	b.n	8006158 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006028:	2300      	movs	r3, #0
 800602a:	617b      	str	r3, [r7, #20]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	695b      	ldr	r3, [r3, #20]
 8006032:	617b      	str	r3, [r7, #20]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	699b      	ldr	r3, [r3, #24]
 800603a:	617b      	str	r3, [r7, #20]
 800603c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800603e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006040:	6a39      	ldr	r1, [r7, #32]
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f000 fa0c 	bl	8006460 <I2C_WaitOnTXEFlagUntilTimeout>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00d      	beq.n	800606a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006052:	2b04      	cmp	r3, #4
 8006054:	d107      	bne.n	8006066 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006064:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e076      	b.n	8006158 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800606a:	88fb      	ldrh	r3, [r7, #6]
 800606c:	2b01      	cmp	r3, #1
 800606e:	d105      	bne.n	800607c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006070:	893b      	ldrh	r3, [r7, #8]
 8006072:	b2da      	uxtb	r2, r3
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	611a      	str	r2, [r3, #16]
 800607a:	e021      	b.n	80060c0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800607c:	893b      	ldrh	r3, [r7, #8]
 800607e:	0a1b      	lsrs	r3, r3, #8
 8006080:	b29b      	uxth	r3, r3
 8006082:	b2da      	uxtb	r2, r3
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800608a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800608c:	6a39      	ldr	r1, [r7, #32]
 800608e:	68f8      	ldr	r0, [r7, #12]
 8006090:	f000 f9e6 	bl	8006460 <I2C_WaitOnTXEFlagUntilTimeout>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	d00d      	beq.n	80060b6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609e:	2b04      	cmp	r3, #4
 80060a0:	d107      	bne.n	80060b2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e050      	b.n	8006158 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80060b6:	893b      	ldrh	r3, [r7, #8]
 80060b8:	b2da      	uxtb	r2, r3
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060c2:	6a39      	ldr	r1, [r7, #32]
 80060c4:	68f8      	ldr	r0, [r7, #12]
 80060c6:	f000 f9cb 	bl	8006460 <I2C_WaitOnTXEFlagUntilTimeout>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d00d      	beq.n	80060ec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d4:	2b04      	cmp	r3, #4
 80060d6:	d107      	bne.n	80060e8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060e6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e035      	b.n	8006158 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060fa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80060fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fe:	9300      	str	r3, [sp, #0]
 8006100:	6a3b      	ldr	r3, [r7, #32]
 8006102:	2200      	movs	r2, #0
 8006104:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006108:	68f8      	ldr	r0, [r7, #12]
 800610a:	f000 f8d3 	bl	80062b4 <I2C_WaitOnFlagUntilTimeout>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00d      	beq.n	8006130 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800611e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006122:	d103      	bne.n	800612c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f44f 7200 	mov.w	r2, #512	; 0x200
 800612a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800612c:	2303      	movs	r3, #3
 800612e:	e013      	b.n	8006158 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006130:	897b      	ldrh	r3, [r7, #10]
 8006132:	b2db      	uxtb	r3, r3
 8006134:	f043 0301 	orr.w	r3, r3, #1
 8006138:	b2da      	uxtb	r2, r3
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006142:	6a3a      	ldr	r2, [r7, #32]
 8006144:	4906      	ldr	r1, [pc, #24]	; (8006160 <I2C_RequestMemoryRead+0x1cc>)
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	f000 f90b 	bl	8006362 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d001      	beq.n	8006156 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e000      	b.n	8006158 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006156:	2300      	movs	r3, #0
}
 8006158:	4618      	mov	r0, r3
 800615a:	3718      	adds	r7, #24
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}
 8006160:	00010002 	.word	0x00010002

08006164 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b086      	sub	sp, #24
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800616c:	2300      	movs	r3, #0
 800616e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006174:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800617c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800617e:	4b4b      	ldr	r3, [pc, #300]	; (80062ac <I2C_DMAAbort+0x148>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	08db      	lsrs	r3, r3, #3
 8006184:	4a4a      	ldr	r2, [pc, #296]	; (80062b0 <I2C_DMAAbort+0x14c>)
 8006186:	fba2 2303 	umull	r2, r3, r2, r3
 800618a:	0a1a      	lsrs	r2, r3, #8
 800618c:	4613      	mov	r3, r2
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	4413      	add	r3, r2
 8006192:	00da      	lsls	r2, r3, #3
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d106      	bne.n	80061ac <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a2:	f043 0220 	orr.w	r2, r3, #32
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80061aa:	e00a      	b.n	80061c2 <I2C_DMAAbort+0x5e>
    }
    count--;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	3b01      	subs	r3, #1
 80061b0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061c0:	d0ea      	beq.n	8006198 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d003      	beq.n	80061d2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ce:	2200      	movs	r2, #0
 80061d0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d003      	beq.n	80061e2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061de:	2200      	movs	r2, #0
 80061e0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061f0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	2200      	movs	r2, #0
 80061f6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d003      	beq.n	8006208 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006204:	2200      	movs	r2, #0
 8006206:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620c:	2b00      	cmp	r3, #0
 800620e:	d003      	beq.n	8006218 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006214:	2200      	movs	r2, #0
 8006216:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f022 0201 	bic.w	r2, r2, #1
 8006226:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800622e:	b2db      	uxtb	r3, r3
 8006230:	2b60      	cmp	r3, #96	; 0x60
 8006232:	d10e      	bne.n	8006252 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	2220      	movs	r2, #32
 8006238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	2200      	movs	r2, #0
 8006240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	2200      	movs	r2, #0
 8006248:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800624a:	6978      	ldr	r0, [r7, #20]
 800624c:	f7fe fb4c 	bl	80048e8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006250:	e027      	b.n	80062a2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006252:	7cfb      	ldrb	r3, [r7, #19]
 8006254:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006258:	2b28      	cmp	r3, #40	; 0x28
 800625a:	d117      	bne.n	800628c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f042 0201 	orr.w	r2, r2, #1
 800626a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800627a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	2200      	movs	r2, #0
 8006280:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	2228      	movs	r2, #40	; 0x28
 8006286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800628a:	e007      	b.n	800629c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	2220      	movs	r2, #32
 8006290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	2200      	movs	r2, #0
 8006298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800629c:	6978      	ldr	r0, [r7, #20]
 800629e:	f7fe fb19 	bl	80048d4 <HAL_I2C_ErrorCallback>
}
 80062a2:	bf00      	nop
 80062a4:	3718      	adds	r7, #24
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	20000000 	.word	0x20000000
 80062b0:	14f8b589 	.word	0x14f8b589

080062b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	603b      	str	r3, [r7, #0]
 80062c0:	4613      	mov	r3, r2
 80062c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062c4:	e025      	b.n	8006312 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062cc:	d021      	beq.n	8006312 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062ce:	f7fc fc53 	bl	8002b78 <HAL_GetTick>
 80062d2:	4602      	mov	r2, r0
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	683a      	ldr	r2, [r7, #0]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d302      	bcc.n	80062e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d116      	bne.n	8006312 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2200      	movs	r2, #0
 80062e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2220      	movs	r2, #32
 80062ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fe:	f043 0220 	orr.w	r2, r3, #32
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e023      	b.n	800635a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	0c1b      	lsrs	r3, r3, #16
 8006316:	b2db      	uxtb	r3, r3
 8006318:	2b01      	cmp	r3, #1
 800631a:	d10d      	bne.n	8006338 <I2C_WaitOnFlagUntilTimeout+0x84>
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	695b      	ldr	r3, [r3, #20]
 8006322:	43da      	mvns	r2, r3
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	4013      	ands	r3, r2
 8006328:	b29b      	uxth	r3, r3
 800632a:	2b00      	cmp	r3, #0
 800632c:	bf0c      	ite	eq
 800632e:	2301      	moveq	r3, #1
 8006330:	2300      	movne	r3, #0
 8006332:	b2db      	uxtb	r3, r3
 8006334:	461a      	mov	r2, r3
 8006336:	e00c      	b.n	8006352 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	43da      	mvns	r2, r3
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	4013      	ands	r3, r2
 8006344:	b29b      	uxth	r3, r3
 8006346:	2b00      	cmp	r3, #0
 8006348:	bf0c      	ite	eq
 800634a:	2301      	moveq	r3, #1
 800634c:	2300      	movne	r3, #0
 800634e:	b2db      	uxtb	r3, r3
 8006350:	461a      	mov	r2, r3
 8006352:	79fb      	ldrb	r3, [r7, #7]
 8006354:	429a      	cmp	r2, r3
 8006356:	d0b6      	beq.n	80062c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3710      	adds	r7, #16
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b084      	sub	sp, #16
 8006366:	af00      	add	r7, sp, #0
 8006368:	60f8      	str	r0, [r7, #12]
 800636a:	60b9      	str	r1, [r7, #8]
 800636c:	607a      	str	r2, [r7, #4]
 800636e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006370:	e051      	b.n	8006416 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	695b      	ldr	r3, [r3, #20]
 8006378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800637c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006380:	d123      	bne.n	80063ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006390:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800639a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2220      	movs	r2, #32
 80063a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2200      	movs	r2, #0
 80063ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b6:	f043 0204 	orr.w	r2, r3, #4
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e046      	b.n	8006458 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063d0:	d021      	beq.n	8006416 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063d2:	f7fc fbd1 	bl	8002b78 <HAL_GetTick>
 80063d6:	4602      	mov	r2, r0
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	429a      	cmp	r2, r3
 80063e0:	d302      	bcc.n	80063e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d116      	bne.n	8006416 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2200      	movs	r2, #0
 80063ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2220      	movs	r2, #32
 80063f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006402:	f043 0220 	orr.w	r2, r3, #32
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2200      	movs	r2, #0
 800640e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e020      	b.n	8006458 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	0c1b      	lsrs	r3, r3, #16
 800641a:	b2db      	uxtb	r3, r3
 800641c:	2b01      	cmp	r3, #1
 800641e:	d10c      	bne.n	800643a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	695b      	ldr	r3, [r3, #20]
 8006426:	43da      	mvns	r2, r3
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	4013      	ands	r3, r2
 800642c:	b29b      	uxth	r3, r3
 800642e:	2b00      	cmp	r3, #0
 8006430:	bf14      	ite	ne
 8006432:	2301      	movne	r3, #1
 8006434:	2300      	moveq	r3, #0
 8006436:	b2db      	uxtb	r3, r3
 8006438:	e00b      	b.n	8006452 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	699b      	ldr	r3, [r3, #24]
 8006440:	43da      	mvns	r2, r3
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	4013      	ands	r3, r2
 8006446:	b29b      	uxth	r3, r3
 8006448:	2b00      	cmp	r3, #0
 800644a:	bf14      	ite	ne
 800644c:	2301      	movne	r3, #1
 800644e:	2300      	moveq	r3, #0
 8006450:	b2db      	uxtb	r3, r3
 8006452:	2b00      	cmp	r3, #0
 8006454:	d18d      	bne.n	8006372 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3710      	adds	r7, #16
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800646c:	e02d      	b.n	80064ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800646e:	68f8      	ldr	r0, [r7, #12]
 8006470:	f000 f900 	bl	8006674 <I2C_IsAcknowledgeFailed>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d001      	beq.n	800647e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e02d      	b.n	80064da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006484:	d021      	beq.n	80064ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006486:	f7fc fb77 	bl	8002b78 <HAL_GetTick>
 800648a:	4602      	mov	r2, r0
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	1ad3      	subs	r3, r2, r3
 8006490:	68ba      	ldr	r2, [r7, #8]
 8006492:	429a      	cmp	r2, r3
 8006494:	d302      	bcc.n	800649c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d116      	bne.n	80064ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2200      	movs	r2, #0
 80064a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2220      	movs	r2, #32
 80064a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b6:	f043 0220 	orr.w	r2, r3, #32
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e007      	b.n	80064da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	695b      	ldr	r3, [r3, #20]
 80064d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064d4:	2b80      	cmp	r3, #128	; 0x80
 80064d6:	d1ca      	bne.n	800646e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3710      	adds	r7, #16
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}

080064e2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064e2:	b580      	push	{r7, lr}
 80064e4:	b084      	sub	sp, #16
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	60f8      	str	r0, [r7, #12]
 80064ea:	60b9      	str	r1, [r7, #8]
 80064ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80064ee:	e02d      	b.n	800654c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80064f0:	68f8      	ldr	r0, [r7, #12]
 80064f2:	f000 f8bf 	bl	8006674 <I2C_IsAcknowledgeFailed>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d001      	beq.n	8006500 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	e02d      	b.n	800655c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006506:	d021      	beq.n	800654c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006508:	f7fc fb36 	bl	8002b78 <HAL_GetTick>
 800650c:	4602      	mov	r2, r0
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	68ba      	ldr	r2, [r7, #8]
 8006514:	429a      	cmp	r2, r3
 8006516:	d302      	bcc.n	800651e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d116      	bne.n	800654c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2220      	movs	r2, #32
 8006528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2200      	movs	r2, #0
 8006530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006538:	f043 0220 	orr.w	r2, r3, #32
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2200      	movs	r2, #0
 8006544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e007      	b.n	800655c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	f003 0304 	and.w	r3, r3, #4
 8006556:	2b04      	cmp	r3, #4
 8006558:	d1ca      	bne.n	80064f0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	3710      	adds	r7, #16
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006564:	b480      	push	{r7}
 8006566:	b085      	sub	sp, #20
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800656c:	2300      	movs	r3, #0
 800656e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006570:	4b13      	ldr	r3, [pc, #76]	; (80065c0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	08db      	lsrs	r3, r3, #3
 8006576:	4a13      	ldr	r2, [pc, #76]	; (80065c4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006578:	fba2 2303 	umull	r2, r3, r2, r3
 800657c:	0a1a      	lsrs	r2, r3, #8
 800657e:	4613      	mov	r3, r2
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	4413      	add	r3, r2
 8006584:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	3b01      	subs	r3, #1
 800658a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d107      	bne.n	80065a2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006596:	f043 0220 	orr.w	r2, r3, #32
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e008      	b.n	80065b4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065b0:	d0e9      	beq.n	8006586 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80065b2:	2300      	movs	r3, #0
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3714      	adds	r7, #20
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr
 80065c0:	20000000 	.word	0x20000000
 80065c4:	14f8b589 	.word	0x14f8b589

080065c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80065d4:	e042      	b.n	800665c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	695b      	ldr	r3, [r3, #20]
 80065dc:	f003 0310 	and.w	r3, r3, #16
 80065e0:	2b10      	cmp	r3, #16
 80065e2:	d119      	bne.n	8006618 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f06f 0210 	mvn.w	r2, #16
 80065ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2200      	movs	r2, #0
 80065f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2220      	movs	r2, #32
 80065f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2200      	movs	r2, #0
 8006600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2200      	movs	r2, #0
 8006610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	e029      	b.n	800666c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006618:	f7fc faae 	bl	8002b78 <HAL_GetTick>
 800661c:	4602      	mov	r2, r0
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	68ba      	ldr	r2, [r7, #8]
 8006624:	429a      	cmp	r2, r3
 8006626:	d302      	bcc.n	800662e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d116      	bne.n	800665c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2200      	movs	r2, #0
 8006632:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2220      	movs	r2, #32
 8006638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2200      	movs	r2, #0
 8006640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006648:	f043 0220 	orr.w	r2, r3, #32
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2200      	movs	r2, #0
 8006654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e007      	b.n	800666c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	695b      	ldr	r3, [r3, #20]
 8006662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006666:	2b40      	cmp	r3, #64	; 0x40
 8006668:	d1b5      	bne.n	80065d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800666a:	2300      	movs	r3, #0
}
 800666c:	4618      	mov	r0, r3
 800666e:	3710      	adds	r7, #16
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	695b      	ldr	r3, [r3, #20]
 8006682:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006686:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800668a:	d11b      	bne.n	80066c4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006694:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2220      	movs	r2, #32
 80066a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b0:	f043 0204 	orr.w	r2, r3, #4
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	e000      	b.n	80066c6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	370c      	adds	r7, #12
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr

080066d2 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80066d2:	b480      	push	{r7}
 80066d4:	b083      	sub	sp, #12
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066de:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80066e2:	d103      	bne.n	80066ec <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2201      	movs	r2, #1
 80066e8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80066ea:	e007      	b.n	80066fc <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80066f4:	d102      	bne.n	80066fc <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2208      	movs	r2, #8
 80066fa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80066fc:	bf00      	nop
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b086      	sub	sp, #24
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d101      	bne.n	800671a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	e267      	b.n	8006bea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 0301 	and.w	r3, r3, #1
 8006722:	2b00      	cmp	r3, #0
 8006724:	d075      	beq.n	8006812 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006726:	4b88      	ldr	r3, [pc, #544]	; (8006948 <HAL_RCC_OscConfig+0x240>)
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	f003 030c 	and.w	r3, r3, #12
 800672e:	2b04      	cmp	r3, #4
 8006730:	d00c      	beq.n	800674c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006732:	4b85      	ldr	r3, [pc, #532]	; (8006948 <HAL_RCC_OscConfig+0x240>)
 8006734:	689b      	ldr	r3, [r3, #8]
 8006736:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800673a:	2b08      	cmp	r3, #8
 800673c:	d112      	bne.n	8006764 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800673e:	4b82      	ldr	r3, [pc, #520]	; (8006948 <HAL_RCC_OscConfig+0x240>)
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006746:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800674a:	d10b      	bne.n	8006764 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800674c:	4b7e      	ldr	r3, [pc, #504]	; (8006948 <HAL_RCC_OscConfig+0x240>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006754:	2b00      	cmp	r3, #0
 8006756:	d05b      	beq.n	8006810 <HAL_RCC_OscConfig+0x108>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d157      	bne.n	8006810 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	e242      	b.n	8006bea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800676c:	d106      	bne.n	800677c <HAL_RCC_OscConfig+0x74>
 800676e:	4b76      	ldr	r3, [pc, #472]	; (8006948 <HAL_RCC_OscConfig+0x240>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a75      	ldr	r2, [pc, #468]	; (8006948 <HAL_RCC_OscConfig+0x240>)
 8006774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006778:	6013      	str	r3, [r2, #0]
 800677a:	e01d      	b.n	80067b8 <HAL_RCC_OscConfig+0xb0>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006784:	d10c      	bne.n	80067a0 <HAL_RCC_OscConfig+0x98>
 8006786:	4b70      	ldr	r3, [pc, #448]	; (8006948 <HAL_RCC_OscConfig+0x240>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a6f      	ldr	r2, [pc, #444]	; (8006948 <HAL_RCC_OscConfig+0x240>)
 800678c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006790:	6013      	str	r3, [r2, #0]
 8006792:	4b6d      	ldr	r3, [pc, #436]	; (8006948 <HAL_RCC_OscConfig+0x240>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a6c      	ldr	r2, [pc, #432]	; (8006948 <HAL_RCC_OscConfig+0x240>)
 8006798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800679c:	6013      	str	r3, [r2, #0]
 800679e:	e00b      	b.n	80067b8 <HAL_RCC_OscConfig+0xb0>
 80067a0:	4b69      	ldr	r3, [pc, #420]	; (8006948 <HAL_RCC_OscConfig+0x240>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a68      	ldr	r2, [pc, #416]	; (8006948 <HAL_RCC_OscConfig+0x240>)
 80067a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067aa:	6013      	str	r3, [r2, #0]
 80067ac:	4b66      	ldr	r3, [pc, #408]	; (8006948 <HAL_RCC_OscConfig+0x240>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a65      	ldr	r2, [pc, #404]	; (8006948 <HAL_RCC_OscConfig+0x240>)
 80067b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d013      	beq.n	80067e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067c0:	f7fc f9da 	bl	8002b78 <HAL_GetTick>
 80067c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067c6:	e008      	b.n	80067da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067c8:	f7fc f9d6 	bl	8002b78 <HAL_GetTick>
 80067cc:	4602      	mov	r2, r0
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	1ad3      	subs	r3, r2, r3
 80067d2:	2b64      	cmp	r3, #100	; 0x64
 80067d4:	d901      	bls.n	80067da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80067d6:	2303      	movs	r3, #3
 80067d8:	e207      	b.n	8006bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067da:	4b5b      	ldr	r3, [pc, #364]	; (8006948 <HAL_RCC_OscConfig+0x240>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d0f0      	beq.n	80067c8 <HAL_RCC_OscConfig+0xc0>
 80067e6:	e014      	b.n	8006812 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067e8:	f7fc f9c6 	bl	8002b78 <HAL_GetTick>
 80067ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067ee:	e008      	b.n	8006802 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067f0:	f7fc f9c2 	bl	8002b78 <HAL_GetTick>
 80067f4:	4602      	mov	r2, r0
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	2b64      	cmp	r3, #100	; 0x64
 80067fc:	d901      	bls.n	8006802 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80067fe:	2303      	movs	r3, #3
 8006800:	e1f3      	b.n	8006bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006802:	4b51      	ldr	r3, [pc, #324]	; (8006948 <HAL_RCC_OscConfig+0x240>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800680a:	2b00      	cmp	r3, #0
 800680c:	d1f0      	bne.n	80067f0 <HAL_RCC_OscConfig+0xe8>
 800680e:	e000      	b.n	8006812 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006810:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 0302 	and.w	r3, r3, #2
 800681a:	2b00      	cmp	r3, #0
 800681c:	d063      	beq.n	80068e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800681e:	4b4a      	ldr	r3, [pc, #296]	; (8006948 <HAL_RCC_OscConfig+0x240>)
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	f003 030c 	and.w	r3, r3, #12
 8006826:	2b00      	cmp	r3, #0
 8006828:	d00b      	beq.n	8006842 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800682a:	4b47      	ldr	r3, [pc, #284]	; (8006948 <HAL_RCC_OscConfig+0x240>)
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006832:	2b08      	cmp	r3, #8
 8006834:	d11c      	bne.n	8006870 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006836:	4b44      	ldr	r3, [pc, #272]	; (8006948 <HAL_RCC_OscConfig+0x240>)
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800683e:	2b00      	cmp	r3, #0
 8006840:	d116      	bne.n	8006870 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006842:	4b41      	ldr	r3, [pc, #260]	; (8006948 <HAL_RCC_OscConfig+0x240>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 0302 	and.w	r3, r3, #2
 800684a:	2b00      	cmp	r3, #0
 800684c:	d005      	beq.n	800685a <HAL_RCC_OscConfig+0x152>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	2b01      	cmp	r3, #1
 8006854:	d001      	beq.n	800685a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e1c7      	b.n	8006bea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800685a:	4b3b      	ldr	r3, [pc, #236]	; (8006948 <HAL_RCC_OscConfig+0x240>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	00db      	lsls	r3, r3, #3
 8006868:	4937      	ldr	r1, [pc, #220]	; (8006948 <HAL_RCC_OscConfig+0x240>)
 800686a:	4313      	orrs	r3, r2
 800686c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800686e:	e03a      	b.n	80068e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d020      	beq.n	80068ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006878:	4b34      	ldr	r3, [pc, #208]	; (800694c <HAL_RCC_OscConfig+0x244>)
 800687a:	2201      	movs	r2, #1
 800687c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800687e:	f7fc f97b 	bl	8002b78 <HAL_GetTick>
 8006882:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006884:	e008      	b.n	8006898 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006886:	f7fc f977 	bl	8002b78 <HAL_GetTick>
 800688a:	4602      	mov	r2, r0
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	1ad3      	subs	r3, r2, r3
 8006890:	2b02      	cmp	r3, #2
 8006892:	d901      	bls.n	8006898 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006894:	2303      	movs	r3, #3
 8006896:	e1a8      	b.n	8006bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006898:	4b2b      	ldr	r3, [pc, #172]	; (8006948 <HAL_RCC_OscConfig+0x240>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 0302 	and.w	r3, r3, #2
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d0f0      	beq.n	8006886 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068a4:	4b28      	ldr	r3, [pc, #160]	; (8006948 <HAL_RCC_OscConfig+0x240>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	691b      	ldr	r3, [r3, #16]
 80068b0:	00db      	lsls	r3, r3, #3
 80068b2:	4925      	ldr	r1, [pc, #148]	; (8006948 <HAL_RCC_OscConfig+0x240>)
 80068b4:	4313      	orrs	r3, r2
 80068b6:	600b      	str	r3, [r1, #0]
 80068b8:	e015      	b.n	80068e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068ba:	4b24      	ldr	r3, [pc, #144]	; (800694c <HAL_RCC_OscConfig+0x244>)
 80068bc:	2200      	movs	r2, #0
 80068be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068c0:	f7fc f95a 	bl	8002b78 <HAL_GetTick>
 80068c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068c6:	e008      	b.n	80068da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80068c8:	f7fc f956 	bl	8002b78 <HAL_GetTick>
 80068cc:	4602      	mov	r2, r0
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d901      	bls.n	80068da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e187      	b.n	8006bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068da:	4b1b      	ldr	r3, [pc, #108]	; (8006948 <HAL_RCC_OscConfig+0x240>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 0302 	and.w	r3, r3, #2
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d1f0      	bne.n	80068c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 0308 	and.w	r3, r3, #8
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d036      	beq.n	8006960 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	695b      	ldr	r3, [r3, #20]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d016      	beq.n	8006928 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80068fa:	4b15      	ldr	r3, [pc, #84]	; (8006950 <HAL_RCC_OscConfig+0x248>)
 80068fc:	2201      	movs	r2, #1
 80068fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006900:	f7fc f93a 	bl	8002b78 <HAL_GetTick>
 8006904:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006906:	e008      	b.n	800691a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006908:	f7fc f936 	bl	8002b78 <HAL_GetTick>
 800690c:	4602      	mov	r2, r0
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	2b02      	cmp	r3, #2
 8006914:	d901      	bls.n	800691a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006916:	2303      	movs	r3, #3
 8006918:	e167      	b.n	8006bea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800691a:	4b0b      	ldr	r3, [pc, #44]	; (8006948 <HAL_RCC_OscConfig+0x240>)
 800691c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800691e:	f003 0302 	and.w	r3, r3, #2
 8006922:	2b00      	cmp	r3, #0
 8006924:	d0f0      	beq.n	8006908 <HAL_RCC_OscConfig+0x200>
 8006926:	e01b      	b.n	8006960 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006928:	4b09      	ldr	r3, [pc, #36]	; (8006950 <HAL_RCC_OscConfig+0x248>)
 800692a:	2200      	movs	r2, #0
 800692c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800692e:	f7fc f923 	bl	8002b78 <HAL_GetTick>
 8006932:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006934:	e00e      	b.n	8006954 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006936:	f7fc f91f 	bl	8002b78 <HAL_GetTick>
 800693a:	4602      	mov	r2, r0
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	1ad3      	subs	r3, r2, r3
 8006940:	2b02      	cmp	r3, #2
 8006942:	d907      	bls.n	8006954 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006944:	2303      	movs	r3, #3
 8006946:	e150      	b.n	8006bea <HAL_RCC_OscConfig+0x4e2>
 8006948:	40023800 	.word	0x40023800
 800694c:	42470000 	.word	0x42470000
 8006950:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006954:	4b88      	ldr	r3, [pc, #544]	; (8006b78 <HAL_RCC_OscConfig+0x470>)
 8006956:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006958:	f003 0302 	and.w	r3, r3, #2
 800695c:	2b00      	cmp	r3, #0
 800695e:	d1ea      	bne.n	8006936 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 0304 	and.w	r3, r3, #4
 8006968:	2b00      	cmp	r3, #0
 800696a:	f000 8097 	beq.w	8006a9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800696e:	2300      	movs	r3, #0
 8006970:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006972:	4b81      	ldr	r3, [pc, #516]	; (8006b78 <HAL_RCC_OscConfig+0x470>)
 8006974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800697a:	2b00      	cmp	r3, #0
 800697c:	d10f      	bne.n	800699e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800697e:	2300      	movs	r3, #0
 8006980:	60bb      	str	r3, [r7, #8]
 8006982:	4b7d      	ldr	r3, [pc, #500]	; (8006b78 <HAL_RCC_OscConfig+0x470>)
 8006984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006986:	4a7c      	ldr	r2, [pc, #496]	; (8006b78 <HAL_RCC_OscConfig+0x470>)
 8006988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800698c:	6413      	str	r3, [r2, #64]	; 0x40
 800698e:	4b7a      	ldr	r3, [pc, #488]	; (8006b78 <HAL_RCC_OscConfig+0x470>)
 8006990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006996:	60bb      	str	r3, [r7, #8]
 8006998:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800699a:	2301      	movs	r3, #1
 800699c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800699e:	4b77      	ldr	r3, [pc, #476]	; (8006b7c <HAL_RCC_OscConfig+0x474>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d118      	bne.n	80069dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80069aa:	4b74      	ldr	r3, [pc, #464]	; (8006b7c <HAL_RCC_OscConfig+0x474>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a73      	ldr	r2, [pc, #460]	; (8006b7c <HAL_RCC_OscConfig+0x474>)
 80069b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069b6:	f7fc f8df 	bl	8002b78 <HAL_GetTick>
 80069ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069bc:	e008      	b.n	80069d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069be:	f7fc f8db 	bl	8002b78 <HAL_GetTick>
 80069c2:	4602      	mov	r2, r0
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	1ad3      	subs	r3, r2, r3
 80069c8:	2b02      	cmp	r3, #2
 80069ca:	d901      	bls.n	80069d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80069cc:	2303      	movs	r3, #3
 80069ce:	e10c      	b.n	8006bea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069d0:	4b6a      	ldr	r3, [pc, #424]	; (8006b7c <HAL_RCC_OscConfig+0x474>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d0f0      	beq.n	80069be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d106      	bne.n	80069f2 <HAL_RCC_OscConfig+0x2ea>
 80069e4:	4b64      	ldr	r3, [pc, #400]	; (8006b78 <HAL_RCC_OscConfig+0x470>)
 80069e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069e8:	4a63      	ldr	r2, [pc, #396]	; (8006b78 <HAL_RCC_OscConfig+0x470>)
 80069ea:	f043 0301 	orr.w	r3, r3, #1
 80069ee:	6713      	str	r3, [r2, #112]	; 0x70
 80069f0:	e01c      	b.n	8006a2c <HAL_RCC_OscConfig+0x324>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	2b05      	cmp	r3, #5
 80069f8:	d10c      	bne.n	8006a14 <HAL_RCC_OscConfig+0x30c>
 80069fa:	4b5f      	ldr	r3, [pc, #380]	; (8006b78 <HAL_RCC_OscConfig+0x470>)
 80069fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069fe:	4a5e      	ldr	r2, [pc, #376]	; (8006b78 <HAL_RCC_OscConfig+0x470>)
 8006a00:	f043 0304 	orr.w	r3, r3, #4
 8006a04:	6713      	str	r3, [r2, #112]	; 0x70
 8006a06:	4b5c      	ldr	r3, [pc, #368]	; (8006b78 <HAL_RCC_OscConfig+0x470>)
 8006a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a0a:	4a5b      	ldr	r2, [pc, #364]	; (8006b78 <HAL_RCC_OscConfig+0x470>)
 8006a0c:	f043 0301 	orr.w	r3, r3, #1
 8006a10:	6713      	str	r3, [r2, #112]	; 0x70
 8006a12:	e00b      	b.n	8006a2c <HAL_RCC_OscConfig+0x324>
 8006a14:	4b58      	ldr	r3, [pc, #352]	; (8006b78 <HAL_RCC_OscConfig+0x470>)
 8006a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a18:	4a57      	ldr	r2, [pc, #348]	; (8006b78 <HAL_RCC_OscConfig+0x470>)
 8006a1a:	f023 0301 	bic.w	r3, r3, #1
 8006a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8006a20:	4b55      	ldr	r3, [pc, #340]	; (8006b78 <HAL_RCC_OscConfig+0x470>)
 8006a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a24:	4a54      	ldr	r2, [pc, #336]	; (8006b78 <HAL_RCC_OscConfig+0x470>)
 8006a26:	f023 0304 	bic.w	r3, r3, #4
 8006a2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d015      	beq.n	8006a60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a34:	f7fc f8a0 	bl	8002b78 <HAL_GetTick>
 8006a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a3a:	e00a      	b.n	8006a52 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a3c:	f7fc f89c 	bl	8002b78 <HAL_GetTick>
 8006a40:	4602      	mov	r2, r0
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	1ad3      	subs	r3, r2, r3
 8006a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d901      	bls.n	8006a52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e0cb      	b.n	8006bea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a52:	4b49      	ldr	r3, [pc, #292]	; (8006b78 <HAL_RCC_OscConfig+0x470>)
 8006a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a56:	f003 0302 	and.w	r3, r3, #2
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d0ee      	beq.n	8006a3c <HAL_RCC_OscConfig+0x334>
 8006a5e:	e014      	b.n	8006a8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a60:	f7fc f88a 	bl	8002b78 <HAL_GetTick>
 8006a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a66:	e00a      	b.n	8006a7e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a68:	f7fc f886 	bl	8002b78 <HAL_GetTick>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d901      	bls.n	8006a7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	e0b5      	b.n	8006bea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a7e:	4b3e      	ldr	r3, [pc, #248]	; (8006b78 <HAL_RCC_OscConfig+0x470>)
 8006a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a82:	f003 0302 	and.w	r3, r3, #2
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d1ee      	bne.n	8006a68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a8a:	7dfb      	ldrb	r3, [r7, #23]
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d105      	bne.n	8006a9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a90:	4b39      	ldr	r3, [pc, #228]	; (8006b78 <HAL_RCC_OscConfig+0x470>)
 8006a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a94:	4a38      	ldr	r2, [pc, #224]	; (8006b78 <HAL_RCC_OscConfig+0x470>)
 8006a96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	699b      	ldr	r3, [r3, #24]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	f000 80a1 	beq.w	8006be8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006aa6:	4b34      	ldr	r3, [pc, #208]	; (8006b78 <HAL_RCC_OscConfig+0x470>)
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	f003 030c 	and.w	r3, r3, #12
 8006aae:	2b08      	cmp	r3, #8
 8006ab0:	d05c      	beq.n	8006b6c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	699b      	ldr	r3, [r3, #24]
 8006ab6:	2b02      	cmp	r3, #2
 8006ab8:	d141      	bne.n	8006b3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006aba:	4b31      	ldr	r3, [pc, #196]	; (8006b80 <HAL_RCC_OscConfig+0x478>)
 8006abc:	2200      	movs	r2, #0
 8006abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ac0:	f7fc f85a 	bl	8002b78 <HAL_GetTick>
 8006ac4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ac6:	e008      	b.n	8006ada <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ac8:	f7fc f856 	bl	8002b78 <HAL_GetTick>
 8006acc:	4602      	mov	r2, r0
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	1ad3      	subs	r3, r2, r3
 8006ad2:	2b02      	cmp	r3, #2
 8006ad4:	d901      	bls.n	8006ada <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006ad6:	2303      	movs	r3, #3
 8006ad8:	e087      	b.n	8006bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ada:	4b27      	ldr	r3, [pc, #156]	; (8006b78 <HAL_RCC_OscConfig+0x470>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d1f0      	bne.n	8006ac8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	69da      	ldr	r2, [r3, #28]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a1b      	ldr	r3, [r3, #32]
 8006aee:	431a      	orrs	r2, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af4:	019b      	lsls	r3, r3, #6
 8006af6:	431a      	orrs	r2, r3
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006afc:	085b      	lsrs	r3, r3, #1
 8006afe:	3b01      	subs	r3, #1
 8006b00:	041b      	lsls	r3, r3, #16
 8006b02:	431a      	orrs	r2, r3
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b08:	061b      	lsls	r3, r3, #24
 8006b0a:	491b      	ldr	r1, [pc, #108]	; (8006b78 <HAL_RCC_OscConfig+0x470>)
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b10:	4b1b      	ldr	r3, [pc, #108]	; (8006b80 <HAL_RCC_OscConfig+0x478>)
 8006b12:	2201      	movs	r2, #1
 8006b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b16:	f7fc f82f 	bl	8002b78 <HAL_GetTick>
 8006b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b1c:	e008      	b.n	8006b30 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b1e:	f7fc f82b 	bl	8002b78 <HAL_GetTick>
 8006b22:	4602      	mov	r2, r0
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	1ad3      	subs	r3, r2, r3
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	d901      	bls.n	8006b30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006b2c:	2303      	movs	r3, #3
 8006b2e:	e05c      	b.n	8006bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b30:	4b11      	ldr	r3, [pc, #68]	; (8006b78 <HAL_RCC_OscConfig+0x470>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d0f0      	beq.n	8006b1e <HAL_RCC_OscConfig+0x416>
 8006b3c:	e054      	b.n	8006be8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b3e:	4b10      	ldr	r3, [pc, #64]	; (8006b80 <HAL_RCC_OscConfig+0x478>)
 8006b40:	2200      	movs	r2, #0
 8006b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b44:	f7fc f818 	bl	8002b78 <HAL_GetTick>
 8006b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b4a:	e008      	b.n	8006b5e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b4c:	f7fc f814 	bl	8002b78 <HAL_GetTick>
 8006b50:	4602      	mov	r2, r0
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	1ad3      	subs	r3, r2, r3
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	d901      	bls.n	8006b5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006b5a:	2303      	movs	r3, #3
 8006b5c:	e045      	b.n	8006bea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b5e:	4b06      	ldr	r3, [pc, #24]	; (8006b78 <HAL_RCC_OscConfig+0x470>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d1f0      	bne.n	8006b4c <HAL_RCC_OscConfig+0x444>
 8006b6a:	e03d      	b.n	8006be8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	699b      	ldr	r3, [r3, #24]
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d107      	bne.n	8006b84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	e038      	b.n	8006bea <HAL_RCC_OscConfig+0x4e2>
 8006b78:	40023800 	.word	0x40023800
 8006b7c:	40007000 	.word	0x40007000
 8006b80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006b84:	4b1b      	ldr	r3, [pc, #108]	; (8006bf4 <HAL_RCC_OscConfig+0x4ec>)
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	699b      	ldr	r3, [r3, #24]
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d028      	beq.n	8006be4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d121      	bne.n	8006be4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d11a      	bne.n	8006be4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006bae:	68fa      	ldr	r2, [r7, #12]
 8006bb0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006bb4:	4013      	ands	r3, r2
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006bba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d111      	bne.n	8006be4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bca:	085b      	lsrs	r3, r3, #1
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d107      	bne.n	8006be4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d001      	beq.n	8006be8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	e000      	b.n	8006bea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3718      	adds	r7, #24
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	40023800 	.word	0x40023800

08006bf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d101      	bne.n	8006c0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e0cc      	b.n	8006da6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c0c:	4b68      	ldr	r3, [pc, #416]	; (8006db0 <HAL_RCC_ClockConfig+0x1b8>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 0307 	and.w	r3, r3, #7
 8006c14:	683a      	ldr	r2, [r7, #0]
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d90c      	bls.n	8006c34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c1a:	4b65      	ldr	r3, [pc, #404]	; (8006db0 <HAL_RCC_ClockConfig+0x1b8>)
 8006c1c:	683a      	ldr	r2, [r7, #0]
 8006c1e:	b2d2      	uxtb	r2, r2
 8006c20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c22:	4b63      	ldr	r3, [pc, #396]	; (8006db0 <HAL_RCC_ClockConfig+0x1b8>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f003 0307 	and.w	r3, r3, #7
 8006c2a:	683a      	ldr	r2, [r7, #0]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d001      	beq.n	8006c34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	e0b8      	b.n	8006da6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f003 0302 	and.w	r3, r3, #2
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d020      	beq.n	8006c82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f003 0304 	and.w	r3, r3, #4
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d005      	beq.n	8006c58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c4c:	4b59      	ldr	r3, [pc, #356]	; (8006db4 <HAL_RCC_ClockConfig+0x1bc>)
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	4a58      	ldr	r2, [pc, #352]	; (8006db4 <HAL_RCC_ClockConfig+0x1bc>)
 8006c52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006c56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f003 0308 	and.w	r3, r3, #8
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d005      	beq.n	8006c70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c64:	4b53      	ldr	r3, [pc, #332]	; (8006db4 <HAL_RCC_ClockConfig+0x1bc>)
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	4a52      	ldr	r2, [pc, #328]	; (8006db4 <HAL_RCC_ClockConfig+0x1bc>)
 8006c6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006c6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c70:	4b50      	ldr	r3, [pc, #320]	; (8006db4 <HAL_RCC_ClockConfig+0x1bc>)
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	494d      	ldr	r1, [pc, #308]	; (8006db4 <HAL_RCC_ClockConfig+0x1bc>)
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0301 	and.w	r3, r3, #1
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d044      	beq.n	8006d18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d107      	bne.n	8006ca6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c96:	4b47      	ldr	r3, [pc, #284]	; (8006db4 <HAL_RCC_ClockConfig+0x1bc>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d119      	bne.n	8006cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e07f      	b.n	8006da6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	d003      	beq.n	8006cb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006cb2:	2b03      	cmp	r3, #3
 8006cb4:	d107      	bne.n	8006cc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cb6:	4b3f      	ldr	r3, [pc, #252]	; (8006db4 <HAL_RCC_ClockConfig+0x1bc>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d109      	bne.n	8006cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e06f      	b.n	8006da6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cc6:	4b3b      	ldr	r3, [pc, #236]	; (8006db4 <HAL_RCC_ClockConfig+0x1bc>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 0302 	and.w	r3, r3, #2
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d101      	bne.n	8006cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e067      	b.n	8006da6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006cd6:	4b37      	ldr	r3, [pc, #220]	; (8006db4 <HAL_RCC_ClockConfig+0x1bc>)
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	f023 0203 	bic.w	r2, r3, #3
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	4934      	ldr	r1, [pc, #208]	; (8006db4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006ce8:	f7fb ff46 	bl	8002b78 <HAL_GetTick>
 8006cec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cee:	e00a      	b.n	8006d06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cf0:	f7fb ff42 	bl	8002b78 <HAL_GetTick>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d901      	bls.n	8006d06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d02:	2303      	movs	r3, #3
 8006d04:	e04f      	b.n	8006da6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d06:	4b2b      	ldr	r3, [pc, #172]	; (8006db4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	f003 020c 	and.w	r2, r3, #12
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d1eb      	bne.n	8006cf0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d18:	4b25      	ldr	r3, [pc, #148]	; (8006db0 <HAL_RCC_ClockConfig+0x1b8>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 0307 	and.w	r3, r3, #7
 8006d20:	683a      	ldr	r2, [r7, #0]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d20c      	bcs.n	8006d40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d26:	4b22      	ldr	r3, [pc, #136]	; (8006db0 <HAL_RCC_ClockConfig+0x1b8>)
 8006d28:	683a      	ldr	r2, [r7, #0]
 8006d2a:	b2d2      	uxtb	r2, r2
 8006d2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d2e:	4b20      	ldr	r3, [pc, #128]	; (8006db0 <HAL_RCC_ClockConfig+0x1b8>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 0307 	and.w	r3, r3, #7
 8006d36:	683a      	ldr	r2, [r7, #0]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d001      	beq.n	8006d40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	e032      	b.n	8006da6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 0304 	and.w	r3, r3, #4
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d008      	beq.n	8006d5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d4c:	4b19      	ldr	r3, [pc, #100]	; (8006db4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	4916      	ldr	r1, [pc, #88]	; (8006db4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f003 0308 	and.w	r3, r3, #8
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d009      	beq.n	8006d7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d6a:	4b12      	ldr	r3, [pc, #72]	; (8006db4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	00db      	lsls	r3, r3, #3
 8006d78:	490e      	ldr	r1, [pc, #56]	; (8006db4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006d7e:	f000 f821 	bl	8006dc4 <HAL_RCC_GetSysClockFreq>
 8006d82:	4602      	mov	r2, r0
 8006d84:	4b0b      	ldr	r3, [pc, #44]	; (8006db4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	091b      	lsrs	r3, r3, #4
 8006d8a:	f003 030f 	and.w	r3, r3, #15
 8006d8e:	490a      	ldr	r1, [pc, #40]	; (8006db8 <HAL_RCC_ClockConfig+0x1c0>)
 8006d90:	5ccb      	ldrb	r3, [r1, r3]
 8006d92:	fa22 f303 	lsr.w	r3, r2, r3
 8006d96:	4a09      	ldr	r2, [pc, #36]	; (8006dbc <HAL_RCC_ClockConfig+0x1c4>)
 8006d98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006d9a:	4b09      	ldr	r3, [pc, #36]	; (8006dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7fb fa9c 	bl	80022dc <HAL_InitTick>

  return HAL_OK;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3710      	adds	r7, #16
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop
 8006db0:	40023c00 	.word	0x40023c00
 8006db4:	40023800 	.word	0x40023800
 8006db8:	0800dcdc 	.word	0x0800dcdc
 8006dbc:	20000000 	.word	0x20000000
 8006dc0:	20000004 	.word	0x20000004

08006dc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006dc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006dc8:	b094      	sub	sp, #80	; 0x50
 8006dca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	647b      	str	r3, [r7, #68]	; 0x44
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ddc:	4b79      	ldr	r3, [pc, #484]	; (8006fc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	f003 030c 	and.w	r3, r3, #12
 8006de4:	2b08      	cmp	r3, #8
 8006de6:	d00d      	beq.n	8006e04 <HAL_RCC_GetSysClockFreq+0x40>
 8006de8:	2b08      	cmp	r3, #8
 8006dea:	f200 80e1 	bhi.w	8006fb0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d002      	beq.n	8006df8 <HAL_RCC_GetSysClockFreq+0x34>
 8006df2:	2b04      	cmp	r3, #4
 8006df4:	d003      	beq.n	8006dfe <HAL_RCC_GetSysClockFreq+0x3a>
 8006df6:	e0db      	b.n	8006fb0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006df8:	4b73      	ldr	r3, [pc, #460]	; (8006fc8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006dfa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006dfc:	e0db      	b.n	8006fb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006dfe:	4b73      	ldr	r3, [pc, #460]	; (8006fcc <HAL_RCC_GetSysClockFreq+0x208>)
 8006e00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006e02:	e0d8      	b.n	8006fb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e04:	4b6f      	ldr	r3, [pc, #444]	; (8006fc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e0c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e0e:	4b6d      	ldr	r3, [pc, #436]	; (8006fc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d063      	beq.n	8006ee2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e1a:	4b6a      	ldr	r3, [pc, #424]	; (8006fc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	099b      	lsrs	r3, r3, #6
 8006e20:	2200      	movs	r2, #0
 8006e22:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e24:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e2c:	633b      	str	r3, [r7, #48]	; 0x30
 8006e2e:	2300      	movs	r3, #0
 8006e30:	637b      	str	r3, [r7, #52]	; 0x34
 8006e32:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006e36:	4622      	mov	r2, r4
 8006e38:	462b      	mov	r3, r5
 8006e3a:	f04f 0000 	mov.w	r0, #0
 8006e3e:	f04f 0100 	mov.w	r1, #0
 8006e42:	0159      	lsls	r1, r3, #5
 8006e44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e48:	0150      	lsls	r0, r2, #5
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	4621      	mov	r1, r4
 8006e50:	1a51      	subs	r1, r2, r1
 8006e52:	6139      	str	r1, [r7, #16]
 8006e54:	4629      	mov	r1, r5
 8006e56:	eb63 0301 	sbc.w	r3, r3, r1
 8006e5a:	617b      	str	r3, [r7, #20]
 8006e5c:	f04f 0200 	mov.w	r2, #0
 8006e60:	f04f 0300 	mov.w	r3, #0
 8006e64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006e68:	4659      	mov	r1, fp
 8006e6a:	018b      	lsls	r3, r1, #6
 8006e6c:	4651      	mov	r1, sl
 8006e6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006e72:	4651      	mov	r1, sl
 8006e74:	018a      	lsls	r2, r1, #6
 8006e76:	4651      	mov	r1, sl
 8006e78:	ebb2 0801 	subs.w	r8, r2, r1
 8006e7c:	4659      	mov	r1, fp
 8006e7e:	eb63 0901 	sbc.w	r9, r3, r1
 8006e82:	f04f 0200 	mov.w	r2, #0
 8006e86:	f04f 0300 	mov.w	r3, #0
 8006e8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e96:	4690      	mov	r8, r2
 8006e98:	4699      	mov	r9, r3
 8006e9a:	4623      	mov	r3, r4
 8006e9c:	eb18 0303 	adds.w	r3, r8, r3
 8006ea0:	60bb      	str	r3, [r7, #8]
 8006ea2:	462b      	mov	r3, r5
 8006ea4:	eb49 0303 	adc.w	r3, r9, r3
 8006ea8:	60fb      	str	r3, [r7, #12]
 8006eaa:	f04f 0200 	mov.w	r2, #0
 8006eae:	f04f 0300 	mov.w	r3, #0
 8006eb2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006eb6:	4629      	mov	r1, r5
 8006eb8:	024b      	lsls	r3, r1, #9
 8006eba:	4621      	mov	r1, r4
 8006ebc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006ec0:	4621      	mov	r1, r4
 8006ec2:	024a      	lsls	r2, r1, #9
 8006ec4:	4610      	mov	r0, r2
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006eca:	2200      	movs	r2, #0
 8006ecc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ece:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ed0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006ed4:	f7f9 fea2 	bl	8000c1c <__aeabi_uldivmod>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	460b      	mov	r3, r1
 8006edc:	4613      	mov	r3, r2
 8006ede:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ee0:	e058      	b.n	8006f94 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ee2:	4b38      	ldr	r3, [pc, #224]	; (8006fc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	099b      	lsrs	r3, r3, #6
 8006ee8:	2200      	movs	r2, #0
 8006eea:	4618      	mov	r0, r3
 8006eec:	4611      	mov	r1, r2
 8006eee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006ef2:	623b      	str	r3, [r7, #32]
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	627b      	str	r3, [r7, #36]	; 0x24
 8006ef8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006efc:	4642      	mov	r2, r8
 8006efe:	464b      	mov	r3, r9
 8006f00:	f04f 0000 	mov.w	r0, #0
 8006f04:	f04f 0100 	mov.w	r1, #0
 8006f08:	0159      	lsls	r1, r3, #5
 8006f0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f0e:	0150      	lsls	r0, r2, #5
 8006f10:	4602      	mov	r2, r0
 8006f12:	460b      	mov	r3, r1
 8006f14:	4641      	mov	r1, r8
 8006f16:	ebb2 0a01 	subs.w	sl, r2, r1
 8006f1a:	4649      	mov	r1, r9
 8006f1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006f20:	f04f 0200 	mov.w	r2, #0
 8006f24:	f04f 0300 	mov.w	r3, #0
 8006f28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006f2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006f30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006f34:	ebb2 040a 	subs.w	r4, r2, sl
 8006f38:	eb63 050b 	sbc.w	r5, r3, fp
 8006f3c:	f04f 0200 	mov.w	r2, #0
 8006f40:	f04f 0300 	mov.w	r3, #0
 8006f44:	00eb      	lsls	r3, r5, #3
 8006f46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f4a:	00e2      	lsls	r2, r4, #3
 8006f4c:	4614      	mov	r4, r2
 8006f4e:	461d      	mov	r5, r3
 8006f50:	4643      	mov	r3, r8
 8006f52:	18e3      	adds	r3, r4, r3
 8006f54:	603b      	str	r3, [r7, #0]
 8006f56:	464b      	mov	r3, r9
 8006f58:	eb45 0303 	adc.w	r3, r5, r3
 8006f5c:	607b      	str	r3, [r7, #4]
 8006f5e:	f04f 0200 	mov.w	r2, #0
 8006f62:	f04f 0300 	mov.w	r3, #0
 8006f66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006f6a:	4629      	mov	r1, r5
 8006f6c:	028b      	lsls	r3, r1, #10
 8006f6e:	4621      	mov	r1, r4
 8006f70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006f74:	4621      	mov	r1, r4
 8006f76:	028a      	lsls	r2, r1, #10
 8006f78:	4610      	mov	r0, r2
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f7e:	2200      	movs	r2, #0
 8006f80:	61bb      	str	r3, [r7, #24]
 8006f82:	61fa      	str	r2, [r7, #28]
 8006f84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f88:	f7f9 fe48 	bl	8000c1c <__aeabi_uldivmod>
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	460b      	mov	r3, r1
 8006f90:	4613      	mov	r3, r2
 8006f92:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006f94:	4b0b      	ldr	r3, [pc, #44]	; (8006fc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	0c1b      	lsrs	r3, r3, #16
 8006f9a:	f003 0303 	and.w	r3, r3, #3
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	005b      	lsls	r3, r3, #1
 8006fa2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006fa4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006fa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006fae:	e002      	b.n	8006fb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006fb0:	4b05      	ldr	r3, [pc, #20]	; (8006fc8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006fb2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006fb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006fb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3750      	adds	r7, #80	; 0x50
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fc2:	bf00      	nop
 8006fc4:	40023800 	.word	0x40023800
 8006fc8:	00f42400 	.word	0x00f42400
 8006fcc:	007a1200 	.word	0x007a1200

08006fd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006fd4:	4b03      	ldr	r3, [pc, #12]	; (8006fe4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	20000000 	.word	0x20000000

08006fe8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006fec:	f7ff fff0 	bl	8006fd0 <HAL_RCC_GetHCLKFreq>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	4b05      	ldr	r3, [pc, #20]	; (8007008 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	0a9b      	lsrs	r3, r3, #10
 8006ff8:	f003 0307 	and.w	r3, r3, #7
 8006ffc:	4903      	ldr	r1, [pc, #12]	; (800700c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ffe:	5ccb      	ldrb	r3, [r1, r3]
 8007000:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007004:	4618      	mov	r0, r3
 8007006:	bd80      	pop	{r7, pc}
 8007008:	40023800 	.word	0x40023800
 800700c:	0800dcec 	.word	0x0800dcec

08007010 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007014:	f7ff ffdc 	bl	8006fd0 <HAL_RCC_GetHCLKFreq>
 8007018:	4602      	mov	r2, r0
 800701a:	4b05      	ldr	r3, [pc, #20]	; (8007030 <HAL_RCC_GetPCLK2Freq+0x20>)
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	0b5b      	lsrs	r3, r3, #13
 8007020:	f003 0307 	and.w	r3, r3, #7
 8007024:	4903      	ldr	r1, [pc, #12]	; (8007034 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007026:	5ccb      	ldrb	r3, [r1, r3]
 8007028:	fa22 f303 	lsr.w	r3, r2, r3
}
 800702c:	4618      	mov	r0, r3
 800702e:	bd80      	pop	{r7, pc}
 8007030:	40023800 	.word	0x40023800
 8007034:	0800dcec 	.word	0x0800dcec

08007038 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	220f      	movs	r2, #15
 8007046:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007048:	4b12      	ldr	r3, [pc, #72]	; (8007094 <HAL_RCC_GetClockConfig+0x5c>)
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	f003 0203 	and.w	r2, r3, #3
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007054:	4b0f      	ldr	r3, [pc, #60]	; (8007094 <HAL_RCC_GetClockConfig+0x5c>)
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007060:	4b0c      	ldr	r3, [pc, #48]	; (8007094 <HAL_RCC_GetClockConfig+0x5c>)
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800706c:	4b09      	ldr	r3, [pc, #36]	; (8007094 <HAL_RCC_GetClockConfig+0x5c>)
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	08db      	lsrs	r3, r3, #3
 8007072:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800707a:	4b07      	ldr	r3, [pc, #28]	; (8007098 <HAL_RCC_GetClockConfig+0x60>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 0207 	and.w	r2, r3, #7
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	601a      	str	r2, [r3, #0]
}
 8007086:	bf00      	nop
 8007088:	370c      	adds	r7, #12
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	40023800 	.word	0x40023800
 8007098:	40023c00 	.word	0x40023c00

0800709c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d101      	bne.n	80070ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e041      	b.n	8007132 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d106      	bne.n	80070c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 f839 	bl	800713a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2202      	movs	r2, #2
 80070cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	3304      	adds	r3, #4
 80070d8:	4619      	mov	r1, r3
 80070da:	4610      	mov	r0, r2
 80070dc:	f000 fadc 	bl	8007698 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2201      	movs	r2, #1
 800711c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2201      	movs	r2, #1
 8007124:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	3708      	adds	r7, #8
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}

0800713a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800713a:	b480      	push	{r7}
 800713c:	b083      	sub	sp, #12
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007142:	bf00      	nop
 8007144:	370c      	adds	r7, #12
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr
	...

08007150 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007150:	b480      	push	{r7}
 8007152:	b085      	sub	sp, #20
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800715e:	b2db      	uxtb	r3, r3
 8007160:	2b01      	cmp	r3, #1
 8007162:	d001      	beq.n	8007168 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007164:	2301      	movs	r3, #1
 8007166:	e044      	b.n	80071f2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2202      	movs	r2, #2
 800716c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	68da      	ldr	r2, [r3, #12]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f042 0201 	orr.w	r2, r2, #1
 800717e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a1e      	ldr	r2, [pc, #120]	; (8007200 <HAL_TIM_Base_Start_IT+0xb0>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d018      	beq.n	80071bc <HAL_TIM_Base_Start_IT+0x6c>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007192:	d013      	beq.n	80071bc <HAL_TIM_Base_Start_IT+0x6c>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a1a      	ldr	r2, [pc, #104]	; (8007204 <HAL_TIM_Base_Start_IT+0xb4>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d00e      	beq.n	80071bc <HAL_TIM_Base_Start_IT+0x6c>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a19      	ldr	r2, [pc, #100]	; (8007208 <HAL_TIM_Base_Start_IT+0xb8>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d009      	beq.n	80071bc <HAL_TIM_Base_Start_IT+0x6c>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a17      	ldr	r2, [pc, #92]	; (800720c <HAL_TIM_Base_Start_IT+0xbc>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d004      	beq.n	80071bc <HAL_TIM_Base_Start_IT+0x6c>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a16      	ldr	r2, [pc, #88]	; (8007210 <HAL_TIM_Base_Start_IT+0xc0>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d111      	bne.n	80071e0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	f003 0307 	and.w	r3, r3, #7
 80071c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2b06      	cmp	r3, #6
 80071cc:	d010      	beq.n	80071f0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f042 0201 	orr.w	r2, r2, #1
 80071dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071de:	e007      	b.n	80071f0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f042 0201 	orr.w	r2, r2, #1
 80071ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3714      	adds	r7, #20
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr
 80071fe:	bf00      	nop
 8007200:	40010000 	.word	0x40010000
 8007204:	40000400 	.word	0x40000400
 8007208:	40000800 	.word	0x40000800
 800720c:	40000c00 	.word	0x40000c00
 8007210:	40014000 	.word	0x40014000

08007214 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b082      	sub	sp, #8
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d101      	bne.n	8007226 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	e041      	b.n	80072aa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800722c:	b2db      	uxtb	r3, r3
 800722e:	2b00      	cmp	r3, #0
 8007230:	d106      	bne.n	8007240 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f7fb fab0 	bl	80027a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2202      	movs	r2, #2
 8007244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	3304      	adds	r3, #4
 8007250:	4619      	mov	r1, r3
 8007252:	4610      	mov	r0, r2
 8007254:	f000 fa20 	bl	8007698 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2201      	movs	r2, #1
 800725c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2201      	movs	r2, #1
 8007264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2201      	movs	r2, #1
 800726c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2201      	movs	r2, #1
 8007274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2201      	movs	r2, #1
 800727c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2201      	movs	r2, #1
 8007284:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2201      	movs	r2, #1
 800728c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2201      	movs	r2, #1
 8007294:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2201      	movs	r2, #1
 80072a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3708      	adds	r7, #8
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b082      	sub	sp, #8
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	691b      	ldr	r3, [r3, #16]
 80072c0:	f003 0302 	and.w	r3, r3, #2
 80072c4:	2b02      	cmp	r3, #2
 80072c6:	d122      	bne.n	800730e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	f003 0302 	and.w	r3, r3, #2
 80072d2:	2b02      	cmp	r3, #2
 80072d4:	d11b      	bne.n	800730e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f06f 0202 	mvn.w	r2, #2
 80072de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	699b      	ldr	r3, [r3, #24]
 80072ec:	f003 0303 	and.w	r3, r3, #3
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d003      	beq.n	80072fc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 f9b1 	bl	800765c <HAL_TIM_IC_CaptureCallback>
 80072fa:	e005      	b.n	8007308 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 f9a3 	bl	8007648 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 f9b4 	bl	8007670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	691b      	ldr	r3, [r3, #16]
 8007314:	f003 0304 	and.w	r3, r3, #4
 8007318:	2b04      	cmp	r3, #4
 800731a:	d122      	bne.n	8007362 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	f003 0304 	and.w	r3, r3, #4
 8007326:	2b04      	cmp	r3, #4
 8007328:	d11b      	bne.n	8007362 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f06f 0204 	mvn.w	r2, #4
 8007332:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2202      	movs	r2, #2
 8007338:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	699b      	ldr	r3, [r3, #24]
 8007340:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007344:	2b00      	cmp	r3, #0
 8007346:	d003      	beq.n	8007350 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 f987 	bl	800765c <HAL_TIM_IC_CaptureCallback>
 800734e:	e005      	b.n	800735c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 f979 	bl	8007648 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 f98a 	bl	8007670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	691b      	ldr	r3, [r3, #16]
 8007368:	f003 0308 	and.w	r3, r3, #8
 800736c:	2b08      	cmp	r3, #8
 800736e:	d122      	bne.n	80073b6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68db      	ldr	r3, [r3, #12]
 8007376:	f003 0308 	and.w	r3, r3, #8
 800737a:	2b08      	cmp	r3, #8
 800737c:	d11b      	bne.n	80073b6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f06f 0208 	mvn.w	r2, #8
 8007386:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2204      	movs	r2, #4
 800738c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	69db      	ldr	r3, [r3, #28]
 8007394:	f003 0303 	and.w	r3, r3, #3
 8007398:	2b00      	cmp	r3, #0
 800739a:	d003      	beq.n	80073a4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 f95d 	bl	800765c <HAL_TIM_IC_CaptureCallback>
 80073a2:	e005      	b.n	80073b0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 f94f 	bl	8007648 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 f960 	bl	8007670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	691b      	ldr	r3, [r3, #16]
 80073bc:	f003 0310 	and.w	r3, r3, #16
 80073c0:	2b10      	cmp	r3, #16
 80073c2:	d122      	bne.n	800740a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	f003 0310 	and.w	r3, r3, #16
 80073ce:	2b10      	cmp	r3, #16
 80073d0:	d11b      	bne.n	800740a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f06f 0210 	mvn.w	r2, #16
 80073da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2208      	movs	r2, #8
 80073e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	69db      	ldr	r3, [r3, #28]
 80073e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d003      	beq.n	80073f8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 f933 	bl	800765c <HAL_TIM_IC_CaptureCallback>
 80073f6:	e005      	b.n	8007404 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 f925 	bl	8007648 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 f936 	bl	8007670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	691b      	ldr	r3, [r3, #16]
 8007410:	f003 0301 	and.w	r3, r3, #1
 8007414:	2b01      	cmp	r3, #1
 8007416:	d10e      	bne.n	8007436 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	68db      	ldr	r3, [r3, #12]
 800741e:	f003 0301 	and.w	r3, r3, #1
 8007422:	2b01      	cmp	r3, #1
 8007424:	d107      	bne.n	8007436 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f06f 0201 	mvn.w	r2, #1
 800742e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f7fa fe27 	bl	8002084 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	691b      	ldr	r3, [r3, #16]
 800743c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007440:	2b80      	cmp	r3, #128	; 0x80
 8007442:	d10e      	bne.n	8007462 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800744e:	2b80      	cmp	r3, #128	; 0x80
 8007450:	d107      	bne.n	8007462 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800745a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 fb9f 	bl	8007ba0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	691b      	ldr	r3, [r3, #16]
 8007468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800746c:	2b40      	cmp	r3, #64	; 0x40
 800746e:	d10e      	bne.n	800748e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	68db      	ldr	r3, [r3, #12]
 8007476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800747a:	2b40      	cmp	r3, #64	; 0x40
 800747c:	d107      	bne.n	800748e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007486:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 f8fb 	bl	8007684 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	691b      	ldr	r3, [r3, #16]
 8007494:	f003 0320 	and.w	r3, r3, #32
 8007498:	2b20      	cmp	r3, #32
 800749a:	d10e      	bne.n	80074ba <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	f003 0320 	and.w	r3, r3, #32
 80074a6:	2b20      	cmp	r3, #32
 80074a8:	d107      	bne.n	80074ba <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f06f 0220 	mvn.w	r2, #32
 80074b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 fb69 	bl	8007b8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80074ba:	bf00      	nop
 80074bc:	3708      	adds	r7, #8
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
	...

080074c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b086      	sub	sp, #24
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074d0:	2300      	movs	r3, #0
 80074d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d101      	bne.n	80074e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80074de:	2302      	movs	r3, #2
 80074e0:	e0ae      	b.n	8007640 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2201      	movs	r2, #1
 80074e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2b0c      	cmp	r3, #12
 80074ee:	f200 809f 	bhi.w	8007630 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80074f2:	a201      	add	r2, pc, #4	; (adr r2, 80074f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80074f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f8:	0800752d 	.word	0x0800752d
 80074fc:	08007631 	.word	0x08007631
 8007500:	08007631 	.word	0x08007631
 8007504:	08007631 	.word	0x08007631
 8007508:	0800756d 	.word	0x0800756d
 800750c:	08007631 	.word	0x08007631
 8007510:	08007631 	.word	0x08007631
 8007514:	08007631 	.word	0x08007631
 8007518:	080075af 	.word	0x080075af
 800751c:	08007631 	.word	0x08007631
 8007520:	08007631 	.word	0x08007631
 8007524:	08007631 	.word	0x08007631
 8007528:	080075ef 	.word	0x080075ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	68b9      	ldr	r1, [r7, #8]
 8007532:	4618      	mov	r0, r3
 8007534:	f000 f930 	bl	8007798 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	699a      	ldr	r2, [r3, #24]
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f042 0208 	orr.w	r2, r2, #8
 8007546:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	699a      	ldr	r2, [r3, #24]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f022 0204 	bic.w	r2, r2, #4
 8007556:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	6999      	ldr	r1, [r3, #24]
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	691a      	ldr	r2, [r3, #16]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	430a      	orrs	r2, r1
 8007568:	619a      	str	r2, [r3, #24]
      break;
 800756a:	e064      	b.n	8007636 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	68b9      	ldr	r1, [r7, #8]
 8007572:	4618      	mov	r0, r3
 8007574:	f000 f976 	bl	8007864 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	699a      	ldr	r2, [r3, #24]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007586:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	699a      	ldr	r2, [r3, #24]
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007596:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	6999      	ldr	r1, [r3, #24]
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	691b      	ldr	r3, [r3, #16]
 80075a2:	021a      	lsls	r2, r3, #8
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	430a      	orrs	r2, r1
 80075aa:	619a      	str	r2, [r3, #24]
      break;
 80075ac:	e043      	b.n	8007636 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	68b9      	ldr	r1, [r7, #8]
 80075b4:	4618      	mov	r0, r3
 80075b6:	f000 f9c1 	bl	800793c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	69da      	ldr	r2, [r3, #28]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f042 0208 	orr.w	r2, r2, #8
 80075c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	69da      	ldr	r2, [r3, #28]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f022 0204 	bic.w	r2, r2, #4
 80075d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	69d9      	ldr	r1, [r3, #28]
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	691a      	ldr	r2, [r3, #16]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	430a      	orrs	r2, r1
 80075ea:	61da      	str	r2, [r3, #28]
      break;
 80075ec:	e023      	b.n	8007636 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	68b9      	ldr	r1, [r7, #8]
 80075f4:	4618      	mov	r0, r3
 80075f6:	f000 fa0b 	bl	8007a10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	69da      	ldr	r2, [r3, #28]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007608:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	69da      	ldr	r2, [r3, #28]
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007618:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	69d9      	ldr	r1, [r3, #28]
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	691b      	ldr	r3, [r3, #16]
 8007624:	021a      	lsls	r2, r3, #8
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	430a      	orrs	r2, r1
 800762c:	61da      	str	r2, [r3, #28]
      break;
 800762e:	e002      	b.n	8007636 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007630:	2301      	movs	r3, #1
 8007632:	75fb      	strb	r3, [r7, #23]
      break;
 8007634:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2200      	movs	r2, #0
 800763a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800763e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007640:	4618      	mov	r0, r3
 8007642:	3718      	adds	r7, #24
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007650:	bf00      	nop
 8007652:	370c      	adds	r7, #12
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr

0800765c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800765c:	b480      	push	{r7}
 800765e:	b083      	sub	sp, #12
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007664:	bf00      	nop
 8007666:	370c      	adds	r7, #12
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007678:	bf00      	nop
 800767a:	370c      	adds	r7, #12
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr

08007684 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007684:	b480      	push	{r7}
 8007686:	b083      	sub	sp, #12
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800768c:	bf00      	nop
 800768e:	370c      	adds	r7, #12
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007698:	b480      	push	{r7}
 800769a:	b085      	sub	sp, #20
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4a34      	ldr	r2, [pc, #208]	; (800777c <TIM_Base_SetConfig+0xe4>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d00f      	beq.n	80076d0 <TIM_Base_SetConfig+0x38>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076b6:	d00b      	beq.n	80076d0 <TIM_Base_SetConfig+0x38>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4a31      	ldr	r2, [pc, #196]	; (8007780 <TIM_Base_SetConfig+0xe8>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d007      	beq.n	80076d0 <TIM_Base_SetConfig+0x38>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4a30      	ldr	r2, [pc, #192]	; (8007784 <TIM_Base_SetConfig+0xec>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d003      	beq.n	80076d0 <TIM_Base_SetConfig+0x38>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4a2f      	ldr	r2, [pc, #188]	; (8007788 <TIM_Base_SetConfig+0xf0>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d108      	bne.n	80076e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	68fa      	ldr	r2, [r7, #12]
 80076de:	4313      	orrs	r3, r2
 80076e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	4a25      	ldr	r2, [pc, #148]	; (800777c <TIM_Base_SetConfig+0xe4>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d01b      	beq.n	8007722 <TIM_Base_SetConfig+0x8a>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076f0:	d017      	beq.n	8007722 <TIM_Base_SetConfig+0x8a>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	4a22      	ldr	r2, [pc, #136]	; (8007780 <TIM_Base_SetConfig+0xe8>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d013      	beq.n	8007722 <TIM_Base_SetConfig+0x8a>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4a21      	ldr	r2, [pc, #132]	; (8007784 <TIM_Base_SetConfig+0xec>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d00f      	beq.n	8007722 <TIM_Base_SetConfig+0x8a>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	4a20      	ldr	r2, [pc, #128]	; (8007788 <TIM_Base_SetConfig+0xf0>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d00b      	beq.n	8007722 <TIM_Base_SetConfig+0x8a>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4a1f      	ldr	r2, [pc, #124]	; (800778c <TIM_Base_SetConfig+0xf4>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d007      	beq.n	8007722 <TIM_Base_SetConfig+0x8a>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4a1e      	ldr	r2, [pc, #120]	; (8007790 <TIM_Base_SetConfig+0xf8>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d003      	beq.n	8007722 <TIM_Base_SetConfig+0x8a>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4a1d      	ldr	r2, [pc, #116]	; (8007794 <TIM_Base_SetConfig+0xfc>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d108      	bne.n	8007734 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007728:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	68db      	ldr	r3, [r3, #12]
 800772e:	68fa      	ldr	r2, [r7, #12]
 8007730:	4313      	orrs	r3, r2
 8007732:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	695b      	ldr	r3, [r3, #20]
 800773e:	4313      	orrs	r3, r2
 8007740:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	68fa      	ldr	r2, [r7, #12]
 8007746:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	689a      	ldr	r2, [r3, #8]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	4a08      	ldr	r2, [pc, #32]	; (800777c <TIM_Base_SetConfig+0xe4>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d103      	bne.n	8007768 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	691a      	ldr	r2, [r3, #16]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	615a      	str	r2, [r3, #20]
}
 800776e:	bf00      	nop
 8007770:	3714      	adds	r7, #20
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop
 800777c:	40010000 	.word	0x40010000
 8007780:	40000400 	.word	0x40000400
 8007784:	40000800 	.word	0x40000800
 8007788:	40000c00 	.word	0x40000c00
 800778c:	40014000 	.word	0x40014000
 8007790:	40014400 	.word	0x40014400
 8007794:	40014800 	.word	0x40014800

08007798 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007798:	b480      	push	{r7}
 800779a:	b087      	sub	sp, #28
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6a1b      	ldr	r3, [r3, #32]
 80077a6:	f023 0201 	bic.w	r2, r3, #1
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6a1b      	ldr	r3, [r3, #32]
 80077b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	699b      	ldr	r3, [r3, #24]
 80077be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f023 0303 	bic.w	r3, r3, #3
 80077ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	68fa      	ldr	r2, [r7, #12]
 80077d6:	4313      	orrs	r3, r2
 80077d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	f023 0302 	bic.w	r3, r3, #2
 80077e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	697a      	ldr	r2, [r7, #20]
 80077e8:	4313      	orrs	r3, r2
 80077ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a1c      	ldr	r2, [pc, #112]	; (8007860 <TIM_OC1_SetConfig+0xc8>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d10c      	bne.n	800780e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	f023 0308 	bic.w	r3, r3, #8
 80077fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	697a      	ldr	r2, [r7, #20]
 8007802:	4313      	orrs	r3, r2
 8007804:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	f023 0304 	bic.w	r3, r3, #4
 800780c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	4a13      	ldr	r2, [pc, #76]	; (8007860 <TIM_OC1_SetConfig+0xc8>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d111      	bne.n	800783a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800781c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007824:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	695b      	ldr	r3, [r3, #20]
 800782a:	693a      	ldr	r2, [r7, #16]
 800782c:	4313      	orrs	r3, r2
 800782e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	699b      	ldr	r3, [r3, #24]
 8007834:	693a      	ldr	r2, [r7, #16]
 8007836:	4313      	orrs	r3, r2
 8007838:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	693a      	ldr	r2, [r7, #16]
 800783e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	68fa      	ldr	r2, [r7, #12]
 8007844:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	685a      	ldr	r2, [r3, #4]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	697a      	ldr	r2, [r7, #20]
 8007852:	621a      	str	r2, [r3, #32]
}
 8007854:	bf00      	nop
 8007856:	371c      	adds	r7, #28
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr
 8007860:	40010000 	.word	0x40010000

08007864 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007864:	b480      	push	{r7}
 8007866:	b087      	sub	sp, #28
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6a1b      	ldr	r3, [r3, #32]
 8007872:	f023 0210 	bic.w	r2, r3, #16
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6a1b      	ldr	r3, [r3, #32]
 800787e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	699b      	ldr	r3, [r3, #24]
 800788a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800789a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	021b      	lsls	r3, r3, #8
 80078a2:	68fa      	ldr	r2, [r7, #12]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	f023 0320 	bic.w	r3, r3, #32
 80078ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	011b      	lsls	r3, r3, #4
 80078b6:	697a      	ldr	r2, [r7, #20]
 80078b8:	4313      	orrs	r3, r2
 80078ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	4a1e      	ldr	r2, [pc, #120]	; (8007938 <TIM_OC2_SetConfig+0xd4>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d10d      	bne.n	80078e0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	011b      	lsls	r3, r3, #4
 80078d2:	697a      	ldr	r2, [r7, #20]
 80078d4:	4313      	orrs	r3, r2
 80078d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	4a15      	ldr	r2, [pc, #84]	; (8007938 <TIM_OC2_SetConfig+0xd4>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d113      	bne.n	8007910 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	695b      	ldr	r3, [r3, #20]
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	693a      	ldr	r2, [r7, #16]
 8007900:	4313      	orrs	r3, r2
 8007902:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	699b      	ldr	r3, [r3, #24]
 8007908:	009b      	lsls	r3, r3, #2
 800790a:	693a      	ldr	r2, [r7, #16]
 800790c:	4313      	orrs	r3, r2
 800790e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	693a      	ldr	r2, [r7, #16]
 8007914:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	68fa      	ldr	r2, [r7, #12]
 800791a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	685a      	ldr	r2, [r3, #4]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	697a      	ldr	r2, [r7, #20]
 8007928:	621a      	str	r2, [r3, #32]
}
 800792a:	bf00      	nop
 800792c:	371c      	adds	r7, #28
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr
 8007936:	bf00      	nop
 8007938:	40010000 	.word	0x40010000

0800793c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800793c:	b480      	push	{r7}
 800793e:	b087      	sub	sp, #28
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6a1b      	ldr	r3, [r3, #32]
 800794a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a1b      	ldr	r3, [r3, #32]
 8007956:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	69db      	ldr	r3, [r3, #28]
 8007962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800796a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f023 0303 	bic.w	r3, r3, #3
 8007972:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	68fa      	ldr	r2, [r7, #12]
 800797a:	4313      	orrs	r3, r2
 800797c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007984:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	021b      	lsls	r3, r3, #8
 800798c:	697a      	ldr	r2, [r7, #20]
 800798e:	4313      	orrs	r3, r2
 8007990:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4a1d      	ldr	r2, [pc, #116]	; (8007a0c <TIM_OC3_SetConfig+0xd0>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d10d      	bne.n	80079b6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	68db      	ldr	r3, [r3, #12]
 80079a6:	021b      	lsls	r3, r3, #8
 80079a8:	697a      	ldr	r2, [r7, #20]
 80079aa:	4313      	orrs	r3, r2
 80079ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4a14      	ldr	r2, [pc, #80]	; (8007a0c <TIM_OC3_SetConfig+0xd0>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d113      	bne.n	80079e6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	695b      	ldr	r3, [r3, #20]
 80079d2:	011b      	lsls	r3, r3, #4
 80079d4:	693a      	ldr	r2, [r7, #16]
 80079d6:	4313      	orrs	r3, r2
 80079d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	699b      	ldr	r3, [r3, #24]
 80079de:	011b      	lsls	r3, r3, #4
 80079e0:	693a      	ldr	r2, [r7, #16]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	693a      	ldr	r2, [r7, #16]
 80079ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	68fa      	ldr	r2, [r7, #12]
 80079f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	685a      	ldr	r2, [r3, #4]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	697a      	ldr	r2, [r7, #20]
 80079fe:	621a      	str	r2, [r3, #32]
}
 8007a00:	bf00      	nop
 8007a02:	371c      	adds	r7, #28
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr
 8007a0c:	40010000 	.word	0x40010000

08007a10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b087      	sub	sp, #28
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6a1b      	ldr	r3, [r3, #32]
 8007a1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6a1b      	ldr	r3, [r3, #32]
 8007a2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	69db      	ldr	r3, [r3, #28]
 8007a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	021b      	lsls	r3, r3, #8
 8007a4e:	68fa      	ldr	r2, [r7, #12]
 8007a50:	4313      	orrs	r3, r2
 8007a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	031b      	lsls	r3, r3, #12
 8007a62:	693a      	ldr	r2, [r7, #16]
 8007a64:	4313      	orrs	r3, r2
 8007a66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	4a10      	ldr	r2, [pc, #64]	; (8007aac <TIM_OC4_SetConfig+0x9c>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d109      	bne.n	8007a84 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	695b      	ldr	r3, [r3, #20]
 8007a7c:	019b      	lsls	r3, r3, #6
 8007a7e:	697a      	ldr	r2, [r7, #20]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	697a      	ldr	r2, [r7, #20]
 8007a88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	68fa      	ldr	r2, [r7, #12]
 8007a8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	685a      	ldr	r2, [r3, #4]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	693a      	ldr	r2, [r7, #16]
 8007a9c:	621a      	str	r2, [r3, #32]
}
 8007a9e:	bf00      	nop
 8007aa0:	371c      	adds	r7, #28
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr
 8007aaa:	bf00      	nop
 8007aac:	40010000 	.word	0x40010000

08007ab0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b085      	sub	sp, #20
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d101      	bne.n	8007ac8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ac4:	2302      	movs	r3, #2
 8007ac6:	e050      	b.n	8007b6a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2201      	movs	r2, #1
 8007acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2202      	movs	r2, #2
 8007ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	685b      	ldr	r3, [r3, #4]
 8007ade:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68fa      	ldr	r2, [r7, #12]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	68fa      	ldr	r2, [r7, #12]
 8007b00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a1c      	ldr	r2, [pc, #112]	; (8007b78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d018      	beq.n	8007b3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b14:	d013      	beq.n	8007b3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a18      	ldr	r2, [pc, #96]	; (8007b7c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d00e      	beq.n	8007b3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a16      	ldr	r2, [pc, #88]	; (8007b80 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d009      	beq.n	8007b3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a15      	ldr	r2, [pc, #84]	; (8007b84 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d004      	beq.n	8007b3e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a13      	ldr	r2, [pc, #76]	; (8007b88 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d10c      	bne.n	8007b58 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	68ba      	ldr	r2, [r7, #8]
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	68ba      	ldr	r2, [r7, #8]
 8007b56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b68:	2300      	movs	r3, #0
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3714      	adds	r7, #20
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr
 8007b76:	bf00      	nop
 8007b78:	40010000 	.word	0x40010000
 8007b7c:	40000400 	.word	0x40000400
 8007b80:	40000800 	.word	0x40000800
 8007b84:	40000c00 	.word	0x40000c00
 8007b88:	40014000 	.word	0x40014000

08007b8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b94:	bf00      	nop
 8007b96:	370c      	adds	r7, #12
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr

08007ba0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b083      	sub	sp, #12
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ba8:	bf00      	nop
 8007baa:	370c      	adds	r7, #12
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr

08007bb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d101      	bne.n	8007bc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	e03f      	b.n	8007c46 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bcc:	b2db      	uxtb	r3, r3
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d106      	bne.n	8007be0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f7fa fec8 	bl	8002970 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2224      	movs	r2, #36	; 0x24
 8007be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	68da      	ldr	r2, [r3, #12]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007bf6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 fddf 	bl	80087bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	691a      	ldr	r2, [r3, #16]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007c0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	695a      	ldr	r2, [r3, #20]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007c1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	68da      	ldr	r2, [r3, #12]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2220      	movs	r2, #32
 8007c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2220      	movs	r2, #32
 8007c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3708      	adds	r7, #8
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b08a      	sub	sp, #40	; 0x28
 8007c52:	af02      	add	r7, sp, #8
 8007c54:	60f8      	str	r0, [r7, #12]
 8007c56:	60b9      	str	r1, [r7, #8]
 8007c58:	603b      	str	r3, [r7, #0]
 8007c5a:	4613      	mov	r3, r2
 8007c5c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	2b20      	cmp	r3, #32
 8007c6c:	d17c      	bne.n	8007d68 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d002      	beq.n	8007c7a <HAL_UART_Transmit+0x2c>
 8007c74:	88fb      	ldrh	r3, [r7, #6]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d101      	bne.n	8007c7e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e075      	b.n	8007d6a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d101      	bne.n	8007c8c <HAL_UART_Transmit+0x3e>
 8007c88:	2302      	movs	r3, #2
 8007c8a:	e06e      	b.n	8007d6a <HAL_UART_Transmit+0x11c>
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2200      	movs	r2, #0
 8007c98:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2221      	movs	r2, #33	; 0x21
 8007c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ca2:	f7fa ff69 	bl	8002b78 <HAL_GetTick>
 8007ca6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	88fa      	ldrh	r2, [r7, #6]
 8007cac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	88fa      	ldrh	r2, [r7, #6]
 8007cb2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cbc:	d108      	bne.n	8007cd0 <HAL_UART_Transmit+0x82>
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	691b      	ldr	r3, [r3, #16]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d104      	bne.n	8007cd0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	61bb      	str	r3, [r7, #24]
 8007cce:	e003      	b.n	8007cd8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007ce0:	e02a      	b.n	8007d38 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	9300      	str	r3, [sp, #0]
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	2180      	movs	r1, #128	; 0x80
 8007cec:	68f8      	ldr	r0, [r7, #12]
 8007cee:	f000 fb1f 	bl	8008330 <UART_WaitOnFlagUntilTimeout>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d001      	beq.n	8007cfc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007cf8:	2303      	movs	r3, #3
 8007cfa:	e036      	b.n	8007d6a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007cfc:	69fb      	ldr	r3, [r7, #28]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d10b      	bne.n	8007d1a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007d02:	69bb      	ldr	r3, [r7, #24]
 8007d04:	881b      	ldrh	r3, [r3, #0]
 8007d06:	461a      	mov	r2, r3
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007d12:	69bb      	ldr	r3, [r7, #24]
 8007d14:	3302      	adds	r3, #2
 8007d16:	61bb      	str	r3, [r7, #24]
 8007d18:	e007      	b.n	8007d2a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007d1a:	69fb      	ldr	r3, [r7, #28]
 8007d1c:	781a      	ldrb	r2, [r3, #0]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	3301      	adds	r3, #1
 8007d28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	3b01      	subs	r3, #1
 8007d32:	b29a      	uxth	r2, r3
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d1cf      	bne.n	8007ce2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	9300      	str	r3, [sp, #0]
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	2140      	movs	r1, #64	; 0x40
 8007d4c:	68f8      	ldr	r0, [r7, #12]
 8007d4e:	f000 faef 	bl	8008330 <UART_WaitOnFlagUntilTimeout>
 8007d52:	4603      	mov	r3, r0
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d001      	beq.n	8007d5c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007d58:	2303      	movs	r3, #3
 8007d5a:	e006      	b.n	8007d6a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2220      	movs	r2, #32
 8007d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007d64:	2300      	movs	r3, #0
 8007d66:	e000      	b.n	8007d6a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007d68:	2302      	movs	r3, #2
  }
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3720      	adds	r7, #32
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}

08007d72 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d72:	b580      	push	{r7, lr}
 8007d74:	b084      	sub	sp, #16
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	60f8      	str	r0, [r7, #12]
 8007d7a:	60b9      	str	r1, [r7, #8]
 8007d7c:	4613      	mov	r3, r2
 8007d7e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	2b20      	cmp	r3, #32
 8007d8a:	d11d      	bne.n	8007dc8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d002      	beq.n	8007d98 <HAL_UART_Receive_IT+0x26>
 8007d92:	88fb      	ldrh	r3, [r7, #6]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d101      	bne.n	8007d9c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e016      	b.n	8007dca <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007da2:	2b01      	cmp	r3, #1
 8007da4:	d101      	bne.n	8007daa <HAL_UART_Receive_IT+0x38>
 8007da6:	2302      	movs	r3, #2
 8007da8:	e00f      	b.n	8007dca <HAL_UART_Receive_IT+0x58>
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2201      	movs	r2, #1
 8007dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2200      	movs	r2, #0
 8007db6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007db8:	88fb      	ldrh	r3, [r7, #6]
 8007dba:	461a      	mov	r2, r3
 8007dbc:	68b9      	ldr	r1, [r7, #8]
 8007dbe:	68f8      	ldr	r0, [r7, #12]
 8007dc0:	f000 fb24 	bl	800840c <UART_Start_Receive_IT>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	e000      	b.n	8007dca <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007dc8:	2302      	movs	r3, #2
  }
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3710      	adds	r7, #16
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
	...

08007dd4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b0ba      	sub	sp, #232	; 0xe8
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	68db      	ldr	r3, [r3, #12]
 8007dec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	695b      	ldr	r3, [r3, #20]
 8007df6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007e00:	2300      	movs	r3, #0
 8007e02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e0a:	f003 030f 	and.w	r3, r3, #15
 8007e0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007e12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d10f      	bne.n	8007e3a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e1e:	f003 0320 	and.w	r3, r3, #32
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d009      	beq.n	8007e3a <HAL_UART_IRQHandler+0x66>
 8007e26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e2a:	f003 0320 	and.w	r3, r3, #32
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d003      	beq.n	8007e3a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 fc07 	bl	8008646 <UART_Receive_IT>
      return;
 8007e38:	e256      	b.n	80082e8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007e3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	f000 80de 	beq.w	8008000 <HAL_UART_IRQHandler+0x22c>
 8007e44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e48:	f003 0301 	and.w	r3, r3, #1
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d106      	bne.n	8007e5e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007e50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e54:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	f000 80d1 	beq.w	8008000 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e62:	f003 0301 	and.w	r3, r3, #1
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d00b      	beq.n	8007e82 <HAL_UART_IRQHandler+0xae>
 8007e6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d005      	beq.n	8007e82 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e7a:	f043 0201 	orr.w	r2, r3, #1
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e86:	f003 0304 	and.w	r3, r3, #4
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d00b      	beq.n	8007ea6 <HAL_UART_IRQHandler+0xd2>
 8007e8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e92:	f003 0301 	and.w	r3, r3, #1
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d005      	beq.n	8007ea6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e9e:	f043 0202 	orr.w	r2, r3, #2
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eaa:	f003 0302 	and.w	r3, r3, #2
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d00b      	beq.n	8007eca <HAL_UART_IRQHandler+0xf6>
 8007eb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007eb6:	f003 0301 	and.w	r3, r3, #1
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d005      	beq.n	8007eca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec2:	f043 0204 	orr.w	r2, r3, #4
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ece:	f003 0308 	and.w	r3, r3, #8
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d011      	beq.n	8007efa <HAL_UART_IRQHandler+0x126>
 8007ed6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007eda:	f003 0320 	and.w	r3, r3, #32
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d105      	bne.n	8007eee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007ee2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ee6:	f003 0301 	and.w	r3, r3, #1
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d005      	beq.n	8007efa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef2:	f043 0208 	orr.w	r2, r3, #8
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	f000 81ed 	beq.w	80082de <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f08:	f003 0320 	and.w	r3, r3, #32
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d008      	beq.n	8007f22 <HAL_UART_IRQHandler+0x14e>
 8007f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f14:	f003 0320 	and.w	r3, r3, #32
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d002      	beq.n	8007f22 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 fb92 	bl	8008646 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	695b      	ldr	r3, [r3, #20]
 8007f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f2c:	2b40      	cmp	r3, #64	; 0x40
 8007f2e:	bf0c      	ite	eq
 8007f30:	2301      	moveq	r3, #1
 8007f32:	2300      	movne	r3, #0
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f3e:	f003 0308 	and.w	r3, r3, #8
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d103      	bne.n	8007f4e <HAL_UART_IRQHandler+0x17a>
 8007f46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d04f      	beq.n	8007fee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 fa9a 	bl	8008488 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	695b      	ldr	r3, [r3, #20]
 8007f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f5e:	2b40      	cmp	r3, #64	; 0x40
 8007f60:	d141      	bne.n	8007fe6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	3314      	adds	r3, #20
 8007f68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f70:	e853 3f00 	ldrex	r3, [r3]
 8007f74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007f78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007f7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	3314      	adds	r3, #20
 8007f8a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007f8e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007f92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007f9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007f9e:	e841 2300 	strex	r3, r2, [r1]
 8007fa2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007fa6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d1d9      	bne.n	8007f62 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d013      	beq.n	8007fde <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fba:	4a7d      	ldr	r2, [pc, #500]	; (80081b0 <HAL_UART_IRQHandler+0x3dc>)
 8007fbc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f7fa ff5a 	bl	8002e7c <HAL_DMA_Abort_IT>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d016      	beq.n	8007ffc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fd4:	687a      	ldr	r2, [r7, #4]
 8007fd6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007fd8:	4610      	mov	r0, r2
 8007fda:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fdc:	e00e      	b.n	8007ffc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 f990 	bl	8008304 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fe4:	e00a      	b.n	8007ffc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 f98c 	bl	8008304 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fec:	e006      	b.n	8007ffc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 f988 	bl	8008304 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007ffa:	e170      	b.n	80082de <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ffc:	bf00      	nop
    return;
 8007ffe:	e16e      	b.n	80082de <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008004:	2b01      	cmp	r3, #1
 8008006:	f040 814a 	bne.w	800829e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800800a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800800e:	f003 0310 	and.w	r3, r3, #16
 8008012:	2b00      	cmp	r3, #0
 8008014:	f000 8143 	beq.w	800829e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008018:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800801c:	f003 0310 	and.w	r3, r3, #16
 8008020:	2b00      	cmp	r3, #0
 8008022:	f000 813c 	beq.w	800829e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008026:	2300      	movs	r3, #0
 8008028:	60bb      	str	r3, [r7, #8]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	60bb      	str	r3, [r7, #8]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	60bb      	str	r3, [r7, #8]
 800803a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	695b      	ldr	r3, [r3, #20]
 8008042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008046:	2b40      	cmp	r3, #64	; 0x40
 8008048:	f040 80b4 	bne.w	80081b4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008058:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800805c:	2b00      	cmp	r3, #0
 800805e:	f000 8140 	beq.w	80082e2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008066:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800806a:	429a      	cmp	r2, r3
 800806c:	f080 8139 	bcs.w	80082e2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008076:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800807c:	69db      	ldr	r3, [r3, #28]
 800807e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008082:	f000 8088 	beq.w	8008196 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	330c      	adds	r3, #12
 800808c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008090:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008094:	e853 3f00 	ldrex	r3, [r3]
 8008098:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800809c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80080a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	330c      	adds	r3, #12
 80080ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80080b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80080b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80080be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80080c2:	e841 2300 	strex	r3, r2, [r1]
 80080c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80080ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d1d9      	bne.n	8008086 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	3314      	adds	r3, #20
 80080d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080dc:	e853 3f00 	ldrex	r3, [r3]
 80080e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80080e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080e4:	f023 0301 	bic.w	r3, r3, #1
 80080e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	3314      	adds	r3, #20
 80080f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80080f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80080fa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80080fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008102:	e841 2300 	strex	r3, r2, [r1]
 8008106:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008108:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800810a:	2b00      	cmp	r3, #0
 800810c:	d1e1      	bne.n	80080d2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	3314      	adds	r3, #20
 8008114:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008116:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008118:	e853 3f00 	ldrex	r3, [r3]
 800811c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800811e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008120:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008124:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	3314      	adds	r3, #20
 800812e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008132:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008134:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008136:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008138:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800813a:	e841 2300 	strex	r3, r2, [r1]
 800813e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008140:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008142:	2b00      	cmp	r3, #0
 8008144:	d1e3      	bne.n	800810e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2220      	movs	r2, #32
 800814a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2200      	movs	r2, #0
 8008152:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	330c      	adds	r3, #12
 800815a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800815c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800815e:	e853 3f00 	ldrex	r3, [r3]
 8008162:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008164:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008166:	f023 0310 	bic.w	r3, r3, #16
 800816a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	330c      	adds	r3, #12
 8008174:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008178:	65ba      	str	r2, [r7, #88]	; 0x58
 800817a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800817c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800817e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008180:	e841 2300 	strex	r3, r2, [r1]
 8008184:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008186:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008188:	2b00      	cmp	r3, #0
 800818a:	d1e3      	bne.n	8008154 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008190:	4618      	mov	r0, r3
 8008192:	f7fa fe03 	bl	8002d9c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800819e:	b29b      	uxth	r3, r3
 80081a0:	1ad3      	subs	r3, r2, r3
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	4619      	mov	r1, r3
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 f8b6 	bl	8008318 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80081ac:	e099      	b.n	80082e2 <HAL_UART_IRQHandler+0x50e>
 80081ae:	bf00      	nop
 80081b0:	0800854f 	.word	0x0800854f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081bc:	b29b      	uxth	r3, r3
 80081be:	1ad3      	subs	r3, r2, r3
 80081c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081c8:	b29b      	uxth	r3, r3
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	f000 808b 	beq.w	80082e6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80081d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	f000 8086 	beq.w	80082e6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	330c      	adds	r3, #12
 80081e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e4:	e853 3f00 	ldrex	r3, [r3]
 80081e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80081ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80081f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	330c      	adds	r3, #12
 80081fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80081fe:	647a      	str	r2, [r7, #68]	; 0x44
 8008200:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008202:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008204:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008206:	e841 2300 	strex	r3, r2, [r1]
 800820a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800820c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800820e:	2b00      	cmp	r3, #0
 8008210:	d1e3      	bne.n	80081da <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	3314      	adds	r3, #20
 8008218:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800821a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821c:	e853 3f00 	ldrex	r3, [r3]
 8008220:	623b      	str	r3, [r7, #32]
   return(result);
 8008222:	6a3b      	ldr	r3, [r7, #32]
 8008224:	f023 0301 	bic.w	r3, r3, #1
 8008228:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	3314      	adds	r3, #20
 8008232:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008236:	633a      	str	r2, [r7, #48]	; 0x30
 8008238:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800823a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800823c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800823e:	e841 2300 	strex	r3, r2, [r1]
 8008242:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008246:	2b00      	cmp	r3, #0
 8008248:	d1e3      	bne.n	8008212 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2220      	movs	r2, #32
 800824e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2200      	movs	r2, #0
 8008256:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	330c      	adds	r3, #12
 800825e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	e853 3f00 	ldrex	r3, [r3]
 8008266:	60fb      	str	r3, [r7, #12]
   return(result);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f023 0310 	bic.w	r3, r3, #16
 800826e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	330c      	adds	r3, #12
 8008278:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800827c:	61fa      	str	r2, [r7, #28]
 800827e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008280:	69b9      	ldr	r1, [r7, #24]
 8008282:	69fa      	ldr	r2, [r7, #28]
 8008284:	e841 2300 	strex	r3, r2, [r1]
 8008288:	617b      	str	r3, [r7, #20]
   return(result);
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d1e3      	bne.n	8008258 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008290:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008294:	4619      	mov	r1, r3
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 f83e 	bl	8008318 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800829c:	e023      	b.n	80082e6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800829e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d009      	beq.n	80082be <HAL_UART_IRQHandler+0x4ea>
 80082aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d003      	beq.n	80082be <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 f95d 	bl	8008576 <UART_Transmit_IT>
    return;
 80082bc:	e014      	b.n	80082e8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80082be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d00e      	beq.n	80082e8 <HAL_UART_IRQHandler+0x514>
 80082ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d008      	beq.n	80082e8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 f99d 	bl	8008616 <UART_EndTransmit_IT>
    return;
 80082dc:	e004      	b.n	80082e8 <HAL_UART_IRQHandler+0x514>
    return;
 80082de:	bf00      	nop
 80082e0:	e002      	b.n	80082e8 <HAL_UART_IRQHandler+0x514>
      return;
 80082e2:	bf00      	nop
 80082e4:	e000      	b.n	80082e8 <HAL_UART_IRQHandler+0x514>
      return;
 80082e6:	bf00      	nop
  }
}
 80082e8:	37e8      	adds	r7, #232	; 0xe8
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	bf00      	nop

080082f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b083      	sub	sp, #12
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80082f8:	bf00      	nop
 80082fa:	370c      	adds	r7, #12
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr

08008304 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008304:	b480      	push	{r7}
 8008306:	b083      	sub	sp, #12
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800830c:	bf00      	nop
 800830e:	370c      	adds	r7, #12
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr

08008318 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008318:	b480      	push	{r7}
 800831a:	b083      	sub	sp, #12
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	460b      	mov	r3, r1
 8008322:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008324:	bf00      	nop
 8008326:	370c      	adds	r7, #12
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b090      	sub	sp, #64	; 0x40
 8008334:	af00      	add	r7, sp, #0
 8008336:	60f8      	str	r0, [r7, #12]
 8008338:	60b9      	str	r1, [r7, #8]
 800833a:	603b      	str	r3, [r7, #0]
 800833c:	4613      	mov	r3, r2
 800833e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008340:	e050      	b.n	80083e4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008342:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008344:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008348:	d04c      	beq.n	80083e4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800834a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800834c:	2b00      	cmp	r3, #0
 800834e:	d007      	beq.n	8008360 <UART_WaitOnFlagUntilTimeout+0x30>
 8008350:	f7fa fc12 	bl	8002b78 <HAL_GetTick>
 8008354:	4602      	mov	r2, r0
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	1ad3      	subs	r3, r2, r3
 800835a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800835c:	429a      	cmp	r2, r3
 800835e:	d241      	bcs.n	80083e4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	330c      	adds	r3, #12
 8008366:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800836a:	e853 3f00 	ldrex	r3, [r3]
 800836e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008372:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008376:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	330c      	adds	r3, #12
 800837e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008380:	637a      	str	r2, [r7, #52]	; 0x34
 8008382:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008384:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008386:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008388:	e841 2300 	strex	r3, r2, [r1]
 800838c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800838e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008390:	2b00      	cmp	r3, #0
 8008392:	d1e5      	bne.n	8008360 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	3314      	adds	r3, #20
 800839a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	e853 3f00 	ldrex	r3, [r3]
 80083a2:	613b      	str	r3, [r7, #16]
   return(result);
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	f023 0301 	bic.w	r3, r3, #1
 80083aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	3314      	adds	r3, #20
 80083b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083b4:	623a      	str	r2, [r7, #32]
 80083b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b8:	69f9      	ldr	r1, [r7, #28]
 80083ba:	6a3a      	ldr	r2, [r7, #32]
 80083bc:	e841 2300 	strex	r3, r2, [r1]
 80083c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80083c2:	69bb      	ldr	r3, [r7, #24]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d1e5      	bne.n	8008394 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	2220      	movs	r2, #32
 80083cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2220      	movs	r2, #32
 80083d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	2200      	movs	r2, #0
 80083dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80083e0:	2303      	movs	r3, #3
 80083e2:	e00f      	b.n	8008404 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	681a      	ldr	r2, [r3, #0]
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	4013      	ands	r3, r2
 80083ee:	68ba      	ldr	r2, [r7, #8]
 80083f0:	429a      	cmp	r2, r3
 80083f2:	bf0c      	ite	eq
 80083f4:	2301      	moveq	r3, #1
 80083f6:	2300      	movne	r3, #0
 80083f8:	b2db      	uxtb	r3, r3
 80083fa:	461a      	mov	r2, r3
 80083fc:	79fb      	ldrb	r3, [r7, #7]
 80083fe:	429a      	cmp	r2, r3
 8008400:	d09f      	beq.n	8008342 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008402:	2300      	movs	r3, #0
}
 8008404:	4618      	mov	r0, r3
 8008406:	3740      	adds	r7, #64	; 0x40
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800840c:	b480      	push	{r7}
 800840e:	b085      	sub	sp, #20
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	60b9      	str	r1, [r7, #8]
 8008416:	4613      	mov	r3, r2
 8008418:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	68ba      	ldr	r2, [r7, #8]
 800841e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	88fa      	ldrh	r2, [r7, #6]
 8008424:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	88fa      	ldrh	r2, [r7, #6]
 800842a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	2200      	movs	r2, #0
 8008430:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2222      	movs	r2, #34	; 0x22
 8008436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	2200      	movs	r2, #0
 800843e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	691b      	ldr	r3, [r3, #16]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d007      	beq.n	800845a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	68da      	ldr	r2, [r3, #12]
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008458:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	695a      	ldr	r2, [r3, #20]
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f042 0201 	orr.w	r2, r2, #1
 8008468:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	68da      	ldr	r2, [r3, #12]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f042 0220 	orr.w	r2, r2, #32
 8008478:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800847a:	2300      	movs	r3, #0
}
 800847c:	4618      	mov	r0, r3
 800847e:	3714      	adds	r7, #20
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr

08008488 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008488:	b480      	push	{r7}
 800848a:	b095      	sub	sp, #84	; 0x54
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	330c      	adds	r3, #12
 8008496:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800849a:	e853 3f00 	ldrex	r3, [r3]
 800849e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80084a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	330c      	adds	r3, #12
 80084ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80084b0:	643a      	str	r2, [r7, #64]	; 0x40
 80084b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80084b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80084b8:	e841 2300 	strex	r3, r2, [r1]
 80084bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80084be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d1e5      	bne.n	8008490 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	3314      	adds	r3, #20
 80084ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084cc:	6a3b      	ldr	r3, [r7, #32]
 80084ce:	e853 3f00 	ldrex	r3, [r3]
 80084d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80084d4:	69fb      	ldr	r3, [r7, #28]
 80084d6:	f023 0301 	bic.w	r3, r3, #1
 80084da:	64bb      	str	r3, [r7, #72]	; 0x48
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	3314      	adds	r3, #20
 80084e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80084e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084ec:	e841 2300 	strex	r3, r2, [r1]
 80084f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80084f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d1e5      	bne.n	80084c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d119      	bne.n	8008534 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	330c      	adds	r3, #12
 8008506:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	e853 3f00 	ldrex	r3, [r3]
 800850e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	f023 0310 	bic.w	r3, r3, #16
 8008516:	647b      	str	r3, [r7, #68]	; 0x44
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	330c      	adds	r3, #12
 800851e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008520:	61ba      	str	r2, [r7, #24]
 8008522:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008524:	6979      	ldr	r1, [r7, #20]
 8008526:	69ba      	ldr	r2, [r7, #24]
 8008528:	e841 2300 	strex	r3, r2, [r1]
 800852c:	613b      	str	r3, [r7, #16]
   return(result);
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d1e5      	bne.n	8008500 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2220      	movs	r2, #32
 8008538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2200      	movs	r2, #0
 8008540:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008542:	bf00      	nop
 8008544:	3754      	adds	r7, #84	; 0x54
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr

0800854e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800854e:	b580      	push	{r7, lr}
 8008550:	b084      	sub	sp, #16
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800855a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	2200      	movs	r2, #0
 8008560:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2200      	movs	r2, #0
 8008566:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008568:	68f8      	ldr	r0, [r7, #12]
 800856a:	f7ff fecb 	bl	8008304 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800856e:	bf00      	nop
 8008570:	3710      	adds	r7, #16
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}

08008576 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008576:	b480      	push	{r7}
 8008578:	b085      	sub	sp, #20
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008584:	b2db      	uxtb	r3, r3
 8008586:	2b21      	cmp	r3, #33	; 0x21
 8008588:	d13e      	bne.n	8008608 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008592:	d114      	bne.n	80085be <UART_Transmit_IT+0x48>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	691b      	ldr	r3, [r3, #16]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d110      	bne.n	80085be <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6a1b      	ldr	r3, [r3, #32]
 80085a0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	881b      	ldrh	r3, [r3, #0]
 80085a6:	461a      	mov	r2, r3
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80085b0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6a1b      	ldr	r3, [r3, #32]
 80085b6:	1c9a      	adds	r2, r3, #2
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	621a      	str	r2, [r3, #32]
 80085bc:	e008      	b.n	80085d0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6a1b      	ldr	r3, [r3, #32]
 80085c2:	1c59      	adds	r1, r3, #1
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	6211      	str	r1, [r2, #32]
 80085c8:	781a      	ldrb	r2, [r3, #0]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	3b01      	subs	r3, #1
 80085d8:	b29b      	uxth	r3, r3
 80085da:	687a      	ldr	r2, [r7, #4]
 80085dc:	4619      	mov	r1, r3
 80085de:	84d1      	strh	r1, [r2, #38]	; 0x26
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d10f      	bne.n	8008604 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	68da      	ldr	r2, [r3, #12]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80085f2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	68da      	ldr	r2, [r3, #12]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008602:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008604:	2300      	movs	r3, #0
 8008606:	e000      	b.n	800860a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008608:	2302      	movs	r3, #2
  }
}
 800860a:	4618      	mov	r0, r3
 800860c:	3714      	adds	r7, #20
 800860e:	46bd      	mov	sp, r7
 8008610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008614:	4770      	bx	lr

08008616 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008616:	b580      	push	{r7, lr}
 8008618:	b082      	sub	sp, #8
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	68da      	ldr	r2, [r3, #12]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800862c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2220      	movs	r2, #32
 8008632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f7ff fe5a 	bl	80082f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800863c:	2300      	movs	r3, #0
}
 800863e:	4618      	mov	r0, r3
 8008640:	3708      	adds	r7, #8
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}

08008646 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008646:	b580      	push	{r7, lr}
 8008648:	b08c      	sub	sp, #48	; 0x30
 800864a:	af00      	add	r7, sp, #0
 800864c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008654:	b2db      	uxtb	r3, r3
 8008656:	2b22      	cmp	r3, #34	; 0x22
 8008658:	f040 80ab 	bne.w	80087b2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008664:	d117      	bne.n	8008696 <UART_Receive_IT+0x50>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	691b      	ldr	r3, [r3, #16]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d113      	bne.n	8008696 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800866e:	2300      	movs	r3, #0
 8008670:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008676:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	b29b      	uxth	r3, r3
 8008680:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008684:	b29a      	uxth	r2, r3
 8008686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008688:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800868e:	1c9a      	adds	r2, r3, #2
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	629a      	str	r2, [r3, #40]	; 0x28
 8008694:	e026      	b.n	80086e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800869a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800869c:	2300      	movs	r3, #0
 800869e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	689b      	ldr	r3, [r3, #8]
 80086a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086a8:	d007      	beq.n	80086ba <UART_Receive_IT+0x74>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	689b      	ldr	r3, [r3, #8]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d10a      	bne.n	80086c8 <UART_Receive_IT+0x82>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	691b      	ldr	r3, [r3, #16]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d106      	bne.n	80086c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	b2da      	uxtb	r2, r3
 80086c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086c4:	701a      	strb	r2, [r3, #0]
 80086c6:	e008      	b.n	80086da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	685b      	ldr	r3, [r3, #4]
 80086ce:	b2db      	uxtb	r3, r3
 80086d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086d4:	b2da      	uxtb	r2, r3
 80086d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086de:	1c5a      	adds	r2, r3, #1
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80086e8:	b29b      	uxth	r3, r3
 80086ea:	3b01      	subs	r3, #1
 80086ec:	b29b      	uxth	r3, r3
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	4619      	mov	r1, r3
 80086f2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d15a      	bne.n	80087ae <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	68da      	ldr	r2, [r3, #12]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f022 0220 	bic.w	r2, r2, #32
 8008706:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	68da      	ldr	r2, [r3, #12]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008716:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	695a      	ldr	r2, [r3, #20]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f022 0201 	bic.w	r2, r2, #1
 8008726:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2220      	movs	r2, #32
 800872c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008734:	2b01      	cmp	r3, #1
 8008736:	d135      	bne.n	80087a4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2200      	movs	r2, #0
 800873c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	330c      	adds	r3, #12
 8008744:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	e853 3f00 	ldrex	r3, [r3]
 800874c:	613b      	str	r3, [r7, #16]
   return(result);
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	f023 0310 	bic.w	r3, r3, #16
 8008754:	627b      	str	r3, [r7, #36]	; 0x24
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	330c      	adds	r3, #12
 800875c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800875e:	623a      	str	r2, [r7, #32]
 8008760:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008762:	69f9      	ldr	r1, [r7, #28]
 8008764:	6a3a      	ldr	r2, [r7, #32]
 8008766:	e841 2300 	strex	r3, r2, [r1]
 800876a:	61bb      	str	r3, [r7, #24]
   return(result);
 800876c:	69bb      	ldr	r3, [r7, #24]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d1e5      	bne.n	800873e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f003 0310 	and.w	r3, r3, #16
 800877c:	2b10      	cmp	r3, #16
 800877e:	d10a      	bne.n	8008796 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008780:	2300      	movs	r3, #0
 8008782:	60fb      	str	r3, [r7, #12]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	60fb      	str	r3, [r7, #12]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	60fb      	str	r3, [r7, #12]
 8008794:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800879a:	4619      	mov	r1, r3
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f7ff fdbb 	bl	8008318 <HAL_UARTEx_RxEventCallback>
 80087a2:	e002      	b.n	80087aa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f7f9 fac9 	bl	8001d3c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80087aa:	2300      	movs	r3, #0
 80087ac:	e002      	b.n	80087b4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80087ae:	2300      	movs	r3, #0
 80087b0:	e000      	b.n	80087b4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80087b2:	2302      	movs	r3, #2
  }
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3730      	adds	r7, #48	; 0x30
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80087bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80087c0:	b0c0      	sub	sp, #256	; 0x100
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	691b      	ldr	r3, [r3, #16]
 80087d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80087d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087d8:	68d9      	ldr	r1, [r3, #12]
 80087da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087de:	681a      	ldr	r2, [r3, #0]
 80087e0:	ea40 0301 	orr.w	r3, r0, r1
 80087e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80087e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087ea:	689a      	ldr	r2, [r3, #8]
 80087ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087f0:	691b      	ldr	r3, [r3, #16]
 80087f2:	431a      	orrs	r2, r3
 80087f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087f8:	695b      	ldr	r3, [r3, #20]
 80087fa:	431a      	orrs	r2, r3
 80087fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008800:	69db      	ldr	r3, [r3, #28]
 8008802:	4313      	orrs	r3, r2
 8008804:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	68db      	ldr	r3, [r3, #12]
 8008810:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008814:	f021 010c 	bic.w	r1, r1, #12
 8008818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800881c:	681a      	ldr	r2, [r3, #0]
 800881e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008822:	430b      	orrs	r3, r1
 8008824:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	695b      	ldr	r3, [r3, #20]
 800882e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008836:	6999      	ldr	r1, [r3, #24]
 8008838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800883c:	681a      	ldr	r2, [r3, #0]
 800883e:	ea40 0301 	orr.w	r3, r0, r1
 8008842:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008848:	681a      	ldr	r2, [r3, #0]
 800884a:	4b8f      	ldr	r3, [pc, #572]	; (8008a88 <UART_SetConfig+0x2cc>)
 800884c:	429a      	cmp	r2, r3
 800884e:	d005      	beq.n	800885c <UART_SetConfig+0xa0>
 8008850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008854:	681a      	ldr	r2, [r3, #0]
 8008856:	4b8d      	ldr	r3, [pc, #564]	; (8008a8c <UART_SetConfig+0x2d0>)
 8008858:	429a      	cmp	r2, r3
 800885a:	d104      	bne.n	8008866 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800885c:	f7fe fbd8 	bl	8007010 <HAL_RCC_GetPCLK2Freq>
 8008860:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008864:	e003      	b.n	800886e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008866:	f7fe fbbf 	bl	8006fe8 <HAL_RCC_GetPCLK1Freq>
 800886a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800886e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008872:	69db      	ldr	r3, [r3, #28]
 8008874:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008878:	f040 810c 	bne.w	8008a94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800887c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008880:	2200      	movs	r2, #0
 8008882:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008886:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800888a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800888e:	4622      	mov	r2, r4
 8008890:	462b      	mov	r3, r5
 8008892:	1891      	adds	r1, r2, r2
 8008894:	65b9      	str	r1, [r7, #88]	; 0x58
 8008896:	415b      	adcs	r3, r3
 8008898:	65fb      	str	r3, [r7, #92]	; 0x5c
 800889a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800889e:	4621      	mov	r1, r4
 80088a0:	eb12 0801 	adds.w	r8, r2, r1
 80088a4:	4629      	mov	r1, r5
 80088a6:	eb43 0901 	adc.w	r9, r3, r1
 80088aa:	f04f 0200 	mov.w	r2, #0
 80088ae:	f04f 0300 	mov.w	r3, #0
 80088b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80088b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80088ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80088be:	4690      	mov	r8, r2
 80088c0:	4699      	mov	r9, r3
 80088c2:	4623      	mov	r3, r4
 80088c4:	eb18 0303 	adds.w	r3, r8, r3
 80088c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80088cc:	462b      	mov	r3, r5
 80088ce:	eb49 0303 	adc.w	r3, r9, r3
 80088d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80088d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	2200      	movs	r2, #0
 80088de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80088e2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80088e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80088ea:	460b      	mov	r3, r1
 80088ec:	18db      	adds	r3, r3, r3
 80088ee:	653b      	str	r3, [r7, #80]	; 0x50
 80088f0:	4613      	mov	r3, r2
 80088f2:	eb42 0303 	adc.w	r3, r2, r3
 80088f6:	657b      	str	r3, [r7, #84]	; 0x54
 80088f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80088fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008900:	f7f8 f98c 	bl	8000c1c <__aeabi_uldivmod>
 8008904:	4602      	mov	r2, r0
 8008906:	460b      	mov	r3, r1
 8008908:	4b61      	ldr	r3, [pc, #388]	; (8008a90 <UART_SetConfig+0x2d4>)
 800890a:	fba3 2302 	umull	r2, r3, r3, r2
 800890e:	095b      	lsrs	r3, r3, #5
 8008910:	011c      	lsls	r4, r3, #4
 8008912:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008916:	2200      	movs	r2, #0
 8008918:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800891c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008920:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008924:	4642      	mov	r2, r8
 8008926:	464b      	mov	r3, r9
 8008928:	1891      	adds	r1, r2, r2
 800892a:	64b9      	str	r1, [r7, #72]	; 0x48
 800892c:	415b      	adcs	r3, r3
 800892e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008930:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008934:	4641      	mov	r1, r8
 8008936:	eb12 0a01 	adds.w	sl, r2, r1
 800893a:	4649      	mov	r1, r9
 800893c:	eb43 0b01 	adc.w	fp, r3, r1
 8008940:	f04f 0200 	mov.w	r2, #0
 8008944:	f04f 0300 	mov.w	r3, #0
 8008948:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800894c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008950:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008954:	4692      	mov	sl, r2
 8008956:	469b      	mov	fp, r3
 8008958:	4643      	mov	r3, r8
 800895a:	eb1a 0303 	adds.w	r3, sl, r3
 800895e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008962:	464b      	mov	r3, r9
 8008964:	eb4b 0303 	adc.w	r3, fp, r3
 8008968:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800896c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	2200      	movs	r2, #0
 8008974:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008978:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800897c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008980:	460b      	mov	r3, r1
 8008982:	18db      	adds	r3, r3, r3
 8008984:	643b      	str	r3, [r7, #64]	; 0x40
 8008986:	4613      	mov	r3, r2
 8008988:	eb42 0303 	adc.w	r3, r2, r3
 800898c:	647b      	str	r3, [r7, #68]	; 0x44
 800898e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008992:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008996:	f7f8 f941 	bl	8000c1c <__aeabi_uldivmod>
 800899a:	4602      	mov	r2, r0
 800899c:	460b      	mov	r3, r1
 800899e:	4611      	mov	r1, r2
 80089a0:	4b3b      	ldr	r3, [pc, #236]	; (8008a90 <UART_SetConfig+0x2d4>)
 80089a2:	fba3 2301 	umull	r2, r3, r3, r1
 80089a6:	095b      	lsrs	r3, r3, #5
 80089a8:	2264      	movs	r2, #100	; 0x64
 80089aa:	fb02 f303 	mul.w	r3, r2, r3
 80089ae:	1acb      	subs	r3, r1, r3
 80089b0:	00db      	lsls	r3, r3, #3
 80089b2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80089b6:	4b36      	ldr	r3, [pc, #216]	; (8008a90 <UART_SetConfig+0x2d4>)
 80089b8:	fba3 2302 	umull	r2, r3, r3, r2
 80089bc:	095b      	lsrs	r3, r3, #5
 80089be:	005b      	lsls	r3, r3, #1
 80089c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80089c4:	441c      	add	r4, r3
 80089c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80089ca:	2200      	movs	r2, #0
 80089cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80089d0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80089d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80089d8:	4642      	mov	r2, r8
 80089da:	464b      	mov	r3, r9
 80089dc:	1891      	adds	r1, r2, r2
 80089de:	63b9      	str	r1, [r7, #56]	; 0x38
 80089e0:	415b      	adcs	r3, r3
 80089e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80089e8:	4641      	mov	r1, r8
 80089ea:	1851      	adds	r1, r2, r1
 80089ec:	6339      	str	r1, [r7, #48]	; 0x30
 80089ee:	4649      	mov	r1, r9
 80089f0:	414b      	adcs	r3, r1
 80089f2:	637b      	str	r3, [r7, #52]	; 0x34
 80089f4:	f04f 0200 	mov.w	r2, #0
 80089f8:	f04f 0300 	mov.w	r3, #0
 80089fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008a00:	4659      	mov	r1, fp
 8008a02:	00cb      	lsls	r3, r1, #3
 8008a04:	4651      	mov	r1, sl
 8008a06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008a0a:	4651      	mov	r1, sl
 8008a0c:	00ca      	lsls	r2, r1, #3
 8008a0e:	4610      	mov	r0, r2
 8008a10:	4619      	mov	r1, r3
 8008a12:	4603      	mov	r3, r0
 8008a14:	4642      	mov	r2, r8
 8008a16:	189b      	adds	r3, r3, r2
 8008a18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008a1c:	464b      	mov	r3, r9
 8008a1e:	460a      	mov	r2, r1
 8008a20:	eb42 0303 	adc.w	r3, r2, r3
 8008a24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008a34:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008a38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008a3c:	460b      	mov	r3, r1
 8008a3e:	18db      	adds	r3, r3, r3
 8008a40:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a42:	4613      	mov	r3, r2
 8008a44:	eb42 0303 	adc.w	r3, r2, r3
 8008a48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008a4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008a52:	f7f8 f8e3 	bl	8000c1c <__aeabi_uldivmod>
 8008a56:	4602      	mov	r2, r0
 8008a58:	460b      	mov	r3, r1
 8008a5a:	4b0d      	ldr	r3, [pc, #52]	; (8008a90 <UART_SetConfig+0x2d4>)
 8008a5c:	fba3 1302 	umull	r1, r3, r3, r2
 8008a60:	095b      	lsrs	r3, r3, #5
 8008a62:	2164      	movs	r1, #100	; 0x64
 8008a64:	fb01 f303 	mul.w	r3, r1, r3
 8008a68:	1ad3      	subs	r3, r2, r3
 8008a6a:	00db      	lsls	r3, r3, #3
 8008a6c:	3332      	adds	r3, #50	; 0x32
 8008a6e:	4a08      	ldr	r2, [pc, #32]	; (8008a90 <UART_SetConfig+0x2d4>)
 8008a70:	fba2 2303 	umull	r2, r3, r2, r3
 8008a74:	095b      	lsrs	r3, r3, #5
 8008a76:	f003 0207 	and.w	r2, r3, #7
 8008a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4422      	add	r2, r4
 8008a82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008a84:	e105      	b.n	8008c92 <UART_SetConfig+0x4d6>
 8008a86:	bf00      	nop
 8008a88:	40011000 	.word	0x40011000
 8008a8c:	40011400 	.word	0x40011400
 8008a90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008a94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a98:	2200      	movs	r2, #0
 8008a9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008a9e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008aa2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008aa6:	4642      	mov	r2, r8
 8008aa8:	464b      	mov	r3, r9
 8008aaa:	1891      	adds	r1, r2, r2
 8008aac:	6239      	str	r1, [r7, #32]
 8008aae:	415b      	adcs	r3, r3
 8008ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8008ab2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008ab6:	4641      	mov	r1, r8
 8008ab8:	1854      	adds	r4, r2, r1
 8008aba:	4649      	mov	r1, r9
 8008abc:	eb43 0501 	adc.w	r5, r3, r1
 8008ac0:	f04f 0200 	mov.w	r2, #0
 8008ac4:	f04f 0300 	mov.w	r3, #0
 8008ac8:	00eb      	lsls	r3, r5, #3
 8008aca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008ace:	00e2      	lsls	r2, r4, #3
 8008ad0:	4614      	mov	r4, r2
 8008ad2:	461d      	mov	r5, r3
 8008ad4:	4643      	mov	r3, r8
 8008ad6:	18e3      	adds	r3, r4, r3
 8008ad8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008adc:	464b      	mov	r3, r9
 8008ade:	eb45 0303 	adc.w	r3, r5, r3
 8008ae2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	2200      	movs	r2, #0
 8008aee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008af2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008af6:	f04f 0200 	mov.w	r2, #0
 8008afa:	f04f 0300 	mov.w	r3, #0
 8008afe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008b02:	4629      	mov	r1, r5
 8008b04:	008b      	lsls	r3, r1, #2
 8008b06:	4621      	mov	r1, r4
 8008b08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008b0c:	4621      	mov	r1, r4
 8008b0e:	008a      	lsls	r2, r1, #2
 8008b10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008b14:	f7f8 f882 	bl	8000c1c <__aeabi_uldivmod>
 8008b18:	4602      	mov	r2, r0
 8008b1a:	460b      	mov	r3, r1
 8008b1c:	4b60      	ldr	r3, [pc, #384]	; (8008ca0 <UART_SetConfig+0x4e4>)
 8008b1e:	fba3 2302 	umull	r2, r3, r3, r2
 8008b22:	095b      	lsrs	r3, r3, #5
 8008b24:	011c      	lsls	r4, r3, #4
 8008b26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008b30:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008b34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008b38:	4642      	mov	r2, r8
 8008b3a:	464b      	mov	r3, r9
 8008b3c:	1891      	adds	r1, r2, r2
 8008b3e:	61b9      	str	r1, [r7, #24]
 8008b40:	415b      	adcs	r3, r3
 8008b42:	61fb      	str	r3, [r7, #28]
 8008b44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008b48:	4641      	mov	r1, r8
 8008b4a:	1851      	adds	r1, r2, r1
 8008b4c:	6139      	str	r1, [r7, #16]
 8008b4e:	4649      	mov	r1, r9
 8008b50:	414b      	adcs	r3, r1
 8008b52:	617b      	str	r3, [r7, #20]
 8008b54:	f04f 0200 	mov.w	r2, #0
 8008b58:	f04f 0300 	mov.w	r3, #0
 8008b5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008b60:	4659      	mov	r1, fp
 8008b62:	00cb      	lsls	r3, r1, #3
 8008b64:	4651      	mov	r1, sl
 8008b66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008b6a:	4651      	mov	r1, sl
 8008b6c:	00ca      	lsls	r2, r1, #3
 8008b6e:	4610      	mov	r0, r2
 8008b70:	4619      	mov	r1, r3
 8008b72:	4603      	mov	r3, r0
 8008b74:	4642      	mov	r2, r8
 8008b76:	189b      	adds	r3, r3, r2
 8008b78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008b7c:	464b      	mov	r3, r9
 8008b7e:	460a      	mov	r2, r1
 8008b80:	eb42 0303 	adc.w	r3, r2, r3
 8008b84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	67bb      	str	r3, [r7, #120]	; 0x78
 8008b92:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008b94:	f04f 0200 	mov.w	r2, #0
 8008b98:	f04f 0300 	mov.w	r3, #0
 8008b9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008ba0:	4649      	mov	r1, r9
 8008ba2:	008b      	lsls	r3, r1, #2
 8008ba4:	4641      	mov	r1, r8
 8008ba6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008baa:	4641      	mov	r1, r8
 8008bac:	008a      	lsls	r2, r1, #2
 8008bae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008bb2:	f7f8 f833 	bl	8000c1c <__aeabi_uldivmod>
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	460b      	mov	r3, r1
 8008bba:	4b39      	ldr	r3, [pc, #228]	; (8008ca0 <UART_SetConfig+0x4e4>)
 8008bbc:	fba3 1302 	umull	r1, r3, r3, r2
 8008bc0:	095b      	lsrs	r3, r3, #5
 8008bc2:	2164      	movs	r1, #100	; 0x64
 8008bc4:	fb01 f303 	mul.w	r3, r1, r3
 8008bc8:	1ad3      	subs	r3, r2, r3
 8008bca:	011b      	lsls	r3, r3, #4
 8008bcc:	3332      	adds	r3, #50	; 0x32
 8008bce:	4a34      	ldr	r2, [pc, #208]	; (8008ca0 <UART_SetConfig+0x4e4>)
 8008bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8008bd4:	095b      	lsrs	r3, r3, #5
 8008bd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008bda:	441c      	add	r4, r3
 8008bdc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008be0:	2200      	movs	r2, #0
 8008be2:	673b      	str	r3, [r7, #112]	; 0x70
 8008be4:	677a      	str	r2, [r7, #116]	; 0x74
 8008be6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008bea:	4642      	mov	r2, r8
 8008bec:	464b      	mov	r3, r9
 8008bee:	1891      	adds	r1, r2, r2
 8008bf0:	60b9      	str	r1, [r7, #8]
 8008bf2:	415b      	adcs	r3, r3
 8008bf4:	60fb      	str	r3, [r7, #12]
 8008bf6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008bfa:	4641      	mov	r1, r8
 8008bfc:	1851      	adds	r1, r2, r1
 8008bfe:	6039      	str	r1, [r7, #0]
 8008c00:	4649      	mov	r1, r9
 8008c02:	414b      	adcs	r3, r1
 8008c04:	607b      	str	r3, [r7, #4]
 8008c06:	f04f 0200 	mov.w	r2, #0
 8008c0a:	f04f 0300 	mov.w	r3, #0
 8008c0e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008c12:	4659      	mov	r1, fp
 8008c14:	00cb      	lsls	r3, r1, #3
 8008c16:	4651      	mov	r1, sl
 8008c18:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c1c:	4651      	mov	r1, sl
 8008c1e:	00ca      	lsls	r2, r1, #3
 8008c20:	4610      	mov	r0, r2
 8008c22:	4619      	mov	r1, r3
 8008c24:	4603      	mov	r3, r0
 8008c26:	4642      	mov	r2, r8
 8008c28:	189b      	adds	r3, r3, r2
 8008c2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c2c:	464b      	mov	r3, r9
 8008c2e:	460a      	mov	r2, r1
 8008c30:	eb42 0303 	adc.w	r3, r2, r3
 8008c34:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	663b      	str	r3, [r7, #96]	; 0x60
 8008c40:	667a      	str	r2, [r7, #100]	; 0x64
 8008c42:	f04f 0200 	mov.w	r2, #0
 8008c46:	f04f 0300 	mov.w	r3, #0
 8008c4a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008c4e:	4649      	mov	r1, r9
 8008c50:	008b      	lsls	r3, r1, #2
 8008c52:	4641      	mov	r1, r8
 8008c54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008c58:	4641      	mov	r1, r8
 8008c5a:	008a      	lsls	r2, r1, #2
 8008c5c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008c60:	f7f7 ffdc 	bl	8000c1c <__aeabi_uldivmod>
 8008c64:	4602      	mov	r2, r0
 8008c66:	460b      	mov	r3, r1
 8008c68:	4b0d      	ldr	r3, [pc, #52]	; (8008ca0 <UART_SetConfig+0x4e4>)
 8008c6a:	fba3 1302 	umull	r1, r3, r3, r2
 8008c6e:	095b      	lsrs	r3, r3, #5
 8008c70:	2164      	movs	r1, #100	; 0x64
 8008c72:	fb01 f303 	mul.w	r3, r1, r3
 8008c76:	1ad3      	subs	r3, r2, r3
 8008c78:	011b      	lsls	r3, r3, #4
 8008c7a:	3332      	adds	r3, #50	; 0x32
 8008c7c:	4a08      	ldr	r2, [pc, #32]	; (8008ca0 <UART_SetConfig+0x4e4>)
 8008c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8008c82:	095b      	lsrs	r3, r3, #5
 8008c84:	f003 020f 	and.w	r2, r3, #15
 8008c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4422      	add	r2, r4
 8008c90:	609a      	str	r2, [r3, #8]
}
 8008c92:	bf00      	nop
 8008c94:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c9e:	bf00      	nop
 8008ca0:	51eb851f 	.word	0x51eb851f

08008ca4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b085      	sub	sp, #20
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	4603      	mov	r3, r0
 8008cac:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008cb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008cb6:	2b84      	cmp	r3, #132	; 0x84
 8008cb8:	d005      	beq.n	8008cc6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008cba:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	4413      	add	r3, r2
 8008cc2:	3303      	adds	r3, #3
 8008cc4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3714      	adds	r7, #20
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr

08008cd4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008cd8:	f000 fc04 	bl	80094e4 <vTaskStartScheduler>
  
  return osOK;
 8008cdc:	2300      	movs	r3, #0
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	bd80      	pop	{r7, pc}

08008ce2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008ce2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ce4:	b089      	sub	sp, #36	; 0x24
 8008ce6:	af04      	add	r7, sp, #16
 8008ce8:	6078      	str	r0, [r7, #4]
 8008cea:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	695b      	ldr	r3, [r3, #20]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d020      	beq.n	8008d36 <osThreadCreate+0x54>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	699b      	ldr	r3, [r3, #24]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d01c      	beq.n	8008d36 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	685c      	ldr	r4, [r3, #4]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681d      	ldr	r5, [r3, #0]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	691e      	ldr	r6, [r3, #16]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f7ff ffc8 	bl	8008ca4 <makeFreeRtosPriority>
 8008d14:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	695b      	ldr	r3, [r3, #20]
 8008d1a:	687a      	ldr	r2, [r7, #4]
 8008d1c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008d1e:	9202      	str	r2, [sp, #8]
 8008d20:	9301      	str	r3, [sp, #4]
 8008d22:	9100      	str	r1, [sp, #0]
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	4632      	mov	r2, r6
 8008d28:	4629      	mov	r1, r5
 8008d2a:	4620      	mov	r0, r4
 8008d2c:	f000 f8ed 	bl	8008f0a <xTaskCreateStatic>
 8008d30:	4603      	mov	r3, r0
 8008d32:	60fb      	str	r3, [r7, #12]
 8008d34:	e01c      	b.n	8008d70 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	685c      	ldr	r4, [r3, #4]
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008d42:	b29e      	uxth	r6, r3
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f7ff ffaa 	bl	8008ca4 <makeFreeRtosPriority>
 8008d50:	4602      	mov	r2, r0
 8008d52:	f107 030c 	add.w	r3, r7, #12
 8008d56:	9301      	str	r3, [sp, #4]
 8008d58:	9200      	str	r2, [sp, #0]
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	4632      	mov	r2, r6
 8008d5e:	4629      	mov	r1, r5
 8008d60:	4620      	mov	r0, r4
 8008d62:	f000 f92f 	bl	8008fc4 <xTaskCreate>
 8008d66:	4603      	mov	r3, r0
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	d001      	beq.n	8008d70 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	e000      	b.n	8008d72 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008d70:	68fb      	ldr	r3, [r7, #12]
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3714      	adds	r7, #20
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008d7a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008d7a:	b580      	push	{r7, lr}
 8008d7c:	b084      	sub	sp, #16
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d001      	beq.n	8008d90 <osDelay+0x16>
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	e000      	b.n	8008d92 <osDelay+0x18>
 8008d90:	2301      	movs	r3, #1
 8008d92:	4618      	mov	r0, r3
 8008d94:	f000 fb72 	bl	800947c <vTaskDelay>
  
  return osOK;
 8008d98:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3710      	adds	r7, #16
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}

08008da2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008da2:	b480      	push	{r7}
 8008da4:	b083      	sub	sp, #12
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f103 0208 	add.w	r2, r3, #8
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008dba:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f103 0208 	add.w	r2, r3, #8
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f103 0208 	add.w	r2, r3, #8
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008dd6:	bf00      	nop
 8008dd8:	370c      	adds	r7, #12
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de0:	4770      	bx	lr

08008de2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008de2:	b480      	push	{r7}
 8008de4:	b083      	sub	sp, #12
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2200      	movs	r2, #0
 8008dee:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008df0:	bf00      	nop
 8008df2:	370c      	adds	r7, #12
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr

08008dfc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b085      	sub	sp, #20
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	68fa      	ldr	r2, [r7, #12]
 8008e10:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	689a      	ldr	r2, [r3, #8]
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	689b      	ldr	r3, [r3, #8]
 8008e1e:	683a      	ldr	r2, [r7, #0]
 8008e20:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	683a      	ldr	r2, [r7, #0]
 8008e26:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	687a      	ldr	r2, [r7, #4]
 8008e2c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	1c5a      	adds	r2, r3, #1
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	601a      	str	r2, [r3, #0]
}
 8008e38:	bf00      	nop
 8008e3a:	3714      	adds	r7, #20
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr

08008e44 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008e44:	b480      	push	{r7}
 8008e46:	b085      	sub	sp, #20
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e5a:	d103      	bne.n	8008e64 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	691b      	ldr	r3, [r3, #16]
 8008e60:	60fb      	str	r3, [r7, #12]
 8008e62:	e00c      	b.n	8008e7e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	3308      	adds	r3, #8
 8008e68:	60fb      	str	r3, [r7, #12]
 8008e6a:	e002      	b.n	8008e72 <vListInsert+0x2e>
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	60fb      	str	r3, [r7, #12]
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	68ba      	ldr	r2, [r7, #8]
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d2f6      	bcs.n	8008e6c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	685a      	ldr	r2, [r3, #4]
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	683a      	ldr	r2, [r7, #0]
 8008e8c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	68fa      	ldr	r2, [r7, #12]
 8008e92:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	683a      	ldr	r2, [r7, #0]
 8008e98:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	1c5a      	adds	r2, r3, #1
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	601a      	str	r2, [r3, #0]
}
 8008eaa:	bf00      	nop
 8008eac:	3714      	adds	r7, #20
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb4:	4770      	bx	lr

08008eb6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008eb6:	b480      	push	{r7}
 8008eb8:	b085      	sub	sp, #20
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	691b      	ldr	r3, [r3, #16]
 8008ec2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	687a      	ldr	r2, [r7, #4]
 8008eca:	6892      	ldr	r2, [r2, #8]
 8008ecc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	689b      	ldr	r3, [r3, #8]
 8008ed2:	687a      	ldr	r2, [r7, #4]
 8008ed4:	6852      	ldr	r2, [r2, #4]
 8008ed6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	687a      	ldr	r2, [r7, #4]
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d103      	bne.n	8008eea <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	689a      	ldr	r2, [r3, #8]
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2200      	movs	r2, #0
 8008eee:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	1e5a      	subs	r2, r3, #1
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3714      	adds	r7, #20
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr

08008f0a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008f0a:	b580      	push	{r7, lr}
 8008f0c:	b08e      	sub	sp, #56	; 0x38
 8008f0e:	af04      	add	r7, sp, #16
 8008f10:	60f8      	str	r0, [r7, #12]
 8008f12:	60b9      	str	r1, [r7, #8]
 8008f14:	607a      	str	r2, [r7, #4]
 8008f16:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d10a      	bne.n	8008f34 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f22:	f383 8811 	msr	BASEPRI, r3
 8008f26:	f3bf 8f6f 	isb	sy
 8008f2a:	f3bf 8f4f 	dsb	sy
 8008f2e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008f30:	bf00      	nop
 8008f32:	e7fe      	b.n	8008f32 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d10a      	bne.n	8008f50 <xTaskCreateStatic+0x46>
	__asm volatile
 8008f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f3e:	f383 8811 	msr	BASEPRI, r3
 8008f42:	f3bf 8f6f 	isb	sy
 8008f46:	f3bf 8f4f 	dsb	sy
 8008f4a:	61fb      	str	r3, [r7, #28]
}
 8008f4c:	bf00      	nop
 8008f4e:	e7fe      	b.n	8008f4e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008f50:	23b4      	movs	r3, #180	; 0xb4
 8008f52:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	2bb4      	cmp	r3, #180	; 0xb4
 8008f58:	d00a      	beq.n	8008f70 <xTaskCreateStatic+0x66>
	__asm volatile
 8008f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f5e:	f383 8811 	msr	BASEPRI, r3
 8008f62:	f3bf 8f6f 	isb	sy
 8008f66:	f3bf 8f4f 	dsb	sy
 8008f6a:	61bb      	str	r3, [r7, #24]
}
 8008f6c:	bf00      	nop
 8008f6e:	e7fe      	b.n	8008f6e <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008f70:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d01e      	beq.n	8008fb6 <xTaskCreateStatic+0xac>
 8008f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d01b      	beq.n	8008fb6 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f80:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f86:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8a:	2202      	movs	r2, #2
 8008f8c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008f90:	2300      	movs	r3, #0
 8008f92:	9303      	str	r3, [sp, #12]
 8008f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f96:	9302      	str	r3, [sp, #8]
 8008f98:	f107 0314 	add.w	r3, r7, #20
 8008f9c:	9301      	str	r3, [sp, #4]
 8008f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa0:	9300      	str	r3, [sp, #0]
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	687a      	ldr	r2, [r7, #4]
 8008fa6:	68b9      	ldr	r1, [r7, #8]
 8008fa8:	68f8      	ldr	r0, [r7, #12]
 8008faa:	f000 f851 	bl	8009050 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008fae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008fb0:	f000 f8ec 	bl	800918c <prvAddNewTaskToReadyList>
 8008fb4:	e001      	b.n	8008fba <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008fba:	697b      	ldr	r3, [r7, #20]
	}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3728      	adds	r7, #40	; 0x28
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b08c      	sub	sp, #48	; 0x30
 8008fc8:	af04      	add	r7, sp, #16
 8008fca:	60f8      	str	r0, [r7, #12]
 8008fcc:	60b9      	str	r1, [r7, #8]
 8008fce:	603b      	str	r3, [r7, #0]
 8008fd0:	4613      	mov	r3, r2
 8008fd2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008fd4:	88fb      	ldrh	r3, [r7, #6]
 8008fd6:	009b      	lsls	r3, r3, #2
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f001 f85d 	bl	800a098 <pvPortMalloc>
 8008fde:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d00e      	beq.n	8009004 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008fe6:	20b4      	movs	r0, #180	; 0xb4
 8008fe8:	f001 f856 	bl	800a098 <pvPortMalloc>
 8008fec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008fee:	69fb      	ldr	r3, [r7, #28]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d003      	beq.n	8008ffc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008ff4:	69fb      	ldr	r3, [r7, #28]
 8008ff6:	697a      	ldr	r2, [r7, #20]
 8008ff8:	631a      	str	r2, [r3, #48]	; 0x30
 8008ffa:	e005      	b.n	8009008 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008ffc:	6978      	ldr	r0, [r7, #20]
 8008ffe:	f001 f917 	bl	800a230 <vPortFree>
 8009002:	e001      	b.n	8009008 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009004:	2300      	movs	r3, #0
 8009006:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009008:	69fb      	ldr	r3, [r7, #28]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d017      	beq.n	800903e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800900e:	69fb      	ldr	r3, [r7, #28]
 8009010:	2200      	movs	r2, #0
 8009012:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009016:	88fa      	ldrh	r2, [r7, #6]
 8009018:	2300      	movs	r3, #0
 800901a:	9303      	str	r3, [sp, #12]
 800901c:	69fb      	ldr	r3, [r7, #28]
 800901e:	9302      	str	r3, [sp, #8]
 8009020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009022:	9301      	str	r3, [sp, #4]
 8009024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009026:	9300      	str	r3, [sp, #0]
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	68b9      	ldr	r1, [r7, #8]
 800902c:	68f8      	ldr	r0, [r7, #12]
 800902e:	f000 f80f 	bl	8009050 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009032:	69f8      	ldr	r0, [r7, #28]
 8009034:	f000 f8aa 	bl	800918c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009038:	2301      	movs	r3, #1
 800903a:	61bb      	str	r3, [r7, #24]
 800903c:	e002      	b.n	8009044 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800903e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009042:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009044:	69bb      	ldr	r3, [r7, #24]
	}
 8009046:	4618      	mov	r0, r3
 8009048:	3720      	adds	r7, #32
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
	...

08009050 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b088      	sub	sp, #32
 8009054:	af00      	add	r7, sp, #0
 8009056:	60f8      	str	r0, [r7, #12]
 8009058:	60b9      	str	r1, [r7, #8]
 800905a:	607a      	str	r2, [r7, #4]
 800905c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800905e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009060:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009068:	3b01      	subs	r3, #1
 800906a:	009b      	lsls	r3, r3, #2
 800906c:	4413      	add	r3, r2
 800906e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009070:	69bb      	ldr	r3, [r7, #24]
 8009072:	f023 0307 	bic.w	r3, r3, #7
 8009076:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009078:	69bb      	ldr	r3, [r7, #24]
 800907a:	f003 0307 	and.w	r3, r3, #7
 800907e:	2b00      	cmp	r3, #0
 8009080:	d00a      	beq.n	8009098 <prvInitialiseNewTask+0x48>
	__asm volatile
 8009082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009086:	f383 8811 	msr	BASEPRI, r3
 800908a:	f3bf 8f6f 	isb	sy
 800908e:	f3bf 8f4f 	dsb	sy
 8009092:	617b      	str	r3, [r7, #20]
}
 8009094:	bf00      	nop
 8009096:	e7fe      	b.n	8009096 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d01f      	beq.n	80090de <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800909e:	2300      	movs	r3, #0
 80090a0:	61fb      	str	r3, [r7, #28]
 80090a2:	e012      	b.n	80090ca <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80090a4:	68ba      	ldr	r2, [r7, #8]
 80090a6:	69fb      	ldr	r3, [r7, #28]
 80090a8:	4413      	add	r3, r2
 80090aa:	7819      	ldrb	r1, [r3, #0]
 80090ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090ae:	69fb      	ldr	r3, [r7, #28]
 80090b0:	4413      	add	r3, r2
 80090b2:	3334      	adds	r3, #52	; 0x34
 80090b4:	460a      	mov	r2, r1
 80090b6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80090b8:	68ba      	ldr	r2, [r7, #8]
 80090ba:	69fb      	ldr	r3, [r7, #28]
 80090bc:	4413      	add	r3, r2
 80090be:	781b      	ldrb	r3, [r3, #0]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d006      	beq.n	80090d2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80090c4:	69fb      	ldr	r3, [r7, #28]
 80090c6:	3301      	adds	r3, #1
 80090c8:	61fb      	str	r3, [r7, #28]
 80090ca:	69fb      	ldr	r3, [r7, #28]
 80090cc:	2b0f      	cmp	r3, #15
 80090ce:	d9e9      	bls.n	80090a4 <prvInitialiseNewTask+0x54>
 80090d0:	e000      	b.n	80090d4 <prvInitialiseNewTask+0x84>
			{
				break;
 80090d2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80090d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d6:	2200      	movs	r2, #0
 80090d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80090dc:	e003      	b.n	80090e6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80090de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e0:	2200      	movs	r2, #0
 80090e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80090e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e8:	2b06      	cmp	r3, #6
 80090ea:	d901      	bls.n	80090f0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80090ec:	2306      	movs	r3, #6
 80090ee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80090f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090f4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80090f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090fa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80090fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090fe:	2200      	movs	r2, #0
 8009100:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009104:	3304      	adds	r3, #4
 8009106:	4618      	mov	r0, r3
 8009108:	f7ff fe6b 	bl	8008de2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800910c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800910e:	3318      	adds	r3, #24
 8009110:	4618      	mov	r0, r3
 8009112:	f7ff fe66 	bl	8008de2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009118:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800911a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800911c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800911e:	f1c3 0207 	rsb	r2, r3, #7
 8009122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009124:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800912a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800912c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800912e:	2200      	movs	r2, #0
 8009130:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009136:	2200      	movs	r2, #0
 8009138:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800913c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800913e:	334c      	adds	r3, #76	; 0x4c
 8009140:	2260      	movs	r2, #96	; 0x60
 8009142:	2100      	movs	r1, #0
 8009144:	4618      	mov	r0, r3
 8009146:	f001 fac6 	bl	800a6d6 <memset>
 800914a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800914c:	4a0c      	ldr	r2, [pc, #48]	; (8009180 <prvInitialiseNewTask+0x130>)
 800914e:	651a      	str	r2, [r3, #80]	; 0x50
 8009150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009152:	4a0c      	ldr	r2, [pc, #48]	; (8009184 <prvInitialiseNewTask+0x134>)
 8009154:	655a      	str	r2, [r3, #84]	; 0x54
 8009156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009158:	4a0b      	ldr	r2, [pc, #44]	; (8009188 <prvInitialiseNewTask+0x138>)
 800915a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800915c:	683a      	ldr	r2, [r7, #0]
 800915e:	68f9      	ldr	r1, [r7, #12]
 8009160:	69b8      	ldr	r0, [r7, #24]
 8009162:	f000 fd89 	bl	8009c78 <pxPortInitialiseStack>
 8009166:	4602      	mov	r2, r0
 8009168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800916c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800916e:	2b00      	cmp	r3, #0
 8009170:	d002      	beq.n	8009178 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009174:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009176:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009178:	bf00      	nop
 800917a:	3720      	adds	r7, #32
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}
 8009180:	0800dd14 	.word	0x0800dd14
 8009184:	0800dd34 	.word	0x0800dd34
 8009188:	0800dcf4 	.word	0x0800dcf4

0800918c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b082      	sub	sp, #8
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009194:	f000 fe9e 	bl	8009ed4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009198:	4b2a      	ldr	r3, [pc, #168]	; (8009244 <prvAddNewTaskToReadyList+0xb8>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	3301      	adds	r3, #1
 800919e:	4a29      	ldr	r2, [pc, #164]	; (8009244 <prvAddNewTaskToReadyList+0xb8>)
 80091a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80091a2:	4b29      	ldr	r3, [pc, #164]	; (8009248 <prvAddNewTaskToReadyList+0xbc>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d109      	bne.n	80091be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80091aa:	4a27      	ldr	r2, [pc, #156]	; (8009248 <prvAddNewTaskToReadyList+0xbc>)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80091b0:	4b24      	ldr	r3, [pc, #144]	; (8009244 <prvAddNewTaskToReadyList+0xb8>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	d110      	bne.n	80091da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80091b8:	f000 fbea 	bl	8009990 <prvInitialiseTaskLists>
 80091bc:	e00d      	b.n	80091da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80091be:	4b23      	ldr	r3, [pc, #140]	; (800924c <prvAddNewTaskToReadyList+0xc0>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d109      	bne.n	80091da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80091c6:	4b20      	ldr	r3, [pc, #128]	; (8009248 <prvAddNewTaskToReadyList+0xbc>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d802      	bhi.n	80091da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80091d4:	4a1c      	ldr	r2, [pc, #112]	; (8009248 <prvAddNewTaskToReadyList+0xbc>)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80091da:	4b1d      	ldr	r3, [pc, #116]	; (8009250 <prvAddNewTaskToReadyList+0xc4>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	3301      	adds	r3, #1
 80091e0:	4a1b      	ldr	r2, [pc, #108]	; (8009250 <prvAddNewTaskToReadyList+0xc4>)
 80091e2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e8:	2201      	movs	r2, #1
 80091ea:	409a      	lsls	r2, r3
 80091ec:	4b19      	ldr	r3, [pc, #100]	; (8009254 <prvAddNewTaskToReadyList+0xc8>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4313      	orrs	r3, r2
 80091f2:	4a18      	ldr	r2, [pc, #96]	; (8009254 <prvAddNewTaskToReadyList+0xc8>)
 80091f4:	6013      	str	r3, [r2, #0]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091fa:	4613      	mov	r3, r2
 80091fc:	009b      	lsls	r3, r3, #2
 80091fe:	4413      	add	r3, r2
 8009200:	009b      	lsls	r3, r3, #2
 8009202:	4a15      	ldr	r2, [pc, #84]	; (8009258 <prvAddNewTaskToReadyList+0xcc>)
 8009204:	441a      	add	r2, r3
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	3304      	adds	r3, #4
 800920a:	4619      	mov	r1, r3
 800920c:	4610      	mov	r0, r2
 800920e:	f7ff fdf5 	bl	8008dfc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009212:	f000 fe8f 	bl	8009f34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009216:	4b0d      	ldr	r3, [pc, #52]	; (800924c <prvAddNewTaskToReadyList+0xc0>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d00e      	beq.n	800923c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800921e:	4b0a      	ldr	r3, [pc, #40]	; (8009248 <prvAddNewTaskToReadyList+0xbc>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009228:	429a      	cmp	r2, r3
 800922a:	d207      	bcs.n	800923c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800922c:	4b0b      	ldr	r3, [pc, #44]	; (800925c <prvAddNewTaskToReadyList+0xd0>)
 800922e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009232:	601a      	str	r2, [r3, #0]
 8009234:	f3bf 8f4f 	dsb	sy
 8009238:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800923c:	bf00      	nop
 800923e:	3708      	adds	r7, #8
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}
 8009244:	20000ca4 	.word	0x20000ca4
 8009248:	20000ba4 	.word	0x20000ba4
 800924c:	20000cb0 	.word	0x20000cb0
 8009250:	20000cc0 	.word	0x20000cc0
 8009254:	20000cac 	.word	0x20000cac
 8009258:	20000ba8 	.word	0x20000ba8
 800925c:	e000ed04 	.word	0xe000ed04

08009260 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8009260:	b580      	push	{r7, lr}
 8009262:	b084      	sub	sp, #16
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8009268:	f000 fe34 	bl	8009ed4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d102      	bne.n	8009278 <vTaskDelete+0x18>
 8009272:	4b39      	ldr	r3, [pc, #228]	; (8009358 <vTaskDelete+0xf8>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	e000      	b.n	800927a <vTaskDelete+0x1a>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	3304      	adds	r3, #4
 8009280:	4618      	mov	r0, r3
 8009282:	f7ff fe18 	bl	8008eb6 <uxListRemove>
 8009286:	4603      	mov	r3, r0
 8009288:	2b00      	cmp	r3, #0
 800928a:	d115      	bne.n	80092b8 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009290:	4932      	ldr	r1, [pc, #200]	; (800935c <vTaskDelete+0xfc>)
 8009292:	4613      	mov	r3, r2
 8009294:	009b      	lsls	r3, r3, #2
 8009296:	4413      	add	r3, r2
 8009298:	009b      	lsls	r3, r3, #2
 800929a:	440b      	add	r3, r1
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d10a      	bne.n	80092b8 <vTaskDelete+0x58>
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a6:	2201      	movs	r2, #1
 80092a8:	fa02 f303 	lsl.w	r3, r2, r3
 80092ac:	43da      	mvns	r2, r3
 80092ae:	4b2c      	ldr	r3, [pc, #176]	; (8009360 <vTaskDelete+0x100>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	4013      	ands	r3, r2
 80092b4:	4a2a      	ldr	r2, [pc, #168]	; (8009360 <vTaskDelete+0x100>)
 80092b6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d004      	beq.n	80092ca <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	3318      	adds	r3, #24
 80092c4:	4618      	mov	r0, r3
 80092c6:	f7ff fdf6 	bl	8008eb6 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80092ca:	4b26      	ldr	r3, [pc, #152]	; (8009364 <vTaskDelete+0x104>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	3301      	adds	r3, #1
 80092d0:	4a24      	ldr	r2, [pc, #144]	; (8009364 <vTaskDelete+0x104>)
 80092d2:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80092d4:	4b20      	ldr	r3, [pc, #128]	; (8009358 <vTaskDelete+0xf8>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	68fa      	ldr	r2, [r7, #12]
 80092da:	429a      	cmp	r2, r3
 80092dc:	d10b      	bne.n	80092f6 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	3304      	adds	r3, #4
 80092e2:	4619      	mov	r1, r3
 80092e4:	4820      	ldr	r0, [pc, #128]	; (8009368 <vTaskDelete+0x108>)
 80092e6:	f7ff fd89 	bl	8008dfc <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80092ea:	4b20      	ldr	r3, [pc, #128]	; (800936c <vTaskDelete+0x10c>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	3301      	adds	r3, #1
 80092f0:	4a1e      	ldr	r2, [pc, #120]	; (800936c <vTaskDelete+0x10c>)
 80092f2:	6013      	str	r3, [r2, #0]
 80092f4:	e009      	b.n	800930a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80092f6:	4b1e      	ldr	r3, [pc, #120]	; (8009370 <vTaskDelete+0x110>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	3b01      	subs	r3, #1
 80092fc:	4a1c      	ldr	r2, [pc, #112]	; (8009370 <vTaskDelete+0x110>)
 80092fe:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8009300:	68f8      	ldr	r0, [r7, #12]
 8009302:	f000 fbb3 	bl	8009a6c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8009306:	f000 fbe5 	bl	8009ad4 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800930a:	f000 fe13 	bl	8009f34 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800930e:	4b19      	ldr	r3, [pc, #100]	; (8009374 <vTaskDelete+0x114>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d01b      	beq.n	800934e <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 8009316:	4b10      	ldr	r3, [pc, #64]	; (8009358 <vTaskDelete+0xf8>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	68fa      	ldr	r2, [r7, #12]
 800931c:	429a      	cmp	r2, r3
 800931e:	d116      	bne.n	800934e <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8009320:	4b15      	ldr	r3, [pc, #84]	; (8009378 <vTaskDelete+0x118>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d00a      	beq.n	800933e <vTaskDelete+0xde>
	__asm volatile
 8009328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800932c:	f383 8811 	msr	BASEPRI, r3
 8009330:	f3bf 8f6f 	isb	sy
 8009334:	f3bf 8f4f 	dsb	sy
 8009338:	60bb      	str	r3, [r7, #8]
}
 800933a:	bf00      	nop
 800933c:	e7fe      	b.n	800933c <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 800933e:	4b0f      	ldr	r3, [pc, #60]	; (800937c <vTaskDelete+0x11c>)
 8009340:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009344:	601a      	str	r2, [r3, #0]
 8009346:	f3bf 8f4f 	dsb	sy
 800934a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800934e:	bf00      	nop
 8009350:	3710      	adds	r7, #16
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop
 8009358:	20000ba4 	.word	0x20000ba4
 800935c:	20000ba8 	.word	0x20000ba8
 8009360:	20000cac 	.word	0x20000cac
 8009364:	20000cc0 	.word	0x20000cc0
 8009368:	20000c78 	.word	0x20000c78
 800936c:	20000c8c 	.word	0x20000c8c
 8009370:	20000ca4 	.word	0x20000ca4
 8009374:	20000cb0 	.word	0x20000cb0
 8009378:	20000ccc 	.word	0x20000ccc
 800937c:	e000ed04 	.word	0xe000ed04

08009380 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8009380:	b580      	push	{r7, lr}
 8009382:	b08a      	sub	sp, #40	; 0x28
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800938a:	2300      	movs	r3, #0
 800938c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d10a      	bne.n	80093aa <vTaskDelayUntil+0x2a>
	__asm volatile
 8009394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009398:	f383 8811 	msr	BASEPRI, r3
 800939c:	f3bf 8f6f 	isb	sy
 80093a0:	f3bf 8f4f 	dsb	sy
 80093a4:	617b      	str	r3, [r7, #20]
}
 80093a6:	bf00      	nop
 80093a8:	e7fe      	b.n	80093a8 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d10a      	bne.n	80093c6 <vTaskDelayUntil+0x46>
	__asm volatile
 80093b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b4:	f383 8811 	msr	BASEPRI, r3
 80093b8:	f3bf 8f6f 	isb	sy
 80093bc:	f3bf 8f4f 	dsb	sy
 80093c0:	613b      	str	r3, [r7, #16]
}
 80093c2:	bf00      	nop
 80093c4:	e7fe      	b.n	80093c4 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80093c6:	4b2a      	ldr	r3, [pc, #168]	; (8009470 <vTaskDelayUntil+0xf0>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d00a      	beq.n	80093e4 <vTaskDelayUntil+0x64>
	__asm volatile
 80093ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093d2:	f383 8811 	msr	BASEPRI, r3
 80093d6:	f3bf 8f6f 	isb	sy
 80093da:	f3bf 8f4f 	dsb	sy
 80093de:	60fb      	str	r3, [r7, #12]
}
 80093e0:	bf00      	nop
 80093e2:	e7fe      	b.n	80093e2 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 80093e4:	f000 f8e8 	bl	80095b8 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80093e8:	4b22      	ldr	r3, [pc, #136]	; (8009474 <vTaskDelayUntil+0xf4>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	683a      	ldr	r2, [r7, #0]
 80093f4:	4413      	add	r3, r2
 80093f6:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	6a3a      	ldr	r2, [r7, #32]
 80093fe:	429a      	cmp	r2, r3
 8009400:	d20b      	bcs.n	800941a <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	69fa      	ldr	r2, [r7, #28]
 8009408:	429a      	cmp	r2, r3
 800940a:	d211      	bcs.n	8009430 <vTaskDelayUntil+0xb0>
 800940c:	69fa      	ldr	r2, [r7, #28]
 800940e:	6a3b      	ldr	r3, [r7, #32]
 8009410:	429a      	cmp	r2, r3
 8009412:	d90d      	bls.n	8009430 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8009414:	2301      	movs	r3, #1
 8009416:	627b      	str	r3, [r7, #36]	; 0x24
 8009418:	e00a      	b.n	8009430 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	69fa      	ldr	r2, [r7, #28]
 8009420:	429a      	cmp	r2, r3
 8009422:	d303      	bcc.n	800942c <vTaskDelayUntil+0xac>
 8009424:	69fa      	ldr	r2, [r7, #28]
 8009426:	6a3b      	ldr	r3, [r7, #32]
 8009428:	429a      	cmp	r2, r3
 800942a:	d901      	bls.n	8009430 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800942c:	2301      	movs	r3, #1
 800942e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	69fa      	ldr	r2, [r7, #28]
 8009434:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8009436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009438:	2b00      	cmp	r3, #0
 800943a:	d006      	beq.n	800944a <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800943c:	69fa      	ldr	r2, [r7, #28]
 800943e:	6a3b      	ldr	r3, [r7, #32]
 8009440:	1ad3      	subs	r3, r2, r3
 8009442:	2100      	movs	r1, #0
 8009444:	4618      	mov	r0, r3
 8009446:	f000 fbb1 	bl	8009bac <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800944a:	f000 f8c3 	bl	80095d4 <xTaskResumeAll>
 800944e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009450:	69bb      	ldr	r3, [r7, #24]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d107      	bne.n	8009466 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8009456:	4b08      	ldr	r3, [pc, #32]	; (8009478 <vTaskDelayUntil+0xf8>)
 8009458:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800945c:	601a      	str	r2, [r3, #0]
 800945e:	f3bf 8f4f 	dsb	sy
 8009462:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009466:	bf00      	nop
 8009468:	3728      	adds	r7, #40	; 0x28
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}
 800946e:	bf00      	nop
 8009470:	20000ccc 	.word	0x20000ccc
 8009474:	20000ca8 	.word	0x20000ca8
 8009478:	e000ed04 	.word	0xe000ed04

0800947c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800947c:	b580      	push	{r7, lr}
 800947e:	b084      	sub	sp, #16
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009484:	2300      	movs	r3, #0
 8009486:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d017      	beq.n	80094be <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800948e:	4b13      	ldr	r3, [pc, #76]	; (80094dc <vTaskDelay+0x60>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d00a      	beq.n	80094ac <vTaskDelay+0x30>
	__asm volatile
 8009496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800949a:	f383 8811 	msr	BASEPRI, r3
 800949e:	f3bf 8f6f 	isb	sy
 80094a2:	f3bf 8f4f 	dsb	sy
 80094a6:	60bb      	str	r3, [r7, #8]
}
 80094a8:	bf00      	nop
 80094aa:	e7fe      	b.n	80094aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80094ac:	f000 f884 	bl	80095b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80094b0:	2100      	movs	r1, #0
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 fb7a 	bl	8009bac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80094b8:	f000 f88c 	bl	80095d4 <xTaskResumeAll>
 80094bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d107      	bne.n	80094d4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80094c4:	4b06      	ldr	r3, [pc, #24]	; (80094e0 <vTaskDelay+0x64>)
 80094c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094ca:	601a      	str	r2, [r3, #0]
 80094cc:	f3bf 8f4f 	dsb	sy
 80094d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80094d4:	bf00      	nop
 80094d6:	3710      	adds	r7, #16
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}
 80094dc:	20000ccc 	.word	0x20000ccc
 80094e0:	e000ed04 	.word	0xe000ed04

080094e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b08a      	sub	sp, #40	; 0x28
 80094e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80094ea:	2300      	movs	r3, #0
 80094ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80094ee:	2300      	movs	r3, #0
 80094f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80094f2:	463a      	mov	r2, r7
 80094f4:	1d39      	adds	r1, r7, #4
 80094f6:	f107 0308 	add.w	r3, r7, #8
 80094fa:	4618      	mov	r0, r3
 80094fc:	f7f8 f93a 	bl	8001774 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009500:	6839      	ldr	r1, [r7, #0]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	68ba      	ldr	r2, [r7, #8]
 8009506:	9202      	str	r2, [sp, #8]
 8009508:	9301      	str	r3, [sp, #4]
 800950a:	2300      	movs	r3, #0
 800950c:	9300      	str	r3, [sp, #0]
 800950e:	2300      	movs	r3, #0
 8009510:	460a      	mov	r2, r1
 8009512:	4921      	ldr	r1, [pc, #132]	; (8009598 <vTaskStartScheduler+0xb4>)
 8009514:	4821      	ldr	r0, [pc, #132]	; (800959c <vTaskStartScheduler+0xb8>)
 8009516:	f7ff fcf8 	bl	8008f0a <xTaskCreateStatic>
 800951a:	4603      	mov	r3, r0
 800951c:	4a20      	ldr	r2, [pc, #128]	; (80095a0 <vTaskStartScheduler+0xbc>)
 800951e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009520:	4b1f      	ldr	r3, [pc, #124]	; (80095a0 <vTaskStartScheduler+0xbc>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d002      	beq.n	800952e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009528:	2301      	movs	r3, #1
 800952a:	617b      	str	r3, [r7, #20]
 800952c:	e001      	b.n	8009532 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800952e:	2300      	movs	r3, #0
 8009530:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	2b01      	cmp	r3, #1
 8009536:	d11b      	bne.n	8009570 <vTaskStartScheduler+0x8c>
	__asm volatile
 8009538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800953c:	f383 8811 	msr	BASEPRI, r3
 8009540:	f3bf 8f6f 	isb	sy
 8009544:	f3bf 8f4f 	dsb	sy
 8009548:	613b      	str	r3, [r7, #16]
}
 800954a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800954c:	4b15      	ldr	r3, [pc, #84]	; (80095a4 <vTaskStartScheduler+0xc0>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	334c      	adds	r3, #76	; 0x4c
 8009552:	4a15      	ldr	r2, [pc, #84]	; (80095a8 <vTaskStartScheduler+0xc4>)
 8009554:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009556:	4b15      	ldr	r3, [pc, #84]	; (80095ac <vTaskStartScheduler+0xc8>)
 8009558:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800955c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800955e:	4b14      	ldr	r3, [pc, #80]	; (80095b0 <vTaskStartScheduler+0xcc>)
 8009560:	2201      	movs	r2, #1
 8009562:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009564:	4b13      	ldr	r3, [pc, #76]	; (80095b4 <vTaskStartScheduler+0xd0>)
 8009566:	2200      	movs	r2, #0
 8009568:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800956a:	f000 fc11 	bl	8009d90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800956e:	e00e      	b.n	800958e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009576:	d10a      	bne.n	800958e <vTaskStartScheduler+0xaa>
	__asm volatile
 8009578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800957c:	f383 8811 	msr	BASEPRI, r3
 8009580:	f3bf 8f6f 	isb	sy
 8009584:	f3bf 8f4f 	dsb	sy
 8009588:	60fb      	str	r3, [r7, #12]
}
 800958a:	bf00      	nop
 800958c:	e7fe      	b.n	800958c <vTaskStartScheduler+0xa8>
}
 800958e:	bf00      	nop
 8009590:	3718      	adds	r7, #24
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}
 8009596:	bf00      	nop
 8009598:	0800dcd4 	.word	0x0800dcd4
 800959c:	08009961 	.word	0x08009961
 80095a0:	20000cc8 	.word	0x20000cc8
 80095a4:	20000ba4 	.word	0x20000ba4
 80095a8:	20000010 	.word	0x20000010
 80095ac:	20000cc4 	.word	0x20000cc4
 80095b0:	20000cb0 	.word	0x20000cb0
 80095b4:	20000ca8 	.word	0x20000ca8

080095b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80095b8:	b480      	push	{r7}
 80095ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80095bc:	4b04      	ldr	r3, [pc, #16]	; (80095d0 <vTaskSuspendAll+0x18>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	3301      	adds	r3, #1
 80095c2:	4a03      	ldr	r2, [pc, #12]	; (80095d0 <vTaskSuspendAll+0x18>)
 80095c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80095c6:	bf00      	nop
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr
 80095d0:	20000ccc 	.word	0x20000ccc

080095d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80095da:	2300      	movs	r3, #0
 80095dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80095de:	2300      	movs	r3, #0
 80095e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80095e2:	4b41      	ldr	r3, [pc, #260]	; (80096e8 <xTaskResumeAll+0x114>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d10a      	bne.n	8009600 <xTaskResumeAll+0x2c>
	__asm volatile
 80095ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ee:	f383 8811 	msr	BASEPRI, r3
 80095f2:	f3bf 8f6f 	isb	sy
 80095f6:	f3bf 8f4f 	dsb	sy
 80095fa:	603b      	str	r3, [r7, #0]
}
 80095fc:	bf00      	nop
 80095fe:	e7fe      	b.n	80095fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009600:	f000 fc68 	bl	8009ed4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009604:	4b38      	ldr	r3, [pc, #224]	; (80096e8 <xTaskResumeAll+0x114>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	3b01      	subs	r3, #1
 800960a:	4a37      	ldr	r2, [pc, #220]	; (80096e8 <xTaskResumeAll+0x114>)
 800960c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800960e:	4b36      	ldr	r3, [pc, #216]	; (80096e8 <xTaskResumeAll+0x114>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d161      	bne.n	80096da <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009616:	4b35      	ldr	r3, [pc, #212]	; (80096ec <xTaskResumeAll+0x118>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d05d      	beq.n	80096da <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800961e:	e02e      	b.n	800967e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009620:	4b33      	ldr	r3, [pc, #204]	; (80096f0 <xTaskResumeAll+0x11c>)
 8009622:	68db      	ldr	r3, [r3, #12]
 8009624:	68db      	ldr	r3, [r3, #12]
 8009626:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	3318      	adds	r3, #24
 800962c:	4618      	mov	r0, r3
 800962e:	f7ff fc42 	bl	8008eb6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	3304      	adds	r3, #4
 8009636:	4618      	mov	r0, r3
 8009638:	f7ff fc3d 	bl	8008eb6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009640:	2201      	movs	r2, #1
 8009642:	409a      	lsls	r2, r3
 8009644:	4b2b      	ldr	r3, [pc, #172]	; (80096f4 <xTaskResumeAll+0x120>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4313      	orrs	r3, r2
 800964a:	4a2a      	ldr	r2, [pc, #168]	; (80096f4 <xTaskResumeAll+0x120>)
 800964c:	6013      	str	r3, [r2, #0]
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009652:	4613      	mov	r3, r2
 8009654:	009b      	lsls	r3, r3, #2
 8009656:	4413      	add	r3, r2
 8009658:	009b      	lsls	r3, r3, #2
 800965a:	4a27      	ldr	r2, [pc, #156]	; (80096f8 <xTaskResumeAll+0x124>)
 800965c:	441a      	add	r2, r3
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	3304      	adds	r3, #4
 8009662:	4619      	mov	r1, r3
 8009664:	4610      	mov	r0, r2
 8009666:	f7ff fbc9 	bl	8008dfc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800966e:	4b23      	ldr	r3, [pc, #140]	; (80096fc <xTaskResumeAll+0x128>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009674:	429a      	cmp	r2, r3
 8009676:	d302      	bcc.n	800967e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009678:	4b21      	ldr	r3, [pc, #132]	; (8009700 <xTaskResumeAll+0x12c>)
 800967a:	2201      	movs	r2, #1
 800967c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800967e:	4b1c      	ldr	r3, [pc, #112]	; (80096f0 <xTaskResumeAll+0x11c>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d1cc      	bne.n	8009620 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d001      	beq.n	8009690 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800968c:	f000 fa22 	bl	8009ad4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009690:	4b1c      	ldr	r3, [pc, #112]	; (8009704 <xTaskResumeAll+0x130>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d010      	beq.n	80096be <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800969c:	f000 f846 	bl	800972c <xTaskIncrementTick>
 80096a0:	4603      	mov	r3, r0
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d002      	beq.n	80096ac <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80096a6:	4b16      	ldr	r3, [pc, #88]	; (8009700 <xTaskResumeAll+0x12c>)
 80096a8:	2201      	movs	r2, #1
 80096aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	3b01      	subs	r3, #1
 80096b0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d1f1      	bne.n	800969c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80096b8:	4b12      	ldr	r3, [pc, #72]	; (8009704 <xTaskResumeAll+0x130>)
 80096ba:	2200      	movs	r2, #0
 80096bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80096be:	4b10      	ldr	r3, [pc, #64]	; (8009700 <xTaskResumeAll+0x12c>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d009      	beq.n	80096da <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80096c6:	2301      	movs	r3, #1
 80096c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80096ca:	4b0f      	ldr	r3, [pc, #60]	; (8009708 <xTaskResumeAll+0x134>)
 80096cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096d0:	601a      	str	r2, [r3, #0]
 80096d2:	f3bf 8f4f 	dsb	sy
 80096d6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80096da:	f000 fc2b 	bl	8009f34 <vPortExitCritical>

	return xAlreadyYielded;
 80096de:	68bb      	ldr	r3, [r7, #8]
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3710      	adds	r7, #16
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}
 80096e8:	20000ccc 	.word	0x20000ccc
 80096ec:	20000ca4 	.word	0x20000ca4
 80096f0:	20000c64 	.word	0x20000c64
 80096f4:	20000cac 	.word	0x20000cac
 80096f8:	20000ba8 	.word	0x20000ba8
 80096fc:	20000ba4 	.word	0x20000ba4
 8009700:	20000cb8 	.word	0x20000cb8
 8009704:	20000cb4 	.word	0x20000cb4
 8009708:	e000ed04 	.word	0xe000ed04

0800970c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800970c:	b480      	push	{r7}
 800970e:	b083      	sub	sp, #12
 8009710:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009712:	4b05      	ldr	r3, [pc, #20]	; (8009728 <xTaskGetTickCount+0x1c>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009718:	687b      	ldr	r3, [r7, #4]
}
 800971a:	4618      	mov	r0, r3
 800971c:	370c      	adds	r7, #12
 800971e:	46bd      	mov	sp, r7
 8009720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009724:	4770      	bx	lr
 8009726:	bf00      	nop
 8009728:	20000ca8 	.word	0x20000ca8

0800972c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b086      	sub	sp, #24
 8009730:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009732:	2300      	movs	r3, #0
 8009734:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009736:	4b4e      	ldr	r3, [pc, #312]	; (8009870 <xTaskIncrementTick+0x144>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	2b00      	cmp	r3, #0
 800973c:	f040 808e 	bne.w	800985c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009740:	4b4c      	ldr	r3, [pc, #304]	; (8009874 <xTaskIncrementTick+0x148>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	3301      	adds	r3, #1
 8009746:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009748:	4a4a      	ldr	r2, [pc, #296]	; (8009874 <xTaskIncrementTick+0x148>)
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d120      	bne.n	8009796 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009754:	4b48      	ldr	r3, [pc, #288]	; (8009878 <xTaskIncrementTick+0x14c>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d00a      	beq.n	8009774 <xTaskIncrementTick+0x48>
	__asm volatile
 800975e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009762:	f383 8811 	msr	BASEPRI, r3
 8009766:	f3bf 8f6f 	isb	sy
 800976a:	f3bf 8f4f 	dsb	sy
 800976e:	603b      	str	r3, [r7, #0]
}
 8009770:	bf00      	nop
 8009772:	e7fe      	b.n	8009772 <xTaskIncrementTick+0x46>
 8009774:	4b40      	ldr	r3, [pc, #256]	; (8009878 <xTaskIncrementTick+0x14c>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	60fb      	str	r3, [r7, #12]
 800977a:	4b40      	ldr	r3, [pc, #256]	; (800987c <xTaskIncrementTick+0x150>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	4a3e      	ldr	r2, [pc, #248]	; (8009878 <xTaskIncrementTick+0x14c>)
 8009780:	6013      	str	r3, [r2, #0]
 8009782:	4a3e      	ldr	r2, [pc, #248]	; (800987c <xTaskIncrementTick+0x150>)
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	6013      	str	r3, [r2, #0]
 8009788:	4b3d      	ldr	r3, [pc, #244]	; (8009880 <xTaskIncrementTick+0x154>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	3301      	adds	r3, #1
 800978e:	4a3c      	ldr	r2, [pc, #240]	; (8009880 <xTaskIncrementTick+0x154>)
 8009790:	6013      	str	r3, [r2, #0]
 8009792:	f000 f99f 	bl	8009ad4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009796:	4b3b      	ldr	r3, [pc, #236]	; (8009884 <xTaskIncrementTick+0x158>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	693a      	ldr	r2, [r7, #16]
 800979c:	429a      	cmp	r2, r3
 800979e:	d348      	bcc.n	8009832 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097a0:	4b35      	ldr	r3, [pc, #212]	; (8009878 <xTaskIncrementTick+0x14c>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d104      	bne.n	80097b4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097aa:	4b36      	ldr	r3, [pc, #216]	; (8009884 <xTaskIncrementTick+0x158>)
 80097ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80097b0:	601a      	str	r2, [r3, #0]
					break;
 80097b2:	e03e      	b.n	8009832 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097b4:	4b30      	ldr	r3, [pc, #192]	; (8009878 <xTaskIncrementTick+0x14c>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	68db      	ldr	r3, [r3, #12]
 80097ba:	68db      	ldr	r3, [r3, #12]
 80097bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	685b      	ldr	r3, [r3, #4]
 80097c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80097c4:	693a      	ldr	r2, [r7, #16]
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	429a      	cmp	r2, r3
 80097ca:	d203      	bcs.n	80097d4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80097cc:	4a2d      	ldr	r2, [pc, #180]	; (8009884 <xTaskIncrementTick+0x158>)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80097d2:	e02e      	b.n	8009832 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	3304      	adds	r3, #4
 80097d8:	4618      	mov	r0, r3
 80097da:	f7ff fb6c 	bl	8008eb6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d004      	beq.n	80097f0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	3318      	adds	r3, #24
 80097ea:	4618      	mov	r0, r3
 80097ec:	f7ff fb63 	bl	8008eb6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097f4:	2201      	movs	r2, #1
 80097f6:	409a      	lsls	r2, r3
 80097f8:	4b23      	ldr	r3, [pc, #140]	; (8009888 <xTaskIncrementTick+0x15c>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	4313      	orrs	r3, r2
 80097fe:	4a22      	ldr	r2, [pc, #136]	; (8009888 <xTaskIncrementTick+0x15c>)
 8009800:	6013      	str	r3, [r2, #0]
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009806:	4613      	mov	r3, r2
 8009808:	009b      	lsls	r3, r3, #2
 800980a:	4413      	add	r3, r2
 800980c:	009b      	lsls	r3, r3, #2
 800980e:	4a1f      	ldr	r2, [pc, #124]	; (800988c <xTaskIncrementTick+0x160>)
 8009810:	441a      	add	r2, r3
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	3304      	adds	r3, #4
 8009816:	4619      	mov	r1, r3
 8009818:	4610      	mov	r0, r2
 800981a:	f7ff faef 	bl	8008dfc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009822:	4b1b      	ldr	r3, [pc, #108]	; (8009890 <xTaskIncrementTick+0x164>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009828:	429a      	cmp	r2, r3
 800982a:	d3b9      	bcc.n	80097a0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800982c:	2301      	movs	r3, #1
 800982e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009830:	e7b6      	b.n	80097a0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009832:	4b17      	ldr	r3, [pc, #92]	; (8009890 <xTaskIncrementTick+0x164>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009838:	4914      	ldr	r1, [pc, #80]	; (800988c <xTaskIncrementTick+0x160>)
 800983a:	4613      	mov	r3, r2
 800983c:	009b      	lsls	r3, r3, #2
 800983e:	4413      	add	r3, r2
 8009840:	009b      	lsls	r3, r3, #2
 8009842:	440b      	add	r3, r1
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	2b01      	cmp	r3, #1
 8009848:	d901      	bls.n	800984e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800984a:	2301      	movs	r3, #1
 800984c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800984e:	4b11      	ldr	r3, [pc, #68]	; (8009894 <xTaskIncrementTick+0x168>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d007      	beq.n	8009866 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8009856:	2301      	movs	r3, #1
 8009858:	617b      	str	r3, [r7, #20]
 800985a:	e004      	b.n	8009866 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800985c:	4b0e      	ldr	r3, [pc, #56]	; (8009898 <xTaskIncrementTick+0x16c>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	3301      	adds	r3, #1
 8009862:	4a0d      	ldr	r2, [pc, #52]	; (8009898 <xTaskIncrementTick+0x16c>)
 8009864:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009866:	697b      	ldr	r3, [r7, #20]
}
 8009868:	4618      	mov	r0, r3
 800986a:	3718      	adds	r7, #24
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}
 8009870:	20000ccc 	.word	0x20000ccc
 8009874:	20000ca8 	.word	0x20000ca8
 8009878:	20000c5c 	.word	0x20000c5c
 800987c:	20000c60 	.word	0x20000c60
 8009880:	20000cbc 	.word	0x20000cbc
 8009884:	20000cc4 	.word	0x20000cc4
 8009888:	20000cac 	.word	0x20000cac
 800988c:	20000ba8 	.word	0x20000ba8
 8009890:	20000ba4 	.word	0x20000ba4
 8009894:	20000cb8 	.word	0x20000cb8
 8009898:	20000cb4 	.word	0x20000cb4

0800989c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800989c:	b480      	push	{r7}
 800989e:	b087      	sub	sp, #28
 80098a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80098a2:	4b29      	ldr	r3, [pc, #164]	; (8009948 <vTaskSwitchContext+0xac>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d003      	beq.n	80098b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80098aa:	4b28      	ldr	r3, [pc, #160]	; (800994c <vTaskSwitchContext+0xb0>)
 80098ac:	2201      	movs	r2, #1
 80098ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80098b0:	e044      	b.n	800993c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80098b2:	4b26      	ldr	r3, [pc, #152]	; (800994c <vTaskSwitchContext+0xb0>)
 80098b4:	2200      	movs	r2, #0
 80098b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098b8:	4b25      	ldr	r3, [pc, #148]	; (8009950 <vTaskSwitchContext+0xb4>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	fab3 f383 	clz	r3, r3
 80098c4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80098c6:	7afb      	ldrb	r3, [r7, #11]
 80098c8:	f1c3 031f 	rsb	r3, r3, #31
 80098cc:	617b      	str	r3, [r7, #20]
 80098ce:	4921      	ldr	r1, [pc, #132]	; (8009954 <vTaskSwitchContext+0xb8>)
 80098d0:	697a      	ldr	r2, [r7, #20]
 80098d2:	4613      	mov	r3, r2
 80098d4:	009b      	lsls	r3, r3, #2
 80098d6:	4413      	add	r3, r2
 80098d8:	009b      	lsls	r3, r3, #2
 80098da:	440b      	add	r3, r1
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d10a      	bne.n	80098f8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80098e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e6:	f383 8811 	msr	BASEPRI, r3
 80098ea:	f3bf 8f6f 	isb	sy
 80098ee:	f3bf 8f4f 	dsb	sy
 80098f2:	607b      	str	r3, [r7, #4]
}
 80098f4:	bf00      	nop
 80098f6:	e7fe      	b.n	80098f6 <vTaskSwitchContext+0x5a>
 80098f8:	697a      	ldr	r2, [r7, #20]
 80098fa:	4613      	mov	r3, r2
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	4413      	add	r3, r2
 8009900:	009b      	lsls	r3, r3, #2
 8009902:	4a14      	ldr	r2, [pc, #80]	; (8009954 <vTaskSwitchContext+0xb8>)
 8009904:	4413      	add	r3, r2
 8009906:	613b      	str	r3, [r7, #16]
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	685b      	ldr	r3, [r3, #4]
 800990c:	685a      	ldr	r2, [r3, #4]
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	605a      	str	r2, [r3, #4]
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	685a      	ldr	r2, [r3, #4]
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	3308      	adds	r3, #8
 800991a:	429a      	cmp	r2, r3
 800991c:	d104      	bne.n	8009928 <vTaskSwitchContext+0x8c>
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	685b      	ldr	r3, [r3, #4]
 8009922:	685a      	ldr	r2, [r3, #4]
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	605a      	str	r2, [r3, #4]
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	685b      	ldr	r3, [r3, #4]
 800992c:	68db      	ldr	r3, [r3, #12]
 800992e:	4a0a      	ldr	r2, [pc, #40]	; (8009958 <vTaskSwitchContext+0xbc>)
 8009930:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009932:	4b09      	ldr	r3, [pc, #36]	; (8009958 <vTaskSwitchContext+0xbc>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	334c      	adds	r3, #76	; 0x4c
 8009938:	4a08      	ldr	r2, [pc, #32]	; (800995c <vTaskSwitchContext+0xc0>)
 800993a:	6013      	str	r3, [r2, #0]
}
 800993c:	bf00      	nop
 800993e:	371c      	adds	r7, #28
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr
 8009948:	20000ccc 	.word	0x20000ccc
 800994c:	20000cb8 	.word	0x20000cb8
 8009950:	20000cac 	.word	0x20000cac
 8009954:	20000ba8 	.word	0x20000ba8
 8009958:	20000ba4 	.word	0x20000ba4
 800995c:	20000010 	.word	0x20000010

08009960 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b082      	sub	sp, #8
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009968:	f000 f852 	bl	8009a10 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800996c:	4b06      	ldr	r3, [pc, #24]	; (8009988 <prvIdleTask+0x28>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	2b01      	cmp	r3, #1
 8009972:	d9f9      	bls.n	8009968 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009974:	4b05      	ldr	r3, [pc, #20]	; (800998c <prvIdleTask+0x2c>)
 8009976:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800997a:	601a      	str	r2, [r3, #0]
 800997c:	f3bf 8f4f 	dsb	sy
 8009980:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009984:	e7f0      	b.n	8009968 <prvIdleTask+0x8>
 8009986:	bf00      	nop
 8009988:	20000ba8 	.word	0x20000ba8
 800998c:	e000ed04 	.word	0xe000ed04

08009990 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b082      	sub	sp, #8
 8009994:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009996:	2300      	movs	r3, #0
 8009998:	607b      	str	r3, [r7, #4]
 800999a:	e00c      	b.n	80099b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800999c:	687a      	ldr	r2, [r7, #4]
 800999e:	4613      	mov	r3, r2
 80099a0:	009b      	lsls	r3, r3, #2
 80099a2:	4413      	add	r3, r2
 80099a4:	009b      	lsls	r3, r3, #2
 80099a6:	4a12      	ldr	r2, [pc, #72]	; (80099f0 <prvInitialiseTaskLists+0x60>)
 80099a8:	4413      	add	r3, r2
 80099aa:	4618      	mov	r0, r3
 80099ac:	f7ff f9f9 	bl	8008da2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	3301      	adds	r3, #1
 80099b4:	607b      	str	r3, [r7, #4]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2b06      	cmp	r3, #6
 80099ba:	d9ef      	bls.n	800999c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80099bc:	480d      	ldr	r0, [pc, #52]	; (80099f4 <prvInitialiseTaskLists+0x64>)
 80099be:	f7ff f9f0 	bl	8008da2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80099c2:	480d      	ldr	r0, [pc, #52]	; (80099f8 <prvInitialiseTaskLists+0x68>)
 80099c4:	f7ff f9ed 	bl	8008da2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80099c8:	480c      	ldr	r0, [pc, #48]	; (80099fc <prvInitialiseTaskLists+0x6c>)
 80099ca:	f7ff f9ea 	bl	8008da2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80099ce:	480c      	ldr	r0, [pc, #48]	; (8009a00 <prvInitialiseTaskLists+0x70>)
 80099d0:	f7ff f9e7 	bl	8008da2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80099d4:	480b      	ldr	r0, [pc, #44]	; (8009a04 <prvInitialiseTaskLists+0x74>)
 80099d6:	f7ff f9e4 	bl	8008da2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80099da:	4b0b      	ldr	r3, [pc, #44]	; (8009a08 <prvInitialiseTaskLists+0x78>)
 80099dc:	4a05      	ldr	r2, [pc, #20]	; (80099f4 <prvInitialiseTaskLists+0x64>)
 80099de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80099e0:	4b0a      	ldr	r3, [pc, #40]	; (8009a0c <prvInitialiseTaskLists+0x7c>)
 80099e2:	4a05      	ldr	r2, [pc, #20]	; (80099f8 <prvInitialiseTaskLists+0x68>)
 80099e4:	601a      	str	r2, [r3, #0]
}
 80099e6:	bf00      	nop
 80099e8:	3708      	adds	r7, #8
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop
 80099f0:	20000ba8 	.word	0x20000ba8
 80099f4:	20000c34 	.word	0x20000c34
 80099f8:	20000c48 	.word	0x20000c48
 80099fc:	20000c64 	.word	0x20000c64
 8009a00:	20000c78 	.word	0x20000c78
 8009a04:	20000c90 	.word	0x20000c90
 8009a08:	20000c5c 	.word	0x20000c5c
 8009a0c:	20000c60 	.word	0x20000c60

08009a10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b082      	sub	sp, #8
 8009a14:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a16:	e019      	b.n	8009a4c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009a18:	f000 fa5c 	bl	8009ed4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a1c:	4b10      	ldr	r3, [pc, #64]	; (8009a60 <prvCheckTasksWaitingTermination+0x50>)
 8009a1e:	68db      	ldr	r3, [r3, #12]
 8009a20:	68db      	ldr	r3, [r3, #12]
 8009a22:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	3304      	adds	r3, #4
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f7ff fa44 	bl	8008eb6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009a2e:	4b0d      	ldr	r3, [pc, #52]	; (8009a64 <prvCheckTasksWaitingTermination+0x54>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	3b01      	subs	r3, #1
 8009a34:	4a0b      	ldr	r2, [pc, #44]	; (8009a64 <prvCheckTasksWaitingTermination+0x54>)
 8009a36:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009a38:	4b0b      	ldr	r3, [pc, #44]	; (8009a68 <prvCheckTasksWaitingTermination+0x58>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	3b01      	subs	r3, #1
 8009a3e:	4a0a      	ldr	r2, [pc, #40]	; (8009a68 <prvCheckTasksWaitingTermination+0x58>)
 8009a40:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009a42:	f000 fa77 	bl	8009f34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f000 f810 	bl	8009a6c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a4c:	4b06      	ldr	r3, [pc, #24]	; (8009a68 <prvCheckTasksWaitingTermination+0x58>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d1e1      	bne.n	8009a18 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009a54:	bf00      	nop
 8009a56:	bf00      	nop
 8009a58:	3708      	adds	r7, #8
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	bf00      	nop
 8009a60:	20000c78 	.word	0x20000c78
 8009a64:	20000ca4 	.word	0x20000ca4
 8009a68:	20000c8c 	.word	0x20000c8c

08009a6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b084      	sub	sp, #16
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	334c      	adds	r3, #76	; 0x4c
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f000 ff65 	bl	800a948 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d108      	bne.n	8009a9a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f000 fbcf 	bl	800a230 <vPortFree>
				vPortFree( pxTCB );
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f000 fbcc 	bl	800a230 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009a98:	e018      	b.n	8009acc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009aa0:	2b01      	cmp	r3, #1
 8009aa2:	d103      	bne.n	8009aac <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f000 fbc3 	bl	800a230 <vPortFree>
	}
 8009aaa:	e00f      	b.n	8009acc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8009ab2:	2b02      	cmp	r3, #2
 8009ab4:	d00a      	beq.n	8009acc <prvDeleteTCB+0x60>
	__asm volatile
 8009ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aba:	f383 8811 	msr	BASEPRI, r3
 8009abe:	f3bf 8f6f 	isb	sy
 8009ac2:	f3bf 8f4f 	dsb	sy
 8009ac6:	60fb      	str	r3, [r7, #12]
}
 8009ac8:	bf00      	nop
 8009aca:	e7fe      	b.n	8009aca <prvDeleteTCB+0x5e>
	}
 8009acc:	bf00      	nop
 8009ace:	3710      	adds	r7, #16
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b083      	sub	sp, #12
 8009ad8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ada:	4b0c      	ldr	r3, [pc, #48]	; (8009b0c <prvResetNextTaskUnblockTime+0x38>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d104      	bne.n	8009aee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009ae4:	4b0a      	ldr	r3, [pc, #40]	; (8009b10 <prvResetNextTaskUnblockTime+0x3c>)
 8009ae6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009aea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009aec:	e008      	b.n	8009b00 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009aee:	4b07      	ldr	r3, [pc, #28]	; (8009b0c <prvResetNextTaskUnblockTime+0x38>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	68db      	ldr	r3, [r3, #12]
 8009af4:	68db      	ldr	r3, [r3, #12]
 8009af6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	685b      	ldr	r3, [r3, #4]
 8009afc:	4a04      	ldr	r2, [pc, #16]	; (8009b10 <prvResetNextTaskUnblockTime+0x3c>)
 8009afe:	6013      	str	r3, [r2, #0]
}
 8009b00:	bf00      	nop
 8009b02:	370c      	adds	r7, #12
 8009b04:	46bd      	mov	sp, r7
 8009b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0a:	4770      	bx	lr
 8009b0c:	20000c5c 	.word	0x20000c5c
 8009b10:	20000cc4 	.word	0x20000cc4

08009b14 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b084      	sub	sp, #16
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8009b1e:	f000 f9d9 	bl	8009ed4 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8009b22:	4b20      	ldr	r3, [pc, #128]	; (8009ba4 <ulTaskNotifyTake+0x90>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d113      	bne.n	8009b56 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009b2e:	4b1d      	ldr	r3, [pc, #116]	; (8009ba4 <ulTaskNotifyTake+0x90>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	2201      	movs	r2, #1
 8009b34:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

				if( xTicksToWait > ( TickType_t ) 0 )
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d00b      	beq.n	8009b56 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009b3e:	2101      	movs	r1, #1
 8009b40:	6838      	ldr	r0, [r7, #0]
 8009b42:	f000 f833 	bl	8009bac <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8009b46:	4b18      	ldr	r3, [pc, #96]	; (8009ba8 <ulTaskNotifyTake+0x94>)
 8009b48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b4c:	601a      	str	r2, [r3, #0]
 8009b4e:	f3bf 8f4f 	dsb	sy
 8009b52:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009b56:	f000 f9ed 	bl	8009f34 <vPortExitCritical>

		taskENTER_CRITICAL();
 8009b5a:	f000 f9bb 	bl	8009ed4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8009b5e:	4b11      	ldr	r3, [pc, #68]	; (8009ba4 <ulTaskNotifyTake+0x90>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009b66:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d00e      	beq.n	8009b8c <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d005      	beq.n	8009b80 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8009b74:	4b0b      	ldr	r3, [pc, #44]	; (8009ba4 <ulTaskNotifyTake+0x90>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8009b7e:	e005      	b.n	8009b8c <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8009b80:	4b08      	ldr	r3, [pc, #32]	; (8009ba4 <ulTaskNotifyTake+0x90>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	68fa      	ldr	r2, [r7, #12]
 8009b86:	3a01      	subs	r2, #1
 8009b88:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009b8c:	4b05      	ldr	r3, [pc, #20]	; (8009ba4 <ulTaskNotifyTake+0x90>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	2200      	movs	r2, #0
 8009b92:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		}
		taskEXIT_CRITICAL();
 8009b96:	f000 f9cd 	bl	8009f34 <vPortExitCritical>

		return ulReturn;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
	}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3710      	adds	r7, #16
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}
 8009ba4:	20000ba4 	.word	0x20000ba4
 8009ba8:	e000ed04 	.word	0xe000ed04

08009bac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b084      	sub	sp, #16
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009bb6:	4b29      	ldr	r3, [pc, #164]	; (8009c5c <prvAddCurrentTaskToDelayedList+0xb0>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009bbc:	4b28      	ldr	r3, [pc, #160]	; (8009c60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	3304      	adds	r3, #4
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f7ff f977 	bl	8008eb6 <uxListRemove>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d10b      	bne.n	8009be6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009bce:	4b24      	ldr	r3, [pc, #144]	; (8009c60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8009bda:	43da      	mvns	r2, r3
 8009bdc:	4b21      	ldr	r3, [pc, #132]	; (8009c64 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	4013      	ands	r3, r2
 8009be2:	4a20      	ldr	r2, [pc, #128]	; (8009c64 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009be4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009bec:	d10a      	bne.n	8009c04 <prvAddCurrentTaskToDelayedList+0x58>
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d007      	beq.n	8009c04 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009bf4:	4b1a      	ldr	r3, [pc, #104]	; (8009c60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	3304      	adds	r3, #4
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	481a      	ldr	r0, [pc, #104]	; (8009c68 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009bfe:	f7ff f8fd 	bl	8008dfc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009c02:	e026      	b.n	8009c52 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009c04:	68fa      	ldr	r2, [r7, #12]
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	4413      	add	r3, r2
 8009c0a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009c0c:	4b14      	ldr	r3, [pc, #80]	; (8009c60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	68ba      	ldr	r2, [r7, #8]
 8009c12:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009c14:	68ba      	ldr	r2, [r7, #8]
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	429a      	cmp	r2, r3
 8009c1a:	d209      	bcs.n	8009c30 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c1c:	4b13      	ldr	r3, [pc, #76]	; (8009c6c <prvAddCurrentTaskToDelayedList+0xc0>)
 8009c1e:	681a      	ldr	r2, [r3, #0]
 8009c20:	4b0f      	ldr	r3, [pc, #60]	; (8009c60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	3304      	adds	r3, #4
 8009c26:	4619      	mov	r1, r3
 8009c28:	4610      	mov	r0, r2
 8009c2a:	f7ff f90b 	bl	8008e44 <vListInsert>
}
 8009c2e:	e010      	b.n	8009c52 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c30:	4b0f      	ldr	r3, [pc, #60]	; (8009c70 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009c32:	681a      	ldr	r2, [r3, #0]
 8009c34:	4b0a      	ldr	r3, [pc, #40]	; (8009c60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	3304      	adds	r3, #4
 8009c3a:	4619      	mov	r1, r3
 8009c3c:	4610      	mov	r0, r2
 8009c3e:	f7ff f901 	bl	8008e44 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009c42:	4b0c      	ldr	r3, [pc, #48]	; (8009c74 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	68ba      	ldr	r2, [r7, #8]
 8009c48:	429a      	cmp	r2, r3
 8009c4a:	d202      	bcs.n	8009c52 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009c4c:	4a09      	ldr	r2, [pc, #36]	; (8009c74 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	6013      	str	r3, [r2, #0]
}
 8009c52:	bf00      	nop
 8009c54:	3710      	adds	r7, #16
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}
 8009c5a:	bf00      	nop
 8009c5c:	20000ca8 	.word	0x20000ca8
 8009c60:	20000ba4 	.word	0x20000ba4
 8009c64:	20000cac 	.word	0x20000cac
 8009c68:	20000c90 	.word	0x20000c90
 8009c6c:	20000c60 	.word	0x20000c60
 8009c70:	20000c5c 	.word	0x20000c5c
 8009c74:	20000cc4 	.word	0x20000cc4

08009c78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b085      	sub	sp, #20
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	60f8      	str	r0, [r7, #12]
 8009c80:	60b9      	str	r1, [r7, #8]
 8009c82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	3b04      	subs	r3, #4
 8009c88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009c90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	3b04      	subs	r3, #4
 8009c96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	f023 0201 	bic.w	r2, r3, #1
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	3b04      	subs	r3, #4
 8009ca6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009ca8:	4a0c      	ldr	r2, [pc, #48]	; (8009cdc <pxPortInitialiseStack+0x64>)
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	3b14      	subs	r3, #20
 8009cb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009cb4:	687a      	ldr	r2, [r7, #4]
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	3b04      	subs	r3, #4
 8009cbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f06f 0202 	mvn.w	r2, #2
 8009cc6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	3b20      	subs	r3, #32
 8009ccc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009cce:	68fb      	ldr	r3, [r7, #12]
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3714      	adds	r7, #20
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr
 8009cdc:	08009ce1 	.word	0x08009ce1

08009ce0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b085      	sub	sp, #20
 8009ce4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009cea:	4b12      	ldr	r3, [pc, #72]	; (8009d34 <prvTaskExitError+0x54>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009cf2:	d00a      	beq.n	8009d0a <prvTaskExitError+0x2a>
	__asm volatile
 8009cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf8:	f383 8811 	msr	BASEPRI, r3
 8009cfc:	f3bf 8f6f 	isb	sy
 8009d00:	f3bf 8f4f 	dsb	sy
 8009d04:	60fb      	str	r3, [r7, #12]
}
 8009d06:	bf00      	nop
 8009d08:	e7fe      	b.n	8009d08 <prvTaskExitError+0x28>
	__asm volatile
 8009d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d0e:	f383 8811 	msr	BASEPRI, r3
 8009d12:	f3bf 8f6f 	isb	sy
 8009d16:	f3bf 8f4f 	dsb	sy
 8009d1a:	60bb      	str	r3, [r7, #8]
}
 8009d1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009d1e:	bf00      	nop
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d0fc      	beq.n	8009d20 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009d26:	bf00      	nop
 8009d28:	bf00      	nop
 8009d2a:	3714      	adds	r7, #20
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr
 8009d34:	2000000c 	.word	0x2000000c
	...

08009d40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009d40:	4b07      	ldr	r3, [pc, #28]	; (8009d60 <pxCurrentTCBConst2>)
 8009d42:	6819      	ldr	r1, [r3, #0]
 8009d44:	6808      	ldr	r0, [r1, #0]
 8009d46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d4a:	f380 8809 	msr	PSP, r0
 8009d4e:	f3bf 8f6f 	isb	sy
 8009d52:	f04f 0000 	mov.w	r0, #0
 8009d56:	f380 8811 	msr	BASEPRI, r0
 8009d5a:	4770      	bx	lr
 8009d5c:	f3af 8000 	nop.w

08009d60 <pxCurrentTCBConst2>:
 8009d60:	20000ba4 	.word	0x20000ba4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009d64:	bf00      	nop
 8009d66:	bf00      	nop

08009d68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009d68:	4808      	ldr	r0, [pc, #32]	; (8009d8c <prvPortStartFirstTask+0x24>)
 8009d6a:	6800      	ldr	r0, [r0, #0]
 8009d6c:	6800      	ldr	r0, [r0, #0]
 8009d6e:	f380 8808 	msr	MSP, r0
 8009d72:	f04f 0000 	mov.w	r0, #0
 8009d76:	f380 8814 	msr	CONTROL, r0
 8009d7a:	b662      	cpsie	i
 8009d7c:	b661      	cpsie	f
 8009d7e:	f3bf 8f4f 	dsb	sy
 8009d82:	f3bf 8f6f 	isb	sy
 8009d86:	df00      	svc	0
 8009d88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009d8a:	bf00      	nop
 8009d8c:	e000ed08 	.word	0xe000ed08

08009d90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b086      	sub	sp, #24
 8009d94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009d96:	4b46      	ldr	r3, [pc, #280]	; (8009eb0 <xPortStartScheduler+0x120>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	4a46      	ldr	r2, [pc, #280]	; (8009eb4 <xPortStartScheduler+0x124>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d10a      	bne.n	8009db6 <xPortStartScheduler+0x26>
	__asm volatile
 8009da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da4:	f383 8811 	msr	BASEPRI, r3
 8009da8:	f3bf 8f6f 	isb	sy
 8009dac:	f3bf 8f4f 	dsb	sy
 8009db0:	613b      	str	r3, [r7, #16]
}
 8009db2:	bf00      	nop
 8009db4:	e7fe      	b.n	8009db4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009db6:	4b3e      	ldr	r3, [pc, #248]	; (8009eb0 <xPortStartScheduler+0x120>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	4a3f      	ldr	r2, [pc, #252]	; (8009eb8 <xPortStartScheduler+0x128>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d10a      	bne.n	8009dd6 <xPortStartScheduler+0x46>
	__asm volatile
 8009dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc4:	f383 8811 	msr	BASEPRI, r3
 8009dc8:	f3bf 8f6f 	isb	sy
 8009dcc:	f3bf 8f4f 	dsb	sy
 8009dd0:	60fb      	str	r3, [r7, #12]
}
 8009dd2:	bf00      	nop
 8009dd4:	e7fe      	b.n	8009dd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009dd6:	4b39      	ldr	r3, [pc, #228]	; (8009ebc <xPortStartScheduler+0x12c>)
 8009dd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	781b      	ldrb	r3, [r3, #0]
 8009dde:	b2db      	uxtb	r3, r3
 8009de0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	22ff      	movs	r2, #255	; 0xff
 8009de6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009de8:	697b      	ldr	r3, [r7, #20]
 8009dea:	781b      	ldrb	r3, [r3, #0]
 8009dec:	b2db      	uxtb	r3, r3
 8009dee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009df0:	78fb      	ldrb	r3, [r7, #3]
 8009df2:	b2db      	uxtb	r3, r3
 8009df4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009df8:	b2da      	uxtb	r2, r3
 8009dfa:	4b31      	ldr	r3, [pc, #196]	; (8009ec0 <xPortStartScheduler+0x130>)
 8009dfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009dfe:	4b31      	ldr	r3, [pc, #196]	; (8009ec4 <xPortStartScheduler+0x134>)
 8009e00:	2207      	movs	r2, #7
 8009e02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e04:	e009      	b.n	8009e1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009e06:	4b2f      	ldr	r3, [pc, #188]	; (8009ec4 <xPortStartScheduler+0x134>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	3b01      	subs	r3, #1
 8009e0c:	4a2d      	ldr	r2, [pc, #180]	; (8009ec4 <xPortStartScheduler+0x134>)
 8009e0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009e10:	78fb      	ldrb	r3, [r7, #3]
 8009e12:	b2db      	uxtb	r3, r3
 8009e14:	005b      	lsls	r3, r3, #1
 8009e16:	b2db      	uxtb	r3, r3
 8009e18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e1a:	78fb      	ldrb	r3, [r7, #3]
 8009e1c:	b2db      	uxtb	r3, r3
 8009e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e22:	2b80      	cmp	r3, #128	; 0x80
 8009e24:	d0ef      	beq.n	8009e06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009e26:	4b27      	ldr	r3, [pc, #156]	; (8009ec4 <xPortStartScheduler+0x134>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f1c3 0307 	rsb	r3, r3, #7
 8009e2e:	2b04      	cmp	r3, #4
 8009e30:	d00a      	beq.n	8009e48 <xPortStartScheduler+0xb8>
	__asm volatile
 8009e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e36:	f383 8811 	msr	BASEPRI, r3
 8009e3a:	f3bf 8f6f 	isb	sy
 8009e3e:	f3bf 8f4f 	dsb	sy
 8009e42:	60bb      	str	r3, [r7, #8]
}
 8009e44:	bf00      	nop
 8009e46:	e7fe      	b.n	8009e46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009e48:	4b1e      	ldr	r3, [pc, #120]	; (8009ec4 <xPortStartScheduler+0x134>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	021b      	lsls	r3, r3, #8
 8009e4e:	4a1d      	ldr	r2, [pc, #116]	; (8009ec4 <xPortStartScheduler+0x134>)
 8009e50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009e52:	4b1c      	ldr	r3, [pc, #112]	; (8009ec4 <xPortStartScheduler+0x134>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009e5a:	4a1a      	ldr	r2, [pc, #104]	; (8009ec4 <xPortStartScheduler+0x134>)
 8009e5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	b2da      	uxtb	r2, r3
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009e66:	4b18      	ldr	r3, [pc, #96]	; (8009ec8 <xPortStartScheduler+0x138>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	4a17      	ldr	r2, [pc, #92]	; (8009ec8 <xPortStartScheduler+0x138>)
 8009e6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009e70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009e72:	4b15      	ldr	r3, [pc, #84]	; (8009ec8 <xPortStartScheduler+0x138>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4a14      	ldr	r2, [pc, #80]	; (8009ec8 <xPortStartScheduler+0x138>)
 8009e78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009e7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009e7e:	f000 f8dd 	bl	800a03c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009e82:	4b12      	ldr	r3, [pc, #72]	; (8009ecc <xPortStartScheduler+0x13c>)
 8009e84:	2200      	movs	r2, #0
 8009e86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009e88:	f000 f8fc 	bl	800a084 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009e8c:	4b10      	ldr	r3, [pc, #64]	; (8009ed0 <xPortStartScheduler+0x140>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	4a0f      	ldr	r2, [pc, #60]	; (8009ed0 <xPortStartScheduler+0x140>)
 8009e92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009e96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009e98:	f7ff ff66 	bl	8009d68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009e9c:	f7ff fcfe 	bl	800989c <vTaskSwitchContext>
	prvTaskExitError();
 8009ea0:	f7ff ff1e 	bl	8009ce0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009ea4:	2300      	movs	r3, #0
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3718      	adds	r7, #24
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}
 8009eae:	bf00      	nop
 8009eb0:	e000ed00 	.word	0xe000ed00
 8009eb4:	410fc271 	.word	0x410fc271
 8009eb8:	410fc270 	.word	0x410fc270
 8009ebc:	e000e400 	.word	0xe000e400
 8009ec0:	20000cd0 	.word	0x20000cd0
 8009ec4:	20000cd4 	.word	0x20000cd4
 8009ec8:	e000ed20 	.word	0xe000ed20
 8009ecc:	2000000c 	.word	0x2000000c
 8009ed0:	e000ef34 	.word	0xe000ef34

08009ed4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b083      	sub	sp, #12
 8009ed8:	af00      	add	r7, sp, #0
	__asm volatile
 8009eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ede:	f383 8811 	msr	BASEPRI, r3
 8009ee2:	f3bf 8f6f 	isb	sy
 8009ee6:	f3bf 8f4f 	dsb	sy
 8009eea:	607b      	str	r3, [r7, #4]
}
 8009eec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009eee:	4b0f      	ldr	r3, [pc, #60]	; (8009f2c <vPortEnterCritical+0x58>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	3301      	adds	r3, #1
 8009ef4:	4a0d      	ldr	r2, [pc, #52]	; (8009f2c <vPortEnterCritical+0x58>)
 8009ef6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009ef8:	4b0c      	ldr	r3, [pc, #48]	; (8009f2c <vPortEnterCritical+0x58>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	2b01      	cmp	r3, #1
 8009efe:	d10f      	bne.n	8009f20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009f00:	4b0b      	ldr	r3, [pc, #44]	; (8009f30 <vPortEnterCritical+0x5c>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	b2db      	uxtb	r3, r3
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d00a      	beq.n	8009f20 <vPortEnterCritical+0x4c>
	__asm volatile
 8009f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f0e:	f383 8811 	msr	BASEPRI, r3
 8009f12:	f3bf 8f6f 	isb	sy
 8009f16:	f3bf 8f4f 	dsb	sy
 8009f1a:	603b      	str	r3, [r7, #0]
}
 8009f1c:	bf00      	nop
 8009f1e:	e7fe      	b.n	8009f1e <vPortEnterCritical+0x4a>
	}
}
 8009f20:	bf00      	nop
 8009f22:	370c      	adds	r7, #12
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr
 8009f2c:	2000000c 	.word	0x2000000c
 8009f30:	e000ed04 	.word	0xe000ed04

08009f34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009f34:	b480      	push	{r7}
 8009f36:	b083      	sub	sp, #12
 8009f38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009f3a:	4b12      	ldr	r3, [pc, #72]	; (8009f84 <vPortExitCritical+0x50>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d10a      	bne.n	8009f58 <vPortExitCritical+0x24>
	__asm volatile
 8009f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f46:	f383 8811 	msr	BASEPRI, r3
 8009f4a:	f3bf 8f6f 	isb	sy
 8009f4e:	f3bf 8f4f 	dsb	sy
 8009f52:	607b      	str	r3, [r7, #4]
}
 8009f54:	bf00      	nop
 8009f56:	e7fe      	b.n	8009f56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009f58:	4b0a      	ldr	r3, [pc, #40]	; (8009f84 <vPortExitCritical+0x50>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	3b01      	subs	r3, #1
 8009f5e:	4a09      	ldr	r2, [pc, #36]	; (8009f84 <vPortExitCritical+0x50>)
 8009f60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009f62:	4b08      	ldr	r3, [pc, #32]	; (8009f84 <vPortExitCritical+0x50>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d105      	bne.n	8009f76 <vPortExitCritical+0x42>
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009f74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009f76:	bf00      	nop
 8009f78:	370c      	adds	r7, #12
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f80:	4770      	bx	lr
 8009f82:	bf00      	nop
 8009f84:	2000000c 	.word	0x2000000c
	...

08009f90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009f90:	f3ef 8009 	mrs	r0, PSP
 8009f94:	f3bf 8f6f 	isb	sy
 8009f98:	4b15      	ldr	r3, [pc, #84]	; (8009ff0 <pxCurrentTCBConst>)
 8009f9a:	681a      	ldr	r2, [r3, #0]
 8009f9c:	f01e 0f10 	tst.w	lr, #16
 8009fa0:	bf08      	it	eq
 8009fa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009fa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009faa:	6010      	str	r0, [r2, #0]
 8009fac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009fb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009fb4:	f380 8811 	msr	BASEPRI, r0
 8009fb8:	f3bf 8f4f 	dsb	sy
 8009fbc:	f3bf 8f6f 	isb	sy
 8009fc0:	f7ff fc6c 	bl	800989c <vTaskSwitchContext>
 8009fc4:	f04f 0000 	mov.w	r0, #0
 8009fc8:	f380 8811 	msr	BASEPRI, r0
 8009fcc:	bc09      	pop	{r0, r3}
 8009fce:	6819      	ldr	r1, [r3, #0]
 8009fd0:	6808      	ldr	r0, [r1, #0]
 8009fd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fd6:	f01e 0f10 	tst.w	lr, #16
 8009fda:	bf08      	it	eq
 8009fdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009fe0:	f380 8809 	msr	PSP, r0
 8009fe4:	f3bf 8f6f 	isb	sy
 8009fe8:	4770      	bx	lr
 8009fea:	bf00      	nop
 8009fec:	f3af 8000 	nop.w

08009ff0 <pxCurrentTCBConst>:
 8009ff0:	20000ba4 	.word	0x20000ba4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009ff4:	bf00      	nop
 8009ff6:	bf00      	nop

08009ff8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b082      	sub	sp, #8
 8009ffc:	af00      	add	r7, sp, #0
	__asm volatile
 8009ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a002:	f383 8811 	msr	BASEPRI, r3
 800a006:	f3bf 8f6f 	isb	sy
 800a00a:	f3bf 8f4f 	dsb	sy
 800a00e:	607b      	str	r3, [r7, #4]
}
 800a010:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a012:	f7ff fb8b 	bl	800972c <xTaskIncrementTick>
 800a016:	4603      	mov	r3, r0
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d003      	beq.n	800a024 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a01c:	4b06      	ldr	r3, [pc, #24]	; (800a038 <SysTick_Handler+0x40>)
 800a01e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a022:	601a      	str	r2, [r3, #0]
 800a024:	2300      	movs	r3, #0
 800a026:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	f383 8811 	msr	BASEPRI, r3
}
 800a02e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a030:	bf00      	nop
 800a032:	3708      	adds	r7, #8
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}
 800a038:	e000ed04 	.word	0xe000ed04

0800a03c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a03c:	b480      	push	{r7}
 800a03e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a040:	4b0b      	ldr	r3, [pc, #44]	; (800a070 <vPortSetupTimerInterrupt+0x34>)
 800a042:	2200      	movs	r2, #0
 800a044:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a046:	4b0b      	ldr	r3, [pc, #44]	; (800a074 <vPortSetupTimerInterrupt+0x38>)
 800a048:	2200      	movs	r2, #0
 800a04a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a04c:	4b0a      	ldr	r3, [pc, #40]	; (800a078 <vPortSetupTimerInterrupt+0x3c>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4a0a      	ldr	r2, [pc, #40]	; (800a07c <vPortSetupTimerInterrupt+0x40>)
 800a052:	fba2 2303 	umull	r2, r3, r2, r3
 800a056:	099b      	lsrs	r3, r3, #6
 800a058:	4a09      	ldr	r2, [pc, #36]	; (800a080 <vPortSetupTimerInterrupt+0x44>)
 800a05a:	3b01      	subs	r3, #1
 800a05c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a05e:	4b04      	ldr	r3, [pc, #16]	; (800a070 <vPortSetupTimerInterrupt+0x34>)
 800a060:	2207      	movs	r2, #7
 800a062:	601a      	str	r2, [r3, #0]
}
 800a064:	bf00      	nop
 800a066:	46bd      	mov	sp, r7
 800a068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06c:	4770      	bx	lr
 800a06e:	bf00      	nop
 800a070:	e000e010 	.word	0xe000e010
 800a074:	e000e018 	.word	0xe000e018
 800a078:	20000000 	.word	0x20000000
 800a07c:	10624dd3 	.word	0x10624dd3
 800a080:	e000e014 	.word	0xe000e014

0800a084 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a084:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a094 <vPortEnableVFP+0x10>
 800a088:	6801      	ldr	r1, [r0, #0]
 800a08a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a08e:	6001      	str	r1, [r0, #0]
 800a090:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a092:	bf00      	nop
 800a094:	e000ed88 	.word	0xe000ed88

0800a098 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b08a      	sub	sp, #40	; 0x28
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a0a4:	f7ff fa88 	bl	80095b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a0a8:	4b5b      	ldr	r3, [pc, #364]	; (800a218 <pvPortMalloc+0x180>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d101      	bne.n	800a0b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a0b0:	f000 f920 	bl	800a2f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a0b4:	4b59      	ldr	r3, [pc, #356]	; (800a21c <pvPortMalloc+0x184>)
 800a0b6:	681a      	ldr	r2, [r3, #0]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	4013      	ands	r3, r2
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	f040 8093 	bne.w	800a1e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d01d      	beq.n	800a104 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a0c8:	2208      	movs	r2, #8
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	4413      	add	r3, r2
 800a0ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f003 0307 	and.w	r3, r3, #7
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d014      	beq.n	800a104 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f023 0307 	bic.w	r3, r3, #7
 800a0e0:	3308      	adds	r3, #8
 800a0e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f003 0307 	and.w	r3, r3, #7
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d00a      	beq.n	800a104 <pvPortMalloc+0x6c>
	__asm volatile
 800a0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0f2:	f383 8811 	msr	BASEPRI, r3
 800a0f6:	f3bf 8f6f 	isb	sy
 800a0fa:	f3bf 8f4f 	dsb	sy
 800a0fe:	617b      	str	r3, [r7, #20]
}
 800a100:	bf00      	nop
 800a102:	e7fe      	b.n	800a102 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d06e      	beq.n	800a1e8 <pvPortMalloc+0x150>
 800a10a:	4b45      	ldr	r3, [pc, #276]	; (800a220 <pvPortMalloc+0x188>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	687a      	ldr	r2, [r7, #4]
 800a110:	429a      	cmp	r2, r3
 800a112:	d869      	bhi.n	800a1e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a114:	4b43      	ldr	r3, [pc, #268]	; (800a224 <pvPortMalloc+0x18c>)
 800a116:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a118:	4b42      	ldr	r3, [pc, #264]	; (800a224 <pvPortMalloc+0x18c>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a11e:	e004      	b.n	800a12a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a122:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a12c:	685b      	ldr	r3, [r3, #4]
 800a12e:	687a      	ldr	r2, [r7, #4]
 800a130:	429a      	cmp	r2, r3
 800a132:	d903      	bls.n	800a13c <pvPortMalloc+0xa4>
 800a134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d1f1      	bne.n	800a120 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a13c:	4b36      	ldr	r3, [pc, #216]	; (800a218 <pvPortMalloc+0x180>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a142:	429a      	cmp	r2, r3
 800a144:	d050      	beq.n	800a1e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a146:	6a3b      	ldr	r3, [r7, #32]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	2208      	movs	r2, #8
 800a14c:	4413      	add	r3, r2
 800a14e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a152:	681a      	ldr	r2, [r3, #0]
 800a154:	6a3b      	ldr	r3, [r7, #32]
 800a156:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a15a:	685a      	ldr	r2, [r3, #4]
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	1ad2      	subs	r2, r2, r3
 800a160:	2308      	movs	r3, #8
 800a162:	005b      	lsls	r3, r3, #1
 800a164:	429a      	cmp	r2, r3
 800a166:	d91f      	bls.n	800a1a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	4413      	add	r3, r2
 800a16e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a170:	69bb      	ldr	r3, [r7, #24]
 800a172:	f003 0307 	and.w	r3, r3, #7
 800a176:	2b00      	cmp	r3, #0
 800a178:	d00a      	beq.n	800a190 <pvPortMalloc+0xf8>
	__asm volatile
 800a17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a17e:	f383 8811 	msr	BASEPRI, r3
 800a182:	f3bf 8f6f 	isb	sy
 800a186:	f3bf 8f4f 	dsb	sy
 800a18a:	613b      	str	r3, [r7, #16]
}
 800a18c:	bf00      	nop
 800a18e:	e7fe      	b.n	800a18e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a192:	685a      	ldr	r2, [r3, #4]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	1ad2      	subs	r2, r2, r3
 800a198:	69bb      	ldr	r3, [r7, #24]
 800a19a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a19e:	687a      	ldr	r2, [r7, #4]
 800a1a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a1a2:	69b8      	ldr	r0, [r7, #24]
 800a1a4:	f000 f908 	bl	800a3b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a1a8:	4b1d      	ldr	r3, [pc, #116]	; (800a220 <pvPortMalloc+0x188>)
 800a1aa:	681a      	ldr	r2, [r3, #0]
 800a1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	1ad3      	subs	r3, r2, r3
 800a1b2:	4a1b      	ldr	r2, [pc, #108]	; (800a220 <pvPortMalloc+0x188>)
 800a1b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a1b6:	4b1a      	ldr	r3, [pc, #104]	; (800a220 <pvPortMalloc+0x188>)
 800a1b8:	681a      	ldr	r2, [r3, #0]
 800a1ba:	4b1b      	ldr	r3, [pc, #108]	; (800a228 <pvPortMalloc+0x190>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	429a      	cmp	r2, r3
 800a1c0:	d203      	bcs.n	800a1ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a1c2:	4b17      	ldr	r3, [pc, #92]	; (800a220 <pvPortMalloc+0x188>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	4a18      	ldr	r2, [pc, #96]	; (800a228 <pvPortMalloc+0x190>)
 800a1c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1cc:	685a      	ldr	r2, [r3, #4]
 800a1ce:	4b13      	ldr	r3, [pc, #76]	; (800a21c <pvPortMalloc+0x184>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	431a      	orrs	r2, r3
 800a1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1da:	2200      	movs	r2, #0
 800a1dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a1de:	4b13      	ldr	r3, [pc, #76]	; (800a22c <pvPortMalloc+0x194>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	3301      	adds	r3, #1
 800a1e4:	4a11      	ldr	r2, [pc, #68]	; (800a22c <pvPortMalloc+0x194>)
 800a1e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a1e8:	f7ff f9f4 	bl	80095d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a1ec:	69fb      	ldr	r3, [r7, #28]
 800a1ee:	f003 0307 	and.w	r3, r3, #7
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d00a      	beq.n	800a20c <pvPortMalloc+0x174>
	__asm volatile
 800a1f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1fa:	f383 8811 	msr	BASEPRI, r3
 800a1fe:	f3bf 8f6f 	isb	sy
 800a202:	f3bf 8f4f 	dsb	sy
 800a206:	60fb      	str	r3, [r7, #12]
}
 800a208:	bf00      	nop
 800a20a:	e7fe      	b.n	800a20a <pvPortMalloc+0x172>
	return pvReturn;
 800a20c:	69fb      	ldr	r3, [r7, #28]
}
 800a20e:	4618      	mov	r0, r3
 800a210:	3728      	adds	r7, #40	; 0x28
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}
 800a216:	bf00      	nop
 800a218:	200048e0 	.word	0x200048e0
 800a21c:	200048f4 	.word	0x200048f4
 800a220:	200048e4 	.word	0x200048e4
 800a224:	200048d8 	.word	0x200048d8
 800a228:	200048e8 	.word	0x200048e8
 800a22c:	200048ec 	.word	0x200048ec

0800a230 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b086      	sub	sp, #24
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d04d      	beq.n	800a2de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a242:	2308      	movs	r3, #8
 800a244:	425b      	negs	r3, r3
 800a246:	697a      	ldr	r2, [r7, #20]
 800a248:	4413      	add	r3, r2
 800a24a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a24c:	697b      	ldr	r3, [r7, #20]
 800a24e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a250:	693b      	ldr	r3, [r7, #16]
 800a252:	685a      	ldr	r2, [r3, #4]
 800a254:	4b24      	ldr	r3, [pc, #144]	; (800a2e8 <vPortFree+0xb8>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	4013      	ands	r3, r2
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d10a      	bne.n	800a274 <vPortFree+0x44>
	__asm volatile
 800a25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a262:	f383 8811 	msr	BASEPRI, r3
 800a266:	f3bf 8f6f 	isb	sy
 800a26a:	f3bf 8f4f 	dsb	sy
 800a26e:	60fb      	str	r3, [r7, #12]
}
 800a270:	bf00      	nop
 800a272:	e7fe      	b.n	800a272 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d00a      	beq.n	800a292 <vPortFree+0x62>
	__asm volatile
 800a27c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a280:	f383 8811 	msr	BASEPRI, r3
 800a284:	f3bf 8f6f 	isb	sy
 800a288:	f3bf 8f4f 	dsb	sy
 800a28c:	60bb      	str	r3, [r7, #8]
}
 800a28e:	bf00      	nop
 800a290:	e7fe      	b.n	800a290 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	685a      	ldr	r2, [r3, #4]
 800a296:	4b14      	ldr	r3, [pc, #80]	; (800a2e8 <vPortFree+0xb8>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	4013      	ands	r3, r2
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d01e      	beq.n	800a2de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a2a0:	693b      	ldr	r3, [r7, #16]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d11a      	bne.n	800a2de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	685a      	ldr	r2, [r3, #4]
 800a2ac:	4b0e      	ldr	r3, [pc, #56]	; (800a2e8 <vPortFree+0xb8>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	43db      	mvns	r3, r3
 800a2b2:	401a      	ands	r2, r3
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a2b8:	f7ff f97e 	bl	80095b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	685a      	ldr	r2, [r3, #4]
 800a2c0:	4b0a      	ldr	r3, [pc, #40]	; (800a2ec <vPortFree+0xbc>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4413      	add	r3, r2
 800a2c6:	4a09      	ldr	r2, [pc, #36]	; (800a2ec <vPortFree+0xbc>)
 800a2c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a2ca:	6938      	ldr	r0, [r7, #16]
 800a2cc:	f000 f874 	bl	800a3b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a2d0:	4b07      	ldr	r3, [pc, #28]	; (800a2f0 <vPortFree+0xc0>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	3301      	adds	r3, #1
 800a2d6:	4a06      	ldr	r2, [pc, #24]	; (800a2f0 <vPortFree+0xc0>)
 800a2d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a2da:	f7ff f97b 	bl	80095d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a2de:	bf00      	nop
 800a2e0:	3718      	adds	r7, #24
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}
 800a2e6:	bf00      	nop
 800a2e8:	200048f4 	.word	0x200048f4
 800a2ec:	200048e4 	.word	0x200048e4
 800a2f0:	200048f0 	.word	0x200048f0

0800a2f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b085      	sub	sp, #20
 800a2f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a2fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a2fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a300:	4b27      	ldr	r3, [pc, #156]	; (800a3a0 <prvHeapInit+0xac>)
 800a302:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	f003 0307 	and.w	r3, r3, #7
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d00c      	beq.n	800a328 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	3307      	adds	r3, #7
 800a312:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	f023 0307 	bic.w	r3, r3, #7
 800a31a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a31c:	68ba      	ldr	r2, [r7, #8]
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	1ad3      	subs	r3, r2, r3
 800a322:	4a1f      	ldr	r2, [pc, #124]	; (800a3a0 <prvHeapInit+0xac>)
 800a324:	4413      	add	r3, r2
 800a326:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a32c:	4a1d      	ldr	r2, [pc, #116]	; (800a3a4 <prvHeapInit+0xb0>)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a332:	4b1c      	ldr	r3, [pc, #112]	; (800a3a4 <prvHeapInit+0xb0>)
 800a334:	2200      	movs	r2, #0
 800a336:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	68ba      	ldr	r2, [r7, #8]
 800a33c:	4413      	add	r3, r2
 800a33e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a340:	2208      	movs	r2, #8
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	1a9b      	subs	r3, r3, r2
 800a346:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f023 0307 	bic.w	r3, r3, #7
 800a34e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	4a15      	ldr	r2, [pc, #84]	; (800a3a8 <prvHeapInit+0xb4>)
 800a354:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a356:	4b14      	ldr	r3, [pc, #80]	; (800a3a8 <prvHeapInit+0xb4>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	2200      	movs	r2, #0
 800a35c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a35e:	4b12      	ldr	r3, [pc, #72]	; (800a3a8 <prvHeapInit+0xb4>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	2200      	movs	r2, #0
 800a364:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	68fa      	ldr	r2, [r7, #12]
 800a36e:	1ad2      	subs	r2, r2, r3
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a374:	4b0c      	ldr	r3, [pc, #48]	; (800a3a8 <prvHeapInit+0xb4>)
 800a376:	681a      	ldr	r2, [r3, #0]
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	685b      	ldr	r3, [r3, #4]
 800a380:	4a0a      	ldr	r2, [pc, #40]	; (800a3ac <prvHeapInit+0xb8>)
 800a382:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	685b      	ldr	r3, [r3, #4]
 800a388:	4a09      	ldr	r2, [pc, #36]	; (800a3b0 <prvHeapInit+0xbc>)
 800a38a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a38c:	4b09      	ldr	r3, [pc, #36]	; (800a3b4 <prvHeapInit+0xc0>)
 800a38e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a392:	601a      	str	r2, [r3, #0]
}
 800a394:	bf00      	nop
 800a396:	3714      	adds	r7, #20
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr
 800a3a0:	20000cd8 	.word	0x20000cd8
 800a3a4:	200048d8 	.word	0x200048d8
 800a3a8:	200048e0 	.word	0x200048e0
 800a3ac:	200048e8 	.word	0x200048e8
 800a3b0:	200048e4 	.word	0x200048e4
 800a3b4:	200048f4 	.word	0x200048f4

0800a3b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b085      	sub	sp, #20
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a3c0:	4b28      	ldr	r3, [pc, #160]	; (800a464 <prvInsertBlockIntoFreeList+0xac>)
 800a3c2:	60fb      	str	r3, [r7, #12]
 800a3c4:	e002      	b.n	800a3cc <prvInsertBlockIntoFreeList+0x14>
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	60fb      	str	r3, [r7, #12]
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	687a      	ldr	r2, [r7, #4]
 800a3d2:	429a      	cmp	r2, r3
 800a3d4:	d8f7      	bhi.n	800a3c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	68ba      	ldr	r2, [r7, #8]
 800a3e0:	4413      	add	r3, r2
 800a3e2:	687a      	ldr	r2, [r7, #4]
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	d108      	bne.n	800a3fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	685a      	ldr	r2, [r3, #4]
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	685b      	ldr	r3, [r3, #4]
 800a3f0:	441a      	add	r2, r3
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	685b      	ldr	r3, [r3, #4]
 800a402:	68ba      	ldr	r2, [r7, #8]
 800a404:	441a      	add	r2, r3
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	429a      	cmp	r2, r3
 800a40c:	d118      	bne.n	800a440 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	681a      	ldr	r2, [r3, #0]
 800a412:	4b15      	ldr	r3, [pc, #84]	; (800a468 <prvInsertBlockIntoFreeList+0xb0>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	429a      	cmp	r2, r3
 800a418:	d00d      	beq.n	800a436 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	685a      	ldr	r2, [r3, #4]
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	685b      	ldr	r3, [r3, #4]
 800a424:	441a      	add	r2, r3
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	681a      	ldr	r2, [r3, #0]
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	601a      	str	r2, [r3, #0]
 800a434:	e008      	b.n	800a448 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a436:	4b0c      	ldr	r3, [pc, #48]	; (800a468 <prvInsertBlockIntoFreeList+0xb0>)
 800a438:	681a      	ldr	r2, [r3, #0]
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	601a      	str	r2, [r3, #0]
 800a43e:	e003      	b.n	800a448 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681a      	ldr	r2, [r3, #0]
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a448:	68fa      	ldr	r2, [r7, #12]
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	429a      	cmp	r2, r3
 800a44e:	d002      	beq.n	800a456 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	687a      	ldr	r2, [r7, #4]
 800a454:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a456:	bf00      	nop
 800a458:	3714      	adds	r7, #20
 800a45a:	46bd      	mov	sp, r7
 800a45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a460:	4770      	bx	lr
 800a462:	bf00      	nop
 800a464:	200048d8 	.word	0x200048d8
 800a468:	200048e0 	.word	0x200048e0

0800a46c <atof>:
 800a46c:	2100      	movs	r1, #0
 800a46e:	f001 b951 	b.w	800b714 <strtod>
	...

0800a474 <__errno>:
 800a474:	4b01      	ldr	r3, [pc, #4]	; (800a47c <__errno+0x8>)
 800a476:	6818      	ldr	r0, [r3, #0]
 800a478:	4770      	bx	lr
 800a47a:	bf00      	nop
 800a47c:	20000010 	.word	0x20000010

0800a480 <std>:
 800a480:	2300      	movs	r3, #0
 800a482:	b510      	push	{r4, lr}
 800a484:	4604      	mov	r4, r0
 800a486:	e9c0 3300 	strd	r3, r3, [r0]
 800a48a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a48e:	6083      	str	r3, [r0, #8]
 800a490:	8181      	strh	r1, [r0, #12]
 800a492:	6643      	str	r3, [r0, #100]	; 0x64
 800a494:	81c2      	strh	r2, [r0, #14]
 800a496:	6183      	str	r3, [r0, #24]
 800a498:	4619      	mov	r1, r3
 800a49a:	2208      	movs	r2, #8
 800a49c:	305c      	adds	r0, #92	; 0x5c
 800a49e:	f000 f91a 	bl	800a6d6 <memset>
 800a4a2:	4b05      	ldr	r3, [pc, #20]	; (800a4b8 <std+0x38>)
 800a4a4:	6263      	str	r3, [r4, #36]	; 0x24
 800a4a6:	4b05      	ldr	r3, [pc, #20]	; (800a4bc <std+0x3c>)
 800a4a8:	62a3      	str	r3, [r4, #40]	; 0x28
 800a4aa:	4b05      	ldr	r3, [pc, #20]	; (800a4c0 <std+0x40>)
 800a4ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a4ae:	4b05      	ldr	r3, [pc, #20]	; (800a4c4 <std+0x44>)
 800a4b0:	6224      	str	r4, [r4, #32]
 800a4b2:	6323      	str	r3, [r4, #48]	; 0x30
 800a4b4:	bd10      	pop	{r4, pc}
 800a4b6:	bf00      	nop
 800a4b8:	0800aa21 	.word	0x0800aa21
 800a4bc:	0800aa43 	.word	0x0800aa43
 800a4c0:	0800aa7b 	.word	0x0800aa7b
 800a4c4:	0800aa9f 	.word	0x0800aa9f

0800a4c8 <_cleanup_r>:
 800a4c8:	4901      	ldr	r1, [pc, #4]	; (800a4d0 <_cleanup_r+0x8>)
 800a4ca:	f000 b8af 	b.w	800a62c <_fwalk_reent>
 800a4ce:	bf00      	nop
 800a4d0:	0800b9fd 	.word	0x0800b9fd

0800a4d4 <__sfmoreglue>:
 800a4d4:	b570      	push	{r4, r5, r6, lr}
 800a4d6:	2268      	movs	r2, #104	; 0x68
 800a4d8:	1e4d      	subs	r5, r1, #1
 800a4da:	4355      	muls	r5, r2
 800a4dc:	460e      	mov	r6, r1
 800a4de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a4e2:	f000 f921 	bl	800a728 <_malloc_r>
 800a4e6:	4604      	mov	r4, r0
 800a4e8:	b140      	cbz	r0, 800a4fc <__sfmoreglue+0x28>
 800a4ea:	2100      	movs	r1, #0
 800a4ec:	e9c0 1600 	strd	r1, r6, [r0]
 800a4f0:	300c      	adds	r0, #12
 800a4f2:	60a0      	str	r0, [r4, #8]
 800a4f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a4f8:	f000 f8ed 	bl	800a6d6 <memset>
 800a4fc:	4620      	mov	r0, r4
 800a4fe:	bd70      	pop	{r4, r5, r6, pc}

0800a500 <__sfp_lock_acquire>:
 800a500:	4801      	ldr	r0, [pc, #4]	; (800a508 <__sfp_lock_acquire+0x8>)
 800a502:	f000 b8d8 	b.w	800a6b6 <__retarget_lock_acquire_recursive>
 800a506:	bf00      	nop
 800a508:	200048f9 	.word	0x200048f9

0800a50c <__sfp_lock_release>:
 800a50c:	4801      	ldr	r0, [pc, #4]	; (800a514 <__sfp_lock_release+0x8>)
 800a50e:	f000 b8d3 	b.w	800a6b8 <__retarget_lock_release_recursive>
 800a512:	bf00      	nop
 800a514:	200048f9 	.word	0x200048f9

0800a518 <__sinit_lock_acquire>:
 800a518:	4801      	ldr	r0, [pc, #4]	; (800a520 <__sinit_lock_acquire+0x8>)
 800a51a:	f000 b8cc 	b.w	800a6b6 <__retarget_lock_acquire_recursive>
 800a51e:	bf00      	nop
 800a520:	200048fa 	.word	0x200048fa

0800a524 <__sinit_lock_release>:
 800a524:	4801      	ldr	r0, [pc, #4]	; (800a52c <__sinit_lock_release+0x8>)
 800a526:	f000 b8c7 	b.w	800a6b8 <__retarget_lock_release_recursive>
 800a52a:	bf00      	nop
 800a52c:	200048fa 	.word	0x200048fa

0800a530 <__sinit>:
 800a530:	b510      	push	{r4, lr}
 800a532:	4604      	mov	r4, r0
 800a534:	f7ff fff0 	bl	800a518 <__sinit_lock_acquire>
 800a538:	69a3      	ldr	r3, [r4, #24]
 800a53a:	b11b      	cbz	r3, 800a544 <__sinit+0x14>
 800a53c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a540:	f7ff bff0 	b.w	800a524 <__sinit_lock_release>
 800a544:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a548:	6523      	str	r3, [r4, #80]	; 0x50
 800a54a:	4b13      	ldr	r3, [pc, #76]	; (800a598 <__sinit+0x68>)
 800a54c:	4a13      	ldr	r2, [pc, #76]	; (800a59c <__sinit+0x6c>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	62a2      	str	r2, [r4, #40]	; 0x28
 800a552:	42a3      	cmp	r3, r4
 800a554:	bf04      	itt	eq
 800a556:	2301      	moveq	r3, #1
 800a558:	61a3      	streq	r3, [r4, #24]
 800a55a:	4620      	mov	r0, r4
 800a55c:	f000 f820 	bl	800a5a0 <__sfp>
 800a560:	6060      	str	r0, [r4, #4]
 800a562:	4620      	mov	r0, r4
 800a564:	f000 f81c 	bl	800a5a0 <__sfp>
 800a568:	60a0      	str	r0, [r4, #8]
 800a56a:	4620      	mov	r0, r4
 800a56c:	f000 f818 	bl	800a5a0 <__sfp>
 800a570:	2200      	movs	r2, #0
 800a572:	60e0      	str	r0, [r4, #12]
 800a574:	2104      	movs	r1, #4
 800a576:	6860      	ldr	r0, [r4, #4]
 800a578:	f7ff ff82 	bl	800a480 <std>
 800a57c:	68a0      	ldr	r0, [r4, #8]
 800a57e:	2201      	movs	r2, #1
 800a580:	2109      	movs	r1, #9
 800a582:	f7ff ff7d 	bl	800a480 <std>
 800a586:	68e0      	ldr	r0, [r4, #12]
 800a588:	2202      	movs	r2, #2
 800a58a:	2112      	movs	r1, #18
 800a58c:	f7ff ff78 	bl	800a480 <std>
 800a590:	2301      	movs	r3, #1
 800a592:	61a3      	str	r3, [r4, #24]
 800a594:	e7d2      	b.n	800a53c <__sinit+0xc>
 800a596:	bf00      	nop
 800a598:	0800dd54 	.word	0x0800dd54
 800a59c:	0800a4c9 	.word	0x0800a4c9

0800a5a0 <__sfp>:
 800a5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5a2:	4607      	mov	r7, r0
 800a5a4:	f7ff ffac 	bl	800a500 <__sfp_lock_acquire>
 800a5a8:	4b1e      	ldr	r3, [pc, #120]	; (800a624 <__sfp+0x84>)
 800a5aa:	681e      	ldr	r6, [r3, #0]
 800a5ac:	69b3      	ldr	r3, [r6, #24]
 800a5ae:	b913      	cbnz	r3, 800a5b6 <__sfp+0x16>
 800a5b0:	4630      	mov	r0, r6
 800a5b2:	f7ff ffbd 	bl	800a530 <__sinit>
 800a5b6:	3648      	adds	r6, #72	; 0x48
 800a5b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a5bc:	3b01      	subs	r3, #1
 800a5be:	d503      	bpl.n	800a5c8 <__sfp+0x28>
 800a5c0:	6833      	ldr	r3, [r6, #0]
 800a5c2:	b30b      	cbz	r3, 800a608 <__sfp+0x68>
 800a5c4:	6836      	ldr	r6, [r6, #0]
 800a5c6:	e7f7      	b.n	800a5b8 <__sfp+0x18>
 800a5c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a5cc:	b9d5      	cbnz	r5, 800a604 <__sfp+0x64>
 800a5ce:	4b16      	ldr	r3, [pc, #88]	; (800a628 <__sfp+0x88>)
 800a5d0:	60e3      	str	r3, [r4, #12]
 800a5d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a5d6:	6665      	str	r5, [r4, #100]	; 0x64
 800a5d8:	f000 f86c 	bl	800a6b4 <__retarget_lock_init_recursive>
 800a5dc:	f7ff ff96 	bl	800a50c <__sfp_lock_release>
 800a5e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a5e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a5e8:	6025      	str	r5, [r4, #0]
 800a5ea:	61a5      	str	r5, [r4, #24]
 800a5ec:	2208      	movs	r2, #8
 800a5ee:	4629      	mov	r1, r5
 800a5f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a5f4:	f000 f86f 	bl	800a6d6 <memset>
 800a5f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a5fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a600:	4620      	mov	r0, r4
 800a602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a604:	3468      	adds	r4, #104	; 0x68
 800a606:	e7d9      	b.n	800a5bc <__sfp+0x1c>
 800a608:	2104      	movs	r1, #4
 800a60a:	4638      	mov	r0, r7
 800a60c:	f7ff ff62 	bl	800a4d4 <__sfmoreglue>
 800a610:	4604      	mov	r4, r0
 800a612:	6030      	str	r0, [r6, #0]
 800a614:	2800      	cmp	r0, #0
 800a616:	d1d5      	bne.n	800a5c4 <__sfp+0x24>
 800a618:	f7ff ff78 	bl	800a50c <__sfp_lock_release>
 800a61c:	230c      	movs	r3, #12
 800a61e:	603b      	str	r3, [r7, #0]
 800a620:	e7ee      	b.n	800a600 <__sfp+0x60>
 800a622:	bf00      	nop
 800a624:	0800dd54 	.word	0x0800dd54
 800a628:	ffff0001 	.word	0xffff0001

0800a62c <_fwalk_reent>:
 800a62c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a630:	4606      	mov	r6, r0
 800a632:	4688      	mov	r8, r1
 800a634:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a638:	2700      	movs	r7, #0
 800a63a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a63e:	f1b9 0901 	subs.w	r9, r9, #1
 800a642:	d505      	bpl.n	800a650 <_fwalk_reent+0x24>
 800a644:	6824      	ldr	r4, [r4, #0]
 800a646:	2c00      	cmp	r4, #0
 800a648:	d1f7      	bne.n	800a63a <_fwalk_reent+0xe>
 800a64a:	4638      	mov	r0, r7
 800a64c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a650:	89ab      	ldrh	r3, [r5, #12]
 800a652:	2b01      	cmp	r3, #1
 800a654:	d907      	bls.n	800a666 <_fwalk_reent+0x3a>
 800a656:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a65a:	3301      	adds	r3, #1
 800a65c:	d003      	beq.n	800a666 <_fwalk_reent+0x3a>
 800a65e:	4629      	mov	r1, r5
 800a660:	4630      	mov	r0, r6
 800a662:	47c0      	blx	r8
 800a664:	4307      	orrs	r7, r0
 800a666:	3568      	adds	r5, #104	; 0x68
 800a668:	e7e9      	b.n	800a63e <_fwalk_reent+0x12>
	...

0800a66c <__libc_init_array>:
 800a66c:	b570      	push	{r4, r5, r6, lr}
 800a66e:	4d0d      	ldr	r5, [pc, #52]	; (800a6a4 <__libc_init_array+0x38>)
 800a670:	4c0d      	ldr	r4, [pc, #52]	; (800a6a8 <__libc_init_array+0x3c>)
 800a672:	1b64      	subs	r4, r4, r5
 800a674:	10a4      	asrs	r4, r4, #2
 800a676:	2600      	movs	r6, #0
 800a678:	42a6      	cmp	r6, r4
 800a67a:	d109      	bne.n	800a690 <__libc_init_array+0x24>
 800a67c:	4d0b      	ldr	r5, [pc, #44]	; (800a6ac <__libc_init_array+0x40>)
 800a67e:	4c0c      	ldr	r4, [pc, #48]	; (800a6b0 <__libc_init_array+0x44>)
 800a680:	f003 f954 	bl	800d92c <_init>
 800a684:	1b64      	subs	r4, r4, r5
 800a686:	10a4      	asrs	r4, r4, #2
 800a688:	2600      	movs	r6, #0
 800a68a:	42a6      	cmp	r6, r4
 800a68c:	d105      	bne.n	800a69a <__libc_init_array+0x2e>
 800a68e:	bd70      	pop	{r4, r5, r6, pc}
 800a690:	f855 3b04 	ldr.w	r3, [r5], #4
 800a694:	4798      	blx	r3
 800a696:	3601      	adds	r6, #1
 800a698:	e7ee      	b.n	800a678 <__libc_init_array+0xc>
 800a69a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a69e:	4798      	blx	r3
 800a6a0:	3601      	adds	r6, #1
 800a6a2:	e7f2      	b.n	800a68a <__libc_init_array+0x1e>
 800a6a4:	0800e1a0 	.word	0x0800e1a0
 800a6a8:	0800e1a0 	.word	0x0800e1a0
 800a6ac:	0800e1a0 	.word	0x0800e1a0
 800a6b0:	0800e1a4 	.word	0x0800e1a4

0800a6b4 <__retarget_lock_init_recursive>:
 800a6b4:	4770      	bx	lr

0800a6b6 <__retarget_lock_acquire_recursive>:
 800a6b6:	4770      	bx	lr

0800a6b8 <__retarget_lock_release_recursive>:
 800a6b8:	4770      	bx	lr

0800a6ba <memcpy>:
 800a6ba:	440a      	add	r2, r1
 800a6bc:	4291      	cmp	r1, r2
 800a6be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a6c2:	d100      	bne.n	800a6c6 <memcpy+0xc>
 800a6c4:	4770      	bx	lr
 800a6c6:	b510      	push	{r4, lr}
 800a6c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a6d0:	4291      	cmp	r1, r2
 800a6d2:	d1f9      	bne.n	800a6c8 <memcpy+0xe>
 800a6d4:	bd10      	pop	{r4, pc}

0800a6d6 <memset>:
 800a6d6:	4402      	add	r2, r0
 800a6d8:	4603      	mov	r3, r0
 800a6da:	4293      	cmp	r3, r2
 800a6dc:	d100      	bne.n	800a6e0 <memset+0xa>
 800a6de:	4770      	bx	lr
 800a6e0:	f803 1b01 	strb.w	r1, [r3], #1
 800a6e4:	e7f9      	b.n	800a6da <memset+0x4>
	...

0800a6e8 <sbrk_aligned>:
 800a6e8:	b570      	push	{r4, r5, r6, lr}
 800a6ea:	4e0e      	ldr	r6, [pc, #56]	; (800a724 <sbrk_aligned+0x3c>)
 800a6ec:	460c      	mov	r4, r1
 800a6ee:	6831      	ldr	r1, [r6, #0]
 800a6f0:	4605      	mov	r5, r0
 800a6f2:	b911      	cbnz	r1, 800a6fa <sbrk_aligned+0x12>
 800a6f4:	f000 f984 	bl	800aa00 <_sbrk_r>
 800a6f8:	6030      	str	r0, [r6, #0]
 800a6fa:	4621      	mov	r1, r4
 800a6fc:	4628      	mov	r0, r5
 800a6fe:	f000 f97f 	bl	800aa00 <_sbrk_r>
 800a702:	1c43      	adds	r3, r0, #1
 800a704:	d00a      	beq.n	800a71c <sbrk_aligned+0x34>
 800a706:	1cc4      	adds	r4, r0, #3
 800a708:	f024 0403 	bic.w	r4, r4, #3
 800a70c:	42a0      	cmp	r0, r4
 800a70e:	d007      	beq.n	800a720 <sbrk_aligned+0x38>
 800a710:	1a21      	subs	r1, r4, r0
 800a712:	4628      	mov	r0, r5
 800a714:	f000 f974 	bl	800aa00 <_sbrk_r>
 800a718:	3001      	adds	r0, #1
 800a71a:	d101      	bne.n	800a720 <sbrk_aligned+0x38>
 800a71c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a720:	4620      	mov	r0, r4
 800a722:	bd70      	pop	{r4, r5, r6, pc}
 800a724:	20004900 	.word	0x20004900

0800a728 <_malloc_r>:
 800a728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a72c:	1ccd      	adds	r5, r1, #3
 800a72e:	f025 0503 	bic.w	r5, r5, #3
 800a732:	3508      	adds	r5, #8
 800a734:	2d0c      	cmp	r5, #12
 800a736:	bf38      	it	cc
 800a738:	250c      	movcc	r5, #12
 800a73a:	2d00      	cmp	r5, #0
 800a73c:	4607      	mov	r7, r0
 800a73e:	db01      	blt.n	800a744 <_malloc_r+0x1c>
 800a740:	42a9      	cmp	r1, r5
 800a742:	d905      	bls.n	800a750 <_malloc_r+0x28>
 800a744:	230c      	movs	r3, #12
 800a746:	603b      	str	r3, [r7, #0]
 800a748:	2600      	movs	r6, #0
 800a74a:	4630      	mov	r0, r6
 800a74c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a750:	4e2e      	ldr	r6, [pc, #184]	; (800a80c <_malloc_r+0xe4>)
 800a752:	f001 fd89 	bl	800c268 <__malloc_lock>
 800a756:	6833      	ldr	r3, [r6, #0]
 800a758:	461c      	mov	r4, r3
 800a75a:	bb34      	cbnz	r4, 800a7aa <_malloc_r+0x82>
 800a75c:	4629      	mov	r1, r5
 800a75e:	4638      	mov	r0, r7
 800a760:	f7ff ffc2 	bl	800a6e8 <sbrk_aligned>
 800a764:	1c43      	adds	r3, r0, #1
 800a766:	4604      	mov	r4, r0
 800a768:	d14d      	bne.n	800a806 <_malloc_r+0xde>
 800a76a:	6834      	ldr	r4, [r6, #0]
 800a76c:	4626      	mov	r6, r4
 800a76e:	2e00      	cmp	r6, #0
 800a770:	d140      	bne.n	800a7f4 <_malloc_r+0xcc>
 800a772:	6823      	ldr	r3, [r4, #0]
 800a774:	4631      	mov	r1, r6
 800a776:	4638      	mov	r0, r7
 800a778:	eb04 0803 	add.w	r8, r4, r3
 800a77c:	f000 f940 	bl	800aa00 <_sbrk_r>
 800a780:	4580      	cmp	r8, r0
 800a782:	d13a      	bne.n	800a7fa <_malloc_r+0xd2>
 800a784:	6821      	ldr	r1, [r4, #0]
 800a786:	3503      	adds	r5, #3
 800a788:	1a6d      	subs	r5, r5, r1
 800a78a:	f025 0503 	bic.w	r5, r5, #3
 800a78e:	3508      	adds	r5, #8
 800a790:	2d0c      	cmp	r5, #12
 800a792:	bf38      	it	cc
 800a794:	250c      	movcc	r5, #12
 800a796:	4629      	mov	r1, r5
 800a798:	4638      	mov	r0, r7
 800a79a:	f7ff ffa5 	bl	800a6e8 <sbrk_aligned>
 800a79e:	3001      	adds	r0, #1
 800a7a0:	d02b      	beq.n	800a7fa <_malloc_r+0xd2>
 800a7a2:	6823      	ldr	r3, [r4, #0]
 800a7a4:	442b      	add	r3, r5
 800a7a6:	6023      	str	r3, [r4, #0]
 800a7a8:	e00e      	b.n	800a7c8 <_malloc_r+0xa0>
 800a7aa:	6822      	ldr	r2, [r4, #0]
 800a7ac:	1b52      	subs	r2, r2, r5
 800a7ae:	d41e      	bmi.n	800a7ee <_malloc_r+0xc6>
 800a7b0:	2a0b      	cmp	r2, #11
 800a7b2:	d916      	bls.n	800a7e2 <_malloc_r+0xba>
 800a7b4:	1961      	adds	r1, r4, r5
 800a7b6:	42a3      	cmp	r3, r4
 800a7b8:	6025      	str	r5, [r4, #0]
 800a7ba:	bf18      	it	ne
 800a7bc:	6059      	strne	r1, [r3, #4]
 800a7be:	6863      	ldr	r3, [r4, #4]
 800a7c0:	bf08      	it	eq
 800a7c2:	6031      	streq	r1, [r6, #0]
 800a7c4:	5162      	str	r2, [r4, r5]
 800a7c6:	604b      	str	r3, [r1, #4]
 800a7c8:	4638      	mov	r0, r7
 800a7ca:	f104 060b 	add.w	r6, r4, #11
 800a7ce:	f001 fd51 	bl	800c274 <__malloc_unlock>
 800a7d2:	f026 0607 	bic.w	r6, r6, #7
 800a7d6:	1d23      	adds	r3, r4, #4
 800a7d8:	1af2      	subs	r2, r6, r3
 800a7da:	d0b6      	beq.n	800a74a <_malloc_r+0x22>
 800a7dc:	1b9b      	subs	r3, r3, r6
 800a7de:	50a3      	str	r3, [r4, r2]
 800a7e0:	e7b3      	b.n	800a74a <_malloc_r+0x22>
 800a7e2:	6862      	ldr	r2, [r4, #4]
 800a7e4:	42a3      	cmp	r3, r4
 800a7e6:	bf0c      	ite	eq
 800a7e8:	6032      	streq	r2, [r6, #0]
 800a7ea:	605a      	strne	r2, [r3, #4]
 800a7ec:	e7ec      	b.n	800a7c8 <_malloc_r+0xa0>
 800a7ee:	4623      	mov	r3, r4
 800a7f0:	6864      	ldr	r4, [r4, #4]
 800a7f2:	e7b2      	b.n	800a75a <_malloc_r+0x32>
 800a7f4:	4634      	mov	r4, r6
 800a7f6:	6876      	ldr	r6, [r6, #4]
 800a7f8:	e7b9      	b.n	800a76e <_malloc_r+0x46>
 800a7fa:	230c      	movs	r3, #12
 800a7fc:	603b      	str	r3, [r7, #0]
 800a7fe:	4638      	mov	r0, r7
 800a800:	f001 fd38 	bl	800c274 <__malloc_unlock>
 800a804:	e7a1      	b.n	800a74a <_malloc_r+0x22>
 800a806:	6025      	str	r5, [r4, #0]
 800a808:	e7de      	b.n	800a7c8 <_malloc_r+0xa0>
 800a80a:	bf00      	nop
 800a80c:	200048fc 	.word	0x200048fc

0800a810 <iprintf>:
 800a810:	b40f      	push	{r0, r1, r2, r3}
 800a812:	4b0a      	ldr	r3, [pc, #40]	; (800a83c <iprintf+0x2c>)
 800a814:	b513      	push	{r0, r1, r4, lr}
 800a816:	681c      	ldr	r4, [r3, #0]
 800a818:	b124      	cbz	r4, 800a824 <iprintf+0x14>
 800a81a:	69a3      	ldr	r3, [r4, #24]
 800a81c:	b913      	cbnz	r3, 800a824 <iprintf+0x14>
 800a81e:	4620      	mov	r0, r4
 800a820:	f7ff fe86 	bl	800a530 <__sinit>
 800a824:	ab05      	add	r3, sp, #20
 800a826:	9a04      	ldr	r2, [sp, #16]
 800a828:	68a1      	ldr	r1, [r4, #8]
 800a82a:	9301      	str	r3, [sp, #4]
 800a82c:	4620      	mov	r0, r4
 800a82e:	f002 fa75 	bl	800cd1c <_vfiprintf_r>
 800a832:	b002      	add	sp, #8
 800a834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a838:	b004      	add	sp, #16
 800a83a:	4770      	bx	lr
 800a83c:	20000010 	.word	0x20000010

0800a840 <_puts_r>:
 800a840:	b570      	push	{r4, r5, r6, lr}
 800a842:	460e      	mov	r6, r1
 800a844:	4605      	mov	r5, r0
 800a846:	b118      	cbz	r0, 800a850 <_puts_r+0x10>
 800a848:	6983      	ldr	r3, [r0, #24]
 800a84a:	b90b      	cbnz	r3, 800a850 <_puts_r+0x10>
 800a84c:	f7ff fe70 	bl	800a530 <__sinit>
 800a850:	69ab      	ldr	r3, [r5, #24]
 800a852:	68ac      	ldr	r4, [r5, #8]
 800a854:	b913      	cbnz	r3, 800a85c <_puts_r+0x1c>
 800a856:	4628      	mov	r0, r5
 800a858:	f7ff fe6a 	bl	800a530 <__sinit>
 800a85c:	4b2c      	ldr	r3, [pc, #176]	; (800a910 <_puts_r+0xd0>)
 800a85e:	429c      	cmp	r4, r3
 800a860:	d120      	bne.n	800a8a4 <_puts_r+0x64>
 800a862:	686c      	ldr	r4, [r5, #4]
 800a864:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a866:	07db      	lsls	r3, r3, #31
 800a868:	d405      	bmi.n	800a876 <_puts_r+0x36>
 800a86a:	89a3      	ldrh	r3, [r4, #12]
 800a86c:	0598      	lsls	r0, r3, #22
 800a86e:	d402      	bmi.n	800a876 <_puts_r+0x36>
 800a870:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a872:	f7ff ff20 	bl	800a6b6 <__retarget_lock_acquire_recursive>
 800a876:	89a3      	ldrh	r3, [r4, #12]
 800a878:	0719      	lsls	r1, r3, #28
 800a87a:	d51d      	bpl.n	800a8b8 <_puts_r+0x78>
 800a87c:	6923      	ldr	r3, [r4, #16]
 800a87e:	b1db      	cbz	r3, 800a8b8 <_puts_r+0x78>
 800a880:	3e01      	subs	r6, #1
 800a882:	68a3      	ldr	r3, [r4, #8]
 800a884:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a888:	3b01      	subs	r3, #1
 800a88a:	60a3      	str	r3, [r4, #8]
 800a88c:	bb39      	cbnz	r1, 800a8de <_puts_r+0x9e>
 800a88e:	2b00      	cmp	r3, #0
 800a890:	da38      	bge.n	800a904 <_puts_r+0xc4>
 800a892:	4622      	mov	r2, r4
 800a894:	210a      	movs	r1, #10
 800a896:	4628      	mov	r0, r5
 800a898:	f000 ff48 	bl	800b72c <__swbuf_r>
 800a89c:	3001      	adds	r0, #1
 800a89e:	d011      	beq.n	800a8c4 <_puts_r+0x84>
 800a8a0:	250a      	movs	r5, #10
 800a8a2:	e011      	b.n	800a8c8 <_puts_r+0x88>
 800a8a4:	4b1b      	ldr	r3, [pc, #108]	; (800a914 <_puts_r+0xd4>)
 800a8a6:	429c      	cmp	r4, r3
 800a8a8:	d101      	bne.n	800a8ae <_puts_r+0x6e>
 800a8aa:	68ac      	ldr	r4, [r5, #8]
 800a8ac:	e7da      	b.n	800a864 <_puts_r+0x24>
 800a8ae:	4b1a      	ldr	r3, [pc, #104]	; (800a918 <_puts_r+0xd8>)
 800a8b0:	429c      	cmp	r4, r3
 800a8b2:	bf08      	it	eq
 800a8b4:	68ec      	ldreq	r4, [r5, #12]
 800a8b6:	e7d5      	b.n	800a864 <_puts_r+0x24>
 800a8b8:	4621      	mov	r1, r4
 800a8ba:	4628      	mov	r0, r5
 800a8bc:	f000 ff9a 	bl	800b7f4 <__swsetup_r>
 800a8c0:	2800      	cmp	r0, #0
 800a8c2:	d0dd      	beq.n	800a880 <_puts_r+0x40>
 800a8c4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800a8c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a8ca:	07da      	lsls	r2, r3, #31
 800a8cc:	d405      	bmi.n	800a8da <_puts_r+0x9a>
 800a8ce:	89a3      	ldrh	r3, [r4, #12]
 800a8d0:	059b      	lsls	r3, r3, #22
 800a8d2:	d402      	bmi.n	800a8da <_puts_r+0x9a>
 800a8d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8d6:	f7ff feef 	bl	800a6b8 <__retarget_lock_release_recursive>
 800a8da:	4628      	mov	r0, r5
 800a8dc:	bd70      	pop	{r4, r5, r6, pc}
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	da04      	bge.n	800a8ec <_puts_r+0xac>
 800a8e2:	69a2      	ldr	r2, [r4, #24]
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	dc06      	bgt.n	800a8f6 <_puts_r+0xb6>
 800a8e8:	290a      	cmp	r1, #10
 800a8ea:	d004      	beq.n	800a8f6 <_puts_r+0xb6>
 800a8ec:	6823      	ldr	r3, [r4, #0]
 800a8ee:	1c5a      	adds	r2, r3, #1
 800a8f0:	6022      	str	r2, [r4, #0]
 800a8f2:	7019      	strb	r1, [r3, #0]
 800a8f4:	e7c5      	b.n	800a882 <_puts_r+0x42>
 800a8f6:	4622      	mov	r2, r4
 800a8f8:	4628      	mov	r0, r5
 800a8fa:	f000 ff17 	bl	800b72c <__swbuf_r>
 800a8fe:	3001      	adds	r0, #1
 800a900:	d1bf      	bne.n	800a882 <_puts_r+0x42>
 800a902:	e7df      	b.n	800a8c4 <_puts_r+0x84>
 800a904:	6823      	ldr	r3, [r4, #0]
 800a906:	250a      	movs	r5, #10
 800a908:	1c5a      	adds	r2, r3, #1
 800a90a:	6022      	str	r2, [r4, #0]
 800a90c:	701d      	strb	r5, [r3, #0]
 800a90e:	e7db      	b.n	800a8c8 <_puts_r+0x88>
 800a910:	0800dd14 	.word	0x0800dd14
 800a914:	0800dd34 	.word	0x0800dd34
 800a918:	0800dcf4 	.word	0x0800dcf4

0800a91c <puts>:
 800a91c:	4b02      	ldr	r3, [pc, #8]	; (800a928 <puts+0xc>)
 800a91e:	4601      	mov	r1, r0
 800a920:	6818      	ldr	r0, [r3, #0]
 800a922:	f7ff bf8d 	b.w	800a840 <_puts_r>
 800a926:	bf00      	nop
 800a928:	20000010 	.word	0x20000010

0800a92c <cleanup_glue>:
 800a92c:	b538      	push	{r3, r4, r5, lr}
 800a92e:	460c      	mov	r4, r1
 800a930:	6809      	ldr	r1, [r1, #0]
 800a932:	4605      	mov	r5, r0
 800a934:	b109      	cbz	r1, 800a93a <cleanup_glue+0xe>
 800a936:	f7ff fff9 	bl	800a92c <cleanup_glue>
 800a93a:	4621      	mov	r1, r4
 800a93c:	4628      	mov	r0, r5
 800a93e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a942:	f002 b975 	b.w	800cc30 <_free_r>
	...

0800a948 <_reclaim_reent>:
 800a948:	4b2c      	ldr	r3, [pc, #176]	; (800a9fc <_reclaim_reent+0xb4>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	4283      	cmp	r3, r0
 800a94e:	b570      	push	{r4, r5, r6, lr}
 800a950:	4604      	mov	r4, r0
 800a952:	d051      	beq.n	800a9f8 <_reclaim_reent+0xb0>
 800a954:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a956:	b143      	cbz	r3, 800a96a <_reclaim_reent+0x22>
 800a958:	68db      	ldr	r3, [r3, #12]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d14a      	bne.n	800a9f4 <_reclaim_reent+0xac>
 800a95e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a960:	6819      	ldr	r1, [r3, #0]
 800a962:	b111      	cbz	r1, 800a96a <_reclaim_reent+0x22>
 800a964:	4620      	mov	r0, r4
 800a966:	f002 f963 	bl	800cc30 <_free_r>
 800a96a:	6961      	ldr	r1, [r4, #20]
 800a96c:	b111      	cbz	r1, 800a974 <_reclaim_reent+0x2c>
 800a96e:	4620      	mov	r0, r4
 800a970:	f002 f95e 	bl	800cc30 <_free_r>
 800a974:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a976:	b111      	cbz	r1, 800a97e <_reclaim_reent+0x36>
 800a978:	4620      	mov	r0, r4
 800a97a:	f002 f959 	bl	800cc30 <_free_r>
 800a97e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a980:	b111      	cbz	r1, 800a988 <_reclaim_reent+0x40>
 800a982:	4620      	mov	r0, r4
 800a984:	f002 f954 	bl	800cc30 <_free_r>
 800a988:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a98a:	b111      	cbz	r1, 800a992 <_reclaim_reent+0x4a>
 800a98c:	4620      	mov	r0, r4
 800a98e:	f002 f94f 	bl	800cc30 <_free_r>
 800a992:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a994:	b111      	cbz	r1, 800a99c <_reclaim_reent+0x54>
 800a996:	4620      	mov	r0, r4
 800a998:	f002 f94a 	bl	800cc30 <_free_r>
 800a99c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a99e:	b111      	cbz	r1, 800a9a6 <_reclaim_reent+0x5e>
 800a9a0:	4620      	mov	r0, r4
 800a9a2:	f002 f945 	bl	800cc30 <_free_r>
 800a9a6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a9a8:	b111      	cbz	r1, 800a9b0 <_reclaim_reent+0x68>
 800a9aa:	4620      	mov	r0, r4
 800a9ac:	f002 f940 	bl	800cc30 <_free_r>
 800a9b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a9b2:	b111      	cbz	r1, 800a9ba <_reclaim_reent+0x72>
 800a9b4:	4620      	mov	r0, r4
 800a9b6:	f002 f93b 	bl	800cc30 <_free_r>
 800a9ba:	69a3      	ldr	r3, [r4, #24]
 800a9bc:	b1e3      	cbz	r3, 800a9f8 <_reclaim_reent+0xb0>
 800a9be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a9c0:	4620      	mov	r0, r4
 800a9c2:	4798      	blx	r3
 800a9c4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a9c6:	b1b9      	cbz	r1, 800a9f8 <_reclaim_reent+0xb0>
 800a9c8:	4620      	mov	r0, r4
 800a9ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a9ce:	f7ff bfad 	b.w	800a92c <cleanup_glue>
 800a9d2:	5949      	ldr	r1, [r1, r5]
 800a9d4:	b941      	cbnz	r1, 800a9e8 <_reclaim_reent+0xa0>
 800a9d6:	3504      	adds	r5, #4
 800a9d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9da:	2d80      	cmp	r5, #128	; 0x80
 800a9dc:	68d9      	ldr	r1, [r3, #12]
 800a9de:	d1f8      	bne.n	800a9d2 <_reclaim_reent+0x8a>
 800a9e0:	4620      	mov	r0, r4
 800a9e2:	f002 f925 	bl	800cc30 <_free_r>
 800a9e6:	e7ba      	b.n	800a95e <_reclaim_reent+0x16>
 800a9e8:	680e      	ldr	r6, [r1, #0]
 800a9ea:	4620      	mov	r0, r4
 800a9ec:	f002 f920 	bl	800cc30 <_free_r>
 800a9f0:	4631      	mov	r1, r6
 800a9f2:	e7ef      	b.n	800a9d4 <_reclaim_reent+0x8c>
 800a9f4:	2500      	movs	r5, #0
 800a9f6:	e7ef      	b.n	800a9d8 <_reclaim_reent+0x90>
 800a9f8:	bd70      	pop	{r4, r5, r6, pc}
 800a9fa:	bf00      	nop
 800a9fc:	20000010 	.word	0x20000010

0800aa00 <_sbrk_r>:
 800aa00:	b538      	push	{r3, r4, r5, lr}
 800aa02:	4d06      	ldr	r5, [pc, #24]	; (800aa1c <_sbrk_r+0x1c>)
 800aa04:	2300      	movs	r3, #0
 800aa06:	4604      	mov	r4, r0
 800aa08:	4608      	mov	r0, r1
 800aa0a:	602b      	str	r3, [r5, #0]
 800aa0c:	f7f7 fdc2 	bl	8002594 <_sbrk>
 800aa10:	1c43      	adds	r3, r0, #1
 800aa12:	d102      	bne.n	800aa1a <_sbrk_r+0x1a>
 800aa14:	682b      	ldr	r3, [r5, #0]
 800aa16:	b103      	cbz	r3, 800aa1a <_sbrk_r+0x1a>
 800aa18:	6023      	str	r3, [r4, #0]
 800aa1a:	bd38      	pop	{r3, r4, r5, pc}
 800aa1c:	20004904 	.word	0x20004904

0800aa20 <__sread>:
 800aa20:	b510      	push	{r4, lr}
 800aa22:	460c      	mov	r4, r1
 800aa24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa28:	f002 fc3c 	bl	800d2a4 <_read_r>
 800aa2c:	2800      	cmp	r0, #0
 800aa2e:	bfab      	itete	ge
 800aa30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aa32:	89a3      	ldrhlt	r3, [r4, #12]
 800aa34:	181b      	addge	r3, r3, r0
 800aa36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aa3a:	bfac      	ite	ge
 800aa3c:	6563      	strge	r3, [r4, #84]	; 0x54
 800aa3e:	81a3      	strhlt	r3, [r4, #12]
 800aa40:	bd10      	pop	{r4, pc}

0800aa42 <__swrite>:
 800aa42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa46:	461f      	mov	r7, r3
 800aa48:	898b      	ldrh	r3, [r1, #12]
 800aa4a:	05db      	lsls	r3, r3, #23
 800aa4c:	4605      	mov	r5, r0
 800aa4e:	460c      	mov	r4, r1
 800aa50:	4616      	mov	r6, r2
 800aa52:	d505      	bpl.n	800aa60 <__swrite+0x1e>
 800aa54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa58:	2302      	movs	r3, #2
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	f001 fb7a 	bl	800c154 <_lseek_r>
 800aa60:	89a3      	ldrh	r3, [r4, #12]
 800aa62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aa6a:	81a3      	strh	r3, [r4, #12]
 800aa6c:	4632      	mov	r2, r6
 800aa6e:	463b      	mov	r3, r7
 800aa70:	4628      	mov	r0, r5
 800aa72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa76:	f000 beab 	b.w	800b7d0 <_write_r>

0800aa7a <__sseek>:
 800aa7a:	b510      	push	{r4, lr}
 800aa7c:	460c      	mov	r4, r1
 800aa7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa82:	f001 fb67 	bl	800c154 <_lseek_r>
 800aa86:	1c43      	adds	r3, r0, #1
 800aa88:	89a3      	ldrh	r3, [r4, #12]
 800aa8a:	bf15      	itete	ne
 800aa8c:	6560      	strne	r0, [r4, #84]	; 0x54
 800aa8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aa92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aa96:	81a3      	strheq	r3, [r4, #12]
 800aa98:	bf18      	it	ne
 800aa9a:	81a3      	strhne	r3, [r4, #12]
 800aa9c:	bd10      	pop	{r4, pc}

0800aa9e <__sclose>:
 800aa9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaa2:	f000 bf15 	b.w	800b8d0 <_close_r>

0800aaa6 <strncmp>:
 800aaa6:	b510      	push	{r4, lr}
 800aaa8:	b17a      	cbz	r2, 800aaca <strncmp+0x24>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	3901      	subs	r1, #1
 800aaae:	1884      	adds	r4, r0, r2
 800aab0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800aab4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800aab8:	4290      	cmp	r0, r2
 800aaba:	d101      	bne.n	800aac0 <strncmp+0x1a>
 800aabc:	42a3      	cmp	r3, r4
 800aabe:	d101      	bne.n	800aac4 <strncmp+0x1e>
 800aac0:	1a80      	subs	r0, r0, r2
 800aac2:	bd10      	pop	{r4, pc}
 800aac4:	2800      	cmp	r0, #0
 800aac6:	d1f3      	bne.n	800aab0 <strncmp+0xa>
 800aac8:	e7fa      	b.n	800aac0 <strncmp+0x1a>
 800aaca:	4610      	mov	r0, r2
 800aacc:	e7f9      	b.n	800aac2 <strncmp+0x1c>

0800aace <sulp>:
 800aace:	b570      	push	{r4, r5, r6, lr}
 800aad0:	4604      	mov	r4, r0
 800aad2:	460d      	mov	r5, r1
 800aad4:	ec45 4b10 	vmov	d0, r4, r5
 800aad8:	4616      	mov	r6, r2
 800aada:	f001 ff43 	bl	800c964 <__ulp>
 800aade:	ec51 0b10 	vmov	r0, r1, d0
 800aae2:	b17e      	cbz	r6, 800ab04 <sulp+0x36>
 800aae4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800aae8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	dd09      	ble.n	800ab04 <sulp+0x36>
 800aaf0:	051b      	lsls	r3, r3, #20
 800aaf2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800aaf6:	2400      	movs	r4, #0
 800aaf8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800aafc:	4622      	mov	r2, r4
 800aafe:	462b      	mov	r3, r5
 800ab00:	f7f5 fd82 	bl	8000608 <__aeabi_dmul>
 800ab04:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ab08 <_strtod_l>:
 800ab08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab0c:	ed2d 8b02 	vpush	{d8}
 800ab10:	b09d      	sub	sp, #116	; 0x74
 800ab12:	461f      	mov	r7, r3
 800ab14:	2300      	movs	r3, #0
 800ab16:	9318      	str	r3, [sp, #96]	; 0x60
 800ab18:	4ba2      	ldr	r3, [pc, #648]	; (800ada4 <_strtod_l+0x29c>)
 800ab1a:	9213      	str	r2, [sp, #76]	; 0x4c
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	9305      	str	r3, [sp, #20]
 800ab20:	4604      	mov	r4, r0
 800ab22:	4618      	mov	r0, r3
 800ab24:	4688      	mov	r8, r1
 800ab26:	f7f5 fb5b 	bl	80001e0 <strlen>
 800ab2a:	f04f 0a00 	mov.w	sl, #0
 800ab2e:	4605      	mov	r5, r0
 800ab30:	f04f 0b00 	mov.w	fp, #0
 800ab34:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ab38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ab3a:	781a      	ldrb	r2, [r3, #0]
 800ab3c:	2a2b      	cmp	r2, #43	; 0x2b
 800ab3e:	d04e      	beq.n	800abde <_strtod_l+0xd6>
 800ab40:	d83b      	bhi.n	800abba <_strtod_l+0xb2>
 800ab42:	2a0d      	cmp	r2, #13
 800ab44:	d834      	bhi.n	800abb0 <_strtod_l+0xa8>
 800ab46:	2a08      	cmp	r2, #8
 800ab48:	d834      	bhi.n	800abb4 <_strtod_l+0xac>
 800ab4a:	2a00      	cmp	r2, #0
 800ab4c:	d03e      	beq.n	800abcc <_strtod_l+0xc4>
 800ab4e:	2300      	movs	r3, #0
 800ab50:	930a      	str	r3, [sp, #40]	; 0x28
 800ab52:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ab54:	7833      	ldrb	r3, [r6, #0]
 800ab56:	2b30      	cmp	r3, #48	; 0x30
 800ab58:	f040 80b0 	bne.w	800acbc <_strtod_l+0x1b4>
 800ab5c:	7873      	ldrb	r3, [r6, #1]
 800ab5e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ab62:	2b58      	cmp	r3, #88	; 0x58
 800ab64:	d168      	bne.n	800ac38 <_strtod_l+0x130>
 800ab66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab68:	9301      	str	r3, [sp, #4]
 800ab6a:	ab18      	add	r3, sp, #96	; 0x60
 800ab6c:	9702      	str	r7, [sp, #8]
 800ab6e:	9300      	str	r3, [sp, #0]
 800ab70:	4a8d      	ldr	r2, [pc, #564]	; (800ada8 <_strtod_l+0x2a0>)
 800ab72:	ab19      	add	r3, sp, #100	; 0x64
 800ab74:	a917      	add	r1, sp, #92	; 0x5c
 800ab76:	4620      	mov	r0, r4
 800ab78:	f000 ffe4 	bl	800bb44 <__gethex>
 800ab7c:	f010 0707 	ands.w	r7, r0, #7
 800ab80:	4605      	mov	r5, r0
 800ab82:	d005      	beq.n	800ab90 <_strtod_l+0x88>
 800ab84:	2f06      	cmp	r7, #6
 800ab86:	d12c      	bne.n	800abe2 <_strtod_l+0xda>
 800ab88:	3601      	adds	r6, #1
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	9617      	str	r6, [sp, #92]	; 0x5c
 800ab8e:	930a      	str	r3, [sp, #40]	; 0x28
 800ab90:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	f040 8590 	bne.w	800b6b8 <_strtod_l+0xbb0>
 800ab98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab9a:	b1eb      	cbz	r3, 800abd8 <_strtod_l+0xd0>
 800ab9c:	4652      	mov	r2, sl
 800ab9e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800aba2:	ec43 2b10 	vmov	d0, r2, r3
 800aba6:	b01d      	add	sp, #116	; 0x74
 800aba8:	ecbd 8b02 	vpop	{d8}
 800abac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abb0:	2a20      	cmp	r2, #32
 800abb2:	d1cc      	bne.n	800ab4e <_strtod_l+0x46>
 800abb4:	3301      	adds	r3, #1
 800abb6:	9317      	str	r3, [sp, #92]	; 0x5c
 800abb8:	e7be      	b.n	800ab38 <_strtod_l+0x30>
 800abba:	2a2d      	cmp	r2, #45	; 0x2d
 800abbc:	d1c7      	bne.n	800ab4e <_strtod_l+0x46>
 800abbe:	2201      	movs	r2, #1
 800abc0:	920a      	str	r2, [sp, #40]	; 0x28
 800abc2:	1c5a      	adds	r2, r3, #1
 800abc4:	9217      	str	r2, [sp, #92]	; 0x5c
 800abc6:	785b      	ldrb	r3, [r3, #1]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d1c2      	bne.n	800ab52 <_strtod_l+0x4a>
 800abcc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800abce:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	f040 856e 	bne.w	800b6b4 <_strtod_l+0xbac>
 800abd8:	4652      	mov	r2, sl
 800abda:	465b      	mov	r3, fp
 800abdc:	e7e1      	b.n	800aba2 <_strtod_l+0x9a>
 800abde:	2200      	movs	r2, #0
 800abe0:	e7ee      	b.n	800abc0 <_strtod_l+0xb8>
 800abe2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800abe4:	b13a      	cbz	r2, 800abf6 <_strtod_l+0xee>
 800abe6:	2135      	movs	r1, #53	; 0x35
 800abe8:	a81a      	add	r0, sp, #104	; 0x68
 800abea:	f001 ffc6 	bl	800cb7a <__copybits>
 800abee:	9918      	ldr	r1, [sp, #96]	; 0x60
 800abf0:	4620      	mov	r0, r4
 800abf2:	f001 fb85 	bl	800c300 <_Bfree>
 800abf6:	3f01      	subs	r7, #1
 800abf8:	2f04      	cmp	r7, #4
 800abfa:	d806      	bhi.n	800ac0a <_strtod_l+0x102>
 800abfc:	e8df f007 	tbb	[pc, r7]
 800ac00:	1714030a 	.word	0x1714030a
 800ac04:	0a          	.byte	0x0a
 800ac05:	00          	.byte	0x00
 800ac06:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800ac0a:	0728      	lsls	r0, r5, #28
 800ac0c:	d5c0      	bpl.n	800ab90 <_strtod_l+0x88>
 800ac0e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800ac12:	e7bd      	b.n	800ab90 <_strtod_l+0x88>
 800ac14:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800ac18:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ac1a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ac1e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ac22:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ac26:	e7f0      	b.n	800ac0a <_strtod_l+0x102>
 800ac28:	f8df b180 	ldr.w	fp, [pc, #384]	; 800adac <_strtod_l+0x2a4>
 800ac2c:	e7ed      	b.n	800ac0a <_strtod_l+0x102>
 800ac2e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800ac32:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800ac36:	e7e8      	b.n	800ac0a <_strtod_l+0x102>
 800ac38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ac3a:	1c5a      	adds	r2, r3, #1
 800ac3c:	9217      	str	r2, [sp, #92]	; 0x5c
 800ac3e:	785b      	ldrb	r3, [r3, #1]
 800ac40:	2b30      	cmp	r3, #48	; 0x30
 800ac42:	d0f9      	beq.n	800ac38 <_strtod_l+0x130>
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d0a3      	beq.n	800ab90 <_strtod_l+0x88>
 800ac48:	2301      	movs	r3, #1
 800ac4a:	f04f 0900 	mov.w	r9, #0
 800ac4e:	9304      	str	r3, [sp, #16]
 800ac50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ac52:	9308      	str	r3, [sp, #32]
 800ac54:	f8cd 901c 	str.w	r9, [sp, #28]
 800ac58:	464f      	mov	r7, r9
 800ac5a:	220a      	movs	r2, #10
 800ac5c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800ac5e:	7806      	ldrb	r6, [r0, #0]
 800ac60:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ac64:	b2d9      	uxtb	r1, r3
 800ac66:	2909      	cmp	r1, #9
 800ac68:	d92a      	bls.n	800acc0 <_strtod_l+0x1b8>
 800ac6a:	9905      	ldr	r1, [sp, #20]
 800ac6c:	462a      	mov	r2, r5
 800ac6e:	f7ff ff1a 	bl	800aaa6 <strncmp>
 800ac72:	b398      	cbz	r0, 800acdc <_strtod_l+0x1d4>
 800ac74:	2000      	movs	r0, #0
 800ac76:	4632      	mov	r2, r6
 800ac78:	463d      	mov	r5, r7
 800ac7a:	9005      	str	r0, [sp, #20]
 800ac7c:	4603      	mov	r3, r0
 800ac7e:	2a65      	cmp	r2, #101	; 0x65
 800ac80:	d001      	beq.n	800ac86 <_strtod_l+0x17e>
 800ac82:	2a45      	cmp	r2, #69	; 0x45
 800ac84:	d118      	bne.n	800acb8 <_strtod_l+0x1b0>
 800ac86:	b91d      	cbnz	r5, 800ac90 <_strtod_l+0x188>
 800ac88:	9a04      	ldr	r2, [sp, #16]
 800ac8a:	4302      	orrs	r2, r0
 800ac8c:	d09e      	beq.n	800abcc <_strtod_l+0xc4>
 800ac8e:	2500      	movs	r5, #0
 800ac90:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800ac94:	f108 0201 	add.w	r2, r8, #1
 800ac98:	9217      	str	r2, [sp, #92]	; 0x5c
 800ac9a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800ac9e:	2a2b      	cmp	r2, #43	; 0x2b
 800aca0:	d075      	beq.n	800ad8e <_strtod_l+0x286>
 800aca2:	2a2d      	cmp	r2, #45	; 0x2d
 800aca4:	d07b      	beq.n	800ad9e <_strtod_l+0x296>
 800aca6:	f04f 0c00 	mov.w	ip, #0
 800acaa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800acae:	2909      	cmp	r1, #9
 800acb0:	f240 8082 	bls.w	800adb8 <_strtod_l+0x2b0>
 800acb4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800acb8:	2600      	movs	r6, #0
 800acba:	e09d      	b.n	800adf8 <_strtod_l+0x2f0>
 800acbc:	2300      	movs	r3, #0
 800acbe:	e7c4      	b.n	800ac4a <_strtod_l+0x142>
 800acc0:	2f08      	cmp	r7, #8
 800acc2:	bfd8      	it	le
 800acc4:	9907      	ldrle	r1, [sp, #28]
 800acc6:	f100 0001 	add.w	r0, r0, #1
 800acca:	bfda      	itte	le
 800accc:	fb02 3301 	mlale	r3, r2, r1, r3
 800acd0:	9307      	strle	r3, [sp, #28]
 800acd2:	fb02 3909 	mlagt	r9, r2, r9, r3
 800acd6:	3701      	adds	r7, #1
 800acd8:	9017      	str	r0, [sp, #92]	; 0x5c
 800acda:	e7bf      	b.n	800ac5c <_strtod_l+0x154>
 800acdc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800acde:	195a      	adds	r2, r3, r5
 800ace0:	9217      	str	r2, [sp, #92]	; 0x5c
 800ace2:	5d5a      	ldrb	r2, [r3, r5]
 800ace4:	2f00      	cmp	r7, #0
 800ace6:	d037      	beq.n	800ad58 <_strtod_l+0x250>
 800ace8:	9005      	str	r0, [sp, #20]
 800acea:	463d      	mov	r5, r7
 800acec:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800acf0:	2b09      	cmp	r3, #9
 800acf2:	d912      	bls.n	800ad1a <_strtod_l+0x212>
 800acf4:	2301      	movs	r3, #1
 800acf6:	e7c2      	b.n	800ac7e <_strtod_l+0x176>
 800acf8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800acfa:	1c5a      	adds	r2, r3, #1
 800acfc:	9217      	str	r2, [sp, #92]	; 0x5c
 800acfe:	785a      	ldrb	r2, [r3, #1]
 800ad00:	3001      	adds	r0, #1
 800ad02:	2a30      	cmp	r2, #48	; 0x30
 800ad04:	d0f8      	beq.n	800acf8 <_strtod_l+0x1f0>
 800ad06:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ad0a:	2b08      	cmp	r3, #8
 800ad0c:	f200 84d9 	bhi.w	800b6c2 <_strtod_l+0xbba>
 800ad10:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ad12:	9005      	str	r0, [sp, #20]
 800ad14:	2000      	movs	r0, #0
 800ad16:	9308      	str	r3, [sp, #32]
 800ad18:	4605      	mov	r5, r0
 800ad1a:	3a30      	subs	r2, #48	; 0x30
 800ad1c:	f100 0301 	add.w	r3, r0, #1
 800ad20:	d014      	beq.n	800ad4c <_strtod_l+0x244>
 800ad22:	9905      	ldr	r1, [sp, #20]
 800ad24:	4419      	add	r1, r3
 800ad26:	9105      	str	r1, [sp, #20]
 800ad28:	462b      	mov	r3, r5
 800ad2a:	eb00 0e05 	add.w	lr, r0, r5
 800ad2e:	210a      	movs	r1, #10
 800ad30:	4573      	cmp	r3, lr
 800ad32:	d113      	bne.n	800ad5c <_strtod_l+0x254>
 800ad34:	182b      	adds	r3, r5, r0
 800ad36:	2b08      	cmp	r3, #8
 800ad38:	f105 0501 	add.w	r5, r5, #1
 800ad3c:	4405      	add	r5, r0
 800ad3e:	dc1c      	bgt.n	800ad7a <_strtod_l+0x272>
 800ad40:	9907      	ldr	r1, [sp, #28]
 800ad42:	230a      	movs	r3, #10
 800ad44:	fb03 2301 	mla	r3, r3, r1, r2
 800ad48:	9307      	str	r3, [sp, #28]
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ad4e:	1c51      	adds	r1, r2, #1
 800ad50:	9117      	str	r1, [sp, #92]	; 0x5c
 800ad52:	7852      	ldrb	r2, [r2, #1]
 800ad54:	4618      	mov	r0, r3
 800ad56:	e7c9      	b.n	800acec <_strtod_l+0x1e4>
 800ad58:	4638      	mov	r0, r7
 800ad5a:	e7d2      	b.n	800ad02 <_strtod_l+0x1fa>
 800ad5c:	2b08      	cmp	r3, #8
 800ad5e:	dc04      	bgt.n	800ad6a <_strtod_l+0x262>
 800ad60:	9e07      	ldr	r6, [sp, #28]
 800ad62:	434e      	muls	r6, r1
 800ad64:	9607      	str	r6, [sp, #28]
 800ad66:	3301      	adds	r3, #1
 800ad68:	e7e2      	b.n	800ad30 <_strtod_l+0x228>
 800ad6a:	f103 0c01 	add.w	ip, r3, #1
 800ad6e:	f1bc 0f10 	cmp.w	ip, #16
 800ad72:	bfd8      	it	le
 800ad74:	fb01 f909 	mulle.w	r9, r1, r9
 800ad78:	e7f5      	b.n	800ad66 <_strtod_l+0x25e>
 800ad7a:	2d10      	cmp	r5, #16
 800ad7c:	bfdc      	itt	le
 800ad7e:	230a      	movle	r3, #10
 800ad80:	fb03 2909 	mlale	r9, r3, r9, r2
 800ad84:	e7e1      	b.n	800ad4a <_strtod_l+0x242>
 800ad86:	2300      	movs	r3, #0
 800ad88:	9305      	str	r3, [sp, #20]
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	e77c      	b.n	800ac88 <_strtod_l+0x180>
 800ad8e:	f04f 0c00 	mov.w	ip, #0
 800ad92:	f108 0202 	add.w	r2, r8, #2
 800ad96:	9217      	str	r2, [sp, #92]	; 0x5c
 800ad98:	f898 2002 	ldrb.w	r2, [r8, #2]
 800ad9c:	e785      	b.n	800acaa <_strtod_l+0x1a2>
 800ad9e:	f04f 0c01 	mov.w	ip, #1
 800ada2:	e7f6      	b.n	800ad92 <_strtod_l+0x28a>
 800ada4:	0800de30 	.word	0x0800de30
 800ada8:	0800dd64 	.word	0x0800dd64
 800adac:	7ff00000 	.word	0x7ff00000
 800adb0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800adb2:	1c51      	adds	r1, r2, #1
 800adb4:	9117      	str	r1, [sp, #92]	; 0x5c
 800adb6:	7852      	ldrb	r2, [r2, #1]
 800adb8:	2a30      	cmp	r2, #48	; 0x30
 800adba:	d0f9      	beq.n	800adb0 <_strtod_l+0x2a8>
 800adbc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800adc0:	2908      	cmp	r1, #8
 800adc2:	f63f af79 	bhi.w	800acb8 <_strtod_l+0x1b0>
 800adc6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800adca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800adcc:	9206      	str	r2, [sp, #24]
 800adce:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800add0:	1c51      	adds	r1, r2, #1
 800add2:	9117      	str	r1, [sp, #92]	; 0x5c
 800add4:	7852      	ldrb	r2, [r2, #1]
 800add6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800adda:	2e09      	cmp	r6, #9
 800addc:	d937      	bls.n	800ae4e <_strtod_l+0x346>
 800adde:	9e06      	ldr	r6, [sp, #24]
 800ade0:	1b89      	subs	r1, r1, r6
 800ade2:	2908      	cmp	r1, #8
 800ade4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800ade8:	dc02      	bgt.n	800adf0 <_strtod_l+0x2e8>
 800adea:	4576      	cmp	r6, lr
 800adec:	bfa8      	it	ge
 800adee:	4676      	movge	r6, lr
 800adf0:	f1bc 0f00 	cmp.w	ip, #0
 800adf4:	d000      	beq.n	800adf8 <_strtod_l+0x2f0>
 800adf6:	4276      	negs	r6, r6
 800adf8:	2d00      	cmp	r5, #0
 800adfa:	d14d      	bne.n	800ae98 <_strtod_l+0x390>
 800adfc:	9904      	ldr	r1, [sp, #16]
 800adfe:	4301      	orrs	r1, r0
 800ae00:	f47f aec6 	bne.w	800ab90 <_strtod_l+0x88>
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	f47f aee1 	bne.w	800abcc <_strtod_l+0xc4>
 800ae0a:	2a69      	cmp	r2, #105	; 0x69
 800ae0c:	d027      	beq.n	800ae5e <_strtod_l+0x356>
 800ae0e:	dc24      	bgt.n	800ae5a <_strtod_l+0x352>
 800ae10:	2a49      	cmp	r2, #73	; 0x49
 800ae12:	d024      	beq.n	800ae5e <_strtod_l+0x356>
 800ae14:	2a4e      	cmp	r2, #78	; 0x4e
 800ae16:	f47f aed9 	bne.w	800abcc <_strtod_l+0xc4>
 800ae1a:	499f      	ldr	r1, [pc, #636]	; (800b098 <_strtod_l+0x590>)
 800ae1c:	a817      	add	r0, sp, #92	; 0x5c
 800ae1e:	f001 f8e9 	bl	800bff4 <__match>
 800ae22:	2800      	cmp	r0, #0
 800ae24:	f43f aed2 	beq.w	800abcc <_strtod_l+0xc4>
 800ae28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ae2a:	781b      	ldrb	r3, [r3, #0]
 800ae2c:	2b28      	cmp	r3, #40	; 0x28
 800ae2e:	d12d      	bne.n	800ae8c <_strtod_l+0x384>
 800ae30:	499a      	ldr	r1, [pc, #616]	; (800b09c <_strtod_l+0x594>)
 800ae32:	aa1a      	add	r2, sp, #104	; 0x68
 800ae34:	a817      	add	r0, sp, #92	; 0x5c
 800ae36:	f001 f8f1 	bl	800c01c <__hexnan>
 800ae3a:	2805      	cmp	r0, #5
 800ae3c:	d126      	bne.n	800ae8c <_strtod_l+0x384>
 800ae3e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ae40:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800ae44:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800ae48:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800ae4c:	e6a0      	b.n	800ab90 <_strtod_l+0x88>
 800ae4e:	210a      	movs	r1, #10
 800ae50:	fb01 2e0e 	mla	lr, r1, lr, r2
 800ae54:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800ae58:	e7b9      	b.n	800adce <_strtod_l+0x2c6>
 800ae5a:	2a6e      	cmp	r2, #110	; 0x6e
 800ae5c:	e7db      	b.n	800ae16 <_strtod_l+0x30e>
 800ae5e:	4990      	ldr	r1, [pc, #576]	; (800b0a0 <_strtod_l+0x598>)
 800ae60:	a817      	add	r0, sp, #92	; 0x5c
 800ae62:	f001 f8c7 	bl	800bff4 <__match>
 800ae66:	2800      	cmp	r0, #0
 800ae68:	f43f aeb0 	beq.w	800abcc <_strtod_l+0xc4>
 800ae6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ae6e:	498d      	ldr	r1, [pc, #564]	; (800b0a4 <_strtod_l+0x59c>)
 800ae70:	3b01      	subs	r3, #1
 800ae72:	a817      	add	r0, sp, #92	; 0x5c
 800ae74:	9317      	str	r3, [sp, #92]	; 0x5c
 800ae76:	f001 f8bd 	bl	800bff4 <__match>
 800ae7a:	b910      	cbnz	r0, 800ae82 <_strtod_l+0x37a>
 800ae7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ae7e:	3301      	adds	r3, #1
 800ae80:	9317      	str	r3, [sp, #92]	; 0x5c
 800ae82:	f8df b230 	ldr.w	fp, [pc, #560]	; 800b0b4 <_strtod_l+0x5ac>
 800ae86:	f04f 0a00 	mov.w	sl, #0
 800ae8a:	e681      	b.n	800ab90 <_strtod_l+0x88>
 800ae8c:	4886      	ldr	r0, [pc, #536]	; (800b0a8 <_strtod_l+0x5a0>)
 800ae8e:	f002 fa1b 	bl	800d2c8 <nan>
 800ae92:	ec5b ab10 	vmov	sl, fp, d0
 800ae96:	e67b      	b.n	800ab90 <_strtod_l+0x88>
 800ae98:	9b05      	ldr	r3, [sp, #20]
 800ae9a:	9807      	ldr	r0, [sp, #28]
 800ae9c:	1af3      	subs	r3, r6, r3
 800ae9e:	2f00      	cmp	r7, #0
 800aea0:	bf08      	it	eq
 800aea2:	462f      	moveq	r7, r5
 800aea4:	2d10      	cmp	r5, #16
 800aea6:	9306      	str	r3, [sp, #24]
 800aea8:	46a8      	mov	r8, r5
 800aeaa:	bfa8      	it	ge
 800aeac:	f04f 0810 	movge.w	r8, #16
 800aeb0:	f7f5 fb30 	bl	8000514 <__aeabi_ui2d>
 800aeb4:	2d09      	cmp	r5, #9
 800aeb6:	4682      	mov	sl, r0
 800aeb8:	468b      	mov	fp, r1
 800aeba:	dd13      	ble.n	800aee4 <_strtod_l+0x3dc>
 800aebc:	4b7b      	ldr	r3, [pc, #492]	; (800b0ac <_strtod_l+0x5a4>)
 800aebe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800aec2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800aec6:	f7f5 fb9f 	bl	8000608 <__aeabi_dmul>
 800aeca:	4682      	mov	sl, r0
 800aecc:	4648      	mov	r0, r9
 800aece:	468b      	mov	fp, r1
 800aed0:	f7f5 fb20 	bl	8000514 <__aeabi_ui2d>
 800aed4:	4602      	mov	r2, r0
 800aed6:	460b      	mov	r3, r1
 800aed8:	4650      	mov	r0, sl
 800aeda:	4659      	mov	r1, fp
 800aedc:	f7f5 f9de 	bl	800029c <__adddf3>
 800aee0:	4682      	mov	sl, r0
 800aee2:	468b      	mov	fp, r1
 800aee4:	2d0f      	cmp	r5, #15
 800aee6:	dc38      	bgt.n	800af5a <_strtod_l+0x452>
 800aee8:	9b06      	ldr	r3, [sp, #24]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	f43f ae50 	beq.w	800ab90 <_strtod_l+0x88>
 800aef0:	dd24      	ble.n	800af3c <_strtod_l+0x434>
 800aef2:	2b16      	cmp	r3, #22
 800aef4:	dc0b      	bgt.n	800af0e <_strtod_l+0x406>
 800aef6:	496d      	ldr	r1, [pc, #436]	; (800b0ac <_strtod_l+0x5a4>)
 800aef8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aefc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af00:	4652      	mov	r2, sl
 800af02:	465b      	mov	r3, fp
 800af04:	f7f5 fb80 	bl	8000608 <__aeabi_dmul>
 800af08:	4682      	mov	sl, r0
 800af0a:	468b      	mov	fp, r1
 800af0c:	e640      	b.n	800ab90 <_strtod_l+0x88>
 800af0e:	9a06      	ldr	r2, [sp, #24]
 800af10:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800af14:	4293      	cmp	r3, r2
 800af16:	db20      	blt.n	800af5a <_strtod_l+0x452>
 800af18:	4c64      	ldr	r4, [pc, #400]	; (800b0ac <_strtod_l+0x5a4>)
 800af1a:	f1c5 050f 	rsb	r5, r5, #15
 800af1e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800af22:	4652      	mov	r2, sl
 800af24:	465b      	mov	r3, fp
 800af26:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af2a:	f7f5 fb6d 	bl	8000608 <__aeabi_dmul>
 800af2e:	9b06      	ldr	r3, [sp, #24]
 800af30:	1b5d      	subs	r5, r3, r5
 800af32:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800af36:	e9d4 2300 	ldrd	r2, r3, [r4]
 800af3a:	e7e3      	b.n	800af04 <_strtod_l+0x3fc>
 800af3c:	9b06      	ldr	r3, [sp, #24]
 800af3e:	3316      	adds	r3, #22
 800af40:	db0b      	blt.n	800af5a <_strtod_l+0x452>
 800af42:	9b05      	ldr	r3, [sp, #20]
 800af44:	1b9e      	subs	r6, r3, r6
 800af46:	4b59      	ldr	r3, [pc, #356]	; (800b0ac <_strtod_l+0x5a4>)
 800af48:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800af4c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800af50:	4650      	mov	r0, sl
 800af52:	4659      	mov	r1, fp
 800af54:	f7f5 fc82 	bl	800085c <__aeabi_ddiv>
 800af58:	e7d6      	b.n	800af08 <_strtod_l+0x400>
 800af5a:	9b06      	ldr	r3, [sp, #24]
 800af5c:	eba5 0808 	sub.w	r8, r5, r8
 800af60:	4498      	add	r8, r3
 800af62:	f1b8 0f00 	cmp.w	r8, #0
 800af66:	dd74      	ble.n	800b052 <_strtod_l+0x54a>
 800af68:	f018 030f 	ands.w	r3, r8, #15
 800af6c:	d00a      	beq.n	800af84 <_strtod_l+0x47c>
 800af6e:	494f      	ldr	r1, [pc, #316]	; (800b0ac <_strtod_l+0x5a4>)
 800af70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800af74:	4652      	mov	r2, sl
 800af76:	465b      	mov	r3, fp
 800af78:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af7c:	f7f5 fb44 	bl	8000608 <__aeabi_dmul>
 800af80:	4682      	mov	sl, r0
 800af82:	468b      	mov	fp, r1
 800af84:	f038 080f 	bics.w	r8, r8, #15
 800af88:	d04f      	beq.n	800b02a <_strtod_l+0x522>
 800af8a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800af8e:	dd22      	ble.n	800afd6 <_strtod_l+0x4ce>
 800af90:	2500      	movs	r5, #0
 800af92:	462e      	mov	r6, r5
 800af94:	9507      	str	r5, [sp, #28]
 800af96:	9505      	str	r5, [sp, #20]
 800af98:	2322      	movs	r3, #34	; 0x22
 800af9a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800b0b4 <_strtod_l+0x5ac>
 800af9e:	6023      	str	r3, [r4, #0]
 800afa0:	f04f 0a00 	mov.w	sl, #0
 800afa4:	9b07      	ldr	r3, [sp, #28]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	f43f adf2 	beq.w	800ab90 <_strtod_l+0x88>
 800afac:	9918      	ldr	r1, [sp, #96]	; 0x60
 800afae:	4620      	mov	r0, r4
 800afb0:	f001 f9a6 	bl	800c300 <_Bfree>
 800afb4:	9905      	ldr	r1, [sp, #20]
 800afb6:	4620      	mov	r0, r4
 800afb8:	f001 f9a2 	bl	800c300 <_Bfree>
 800afbc:	4631      	mov	r1, r6
 800afbe:	4620      	mov	r0, r4
 800afc0:	f001 f99e 	bl	800c300 <_Bfree>
 800afc4:	9907      	ldr	r1, [sp, #28]
 800afc6:	4620      	mov	r0, r4
 800afc8:	f001 f99a 	bl	800c300 <_Bfree>
 800afcc:	4629      	mov	r1, r5
 800afce:	4620      	mov	r0, r4
 800afd0:	f001 f996 	bl	800c300 <_Bfree>
 800afd4:	e5dc      	b.n	800ab90 <_strtod_l+0x88>
 800afd6:	4b36      	ldr	r3, [pc, #216]	; (800b0b0 <_strtod_l+0x5a8>)
 800afd8:	9304      	str	r3, [sp, #16]
 800afda:	2300      	movs	r3, #0
 800afdc:	ea4f 1828 	mov.w	r8, r8, asr #4
 800afe0:	4650      	mov	r0, sl
 800afe2:	4659      	mov	r1, fp
 800afe4:	4699      	mov	r9, r3
 800afe6:	f1b8 0f01 	cmp.w	r8, #1
 800afea:	dc21      	bgt.n	800b030 <_strtod_l+0x528>
 800afec:	b10b      	cbz	r3, 800aff2 <_strtod_l+0x4ea>
 800afee:	4682      	mov	sl, r0
 800aff0:	468b      	mov	fp, r1
 800aff2:	4b2f      	ldr	r3, [pc, #188]	; (800b0b0 <_strtod_l+0x5a8>)
 800aff4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800aff8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800affc:	4652      	mov	r2, sl
 800affe:	465b      	mov	r3, fp
 800b000:	e9d9 0100 	ldrd	r0, r1, [r9]
 800b004:	f7f5 fb00 	bl	8000608 <__aeabi_dmul>
 800b008:	4b2a      	ldr	r3, [pc, #168]	; (800b0b4 <_strtod_l+0x5ac>)
 800b00a:	460a      	mov	r2, r1
 800b00c:	400b      	ands	r3, r1
 800b00e:	492a      	ldr	r1, [pc, #168]	; (800b0b8 <_strtod_l+0x5b0>)
 800b010:	428b      	cmp	r3, r1
 800b012:	4682      	mov	sl, r0
 800b014:	d8bc      	bhi.n	800af90 <_strtod_l+0x488>
 800b016:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b01a:	428b      	cmp	r3, r1
 800b01c:	bf86      	itte	hi
 800b01e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800b0bc <_strtod_l+0x5b4>
 800b022:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800b026:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b02a:	2300      	movs	r3, #0
 800b02c:	9304      	str	r3, [sp, #16]
 800b02e:	e084      	b.n	800b13a <_strtod_l+0x632>
 800b030:	f018 0f01 	tst.w	r8, #1
 800b034:	d005      	beq.n	800b042 <_strtod_l+0x53a>
 800b036:	9b04      	ldr	r3, [sp, #16]
 800b038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b03c:	f7f5 fae4 	bl	8000608 <__aeabi_dmul>
 800b040:	2301      	movs	r3, #1
 800b042:	9a04      	ldr	r2, [sp, #16]
 800b044:	3208      	adds	r2, #8
 800b046:	f109 0901 	add.w	r9, r9, #1
 800b04a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b04e:	9204      	str	r2, [sp, #16]
 800b050:	e7c9      	b.n	800afe6 <_strtod_l+0x4de>
 800b052:	d0ea      	beq.n	800b02a <_strtod_l+0x522>
 800b054:	f1c8 0800 	rsb	r8, r8, #0
 800b058:	f018 020f 	ands.w	r2, r8, #15
 800b05c:	d00a      	beq.n	800b074 <_strtod_l+0x56c>
 800b05e:	4b13      	ldr	r3, [pc, #76]	; (800b0ac <_strtod_l+0x5a4>)
 800b060:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b064:	4650      	mov	r0, sl
 800b066:	4659      	mov	r1, fp
 800b068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b06c:	f7f5 fbf6 	bl	800085c <__aeabi_ddiv>
 800b070:	4682      	mov	sl, r0
 800b072:	468b      	mov	fp, r1
 800b074:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b078:	d0d7      	beq.n	800b02a <_strtod_l+0x522>
 800b07a:	f1b8 0f1f 	cmp.w	r8, #31
 800b07e:	dd1f      	ble.n	800b0c0 <_strtod_l+0x5b8>
 800b080:	2500      	movs	r5, #0
 800b082:	462e      	mov	r6, r5
 800b084:	9507      	str	r5, [sp, #28]
 800b086:	9505      	str	r5, [sp, #20]
 800b088:	2322      	movs	r3, #34	; 0x22
 800b08a:	f04f 0a00 	mov.w	sl, #0
 800b08e:	f04f 0b00 	mov.w	fp, #0
 800b092:	6023      	str	r3, [r4, #0]
 800b094:	e786      	b.n	800afa4 <_strtod_l+0x49c>
 800b096:	bf00      	nop
 800b098:	0800dd61 	.word	0x0800dd61
 800b09c:	0800dd78 	.word	0x0800dd78
 800b0a0:	0800dd58 	.word	0x0800dd58
 800b0a4:	0800dd5b 	.word	0x0800dd5b
 800b0a8:	0800e022 	.word	0x0800e022
 800b0ac:	0800dee0 	.word	0x0800dee0
 800b0b0:	0800deb8 	.word	0x0800deb8
 800b0b4:	7ff00000 	.word	0x7ff00000
 800b0b8:	7ca00000 	.word	0x7ca00000
 800b0bc:	7fefffff 	.word	0x7fefffff
 800b0c0:	f018 0310 	ands.w	r3, r8, #16
 800b0c4:	bf18      	it	ne
 800b0c6:	236a      	movne	r3, #106	; 0x6a
 800b0c8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800b478 <_strtod_l+0x970>
 800b0cc:	9304      	str	r3, [sp, #16]
 800b0ce:	4650      	mov	r0, sl
 800b0d0:	4659      	mov	r1, fp
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	f018 0f01 	tst.w	r8, #1
 800b0d8:	d004      	beq.n	800b0e4 <_strtod_l+0x5dc>
 800b0da:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b0de:	f7f5 fa93 	bl	8000608 <__aeabi_dmul>
 800b0e2:	2301      	movs	r3, #1
 800b0e4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800b0e8:	f109 0908 	add.w	r9, r9, #8
 800b0ec:	d1f2      	bne.n	800b0d4 <_strtod_l+0x5cc>
 800b0ee:	b10b      	cbz	r3, 800b0f4 <_strtod_l+0x5ec>
 800b0f0:	4682      	mov	sl, r0
 800b0f2:	468b      	mov	fp, r1
 800b0f4:	9b04      	ldr	r3, [sp, #16]
 800b0f6:	b1c3      	cbz	r3, 800b12a <_strtod_l+0x622>
 800b0f8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b0fc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b100:	2b00      	cmp	r3, #0
 800b102:	4659      	mov	r1, fp
 800b104:	dd11      	ble.n	800b12a <_strtod_l+0x622>
 800b106:	2b1f      	cmp	r3, #31
 800b108:	f340 8124 	ble.w	800b354 <_strtod_l+0x84c>
 800b10c:	2b34      	cmp	r3, #52	; 0x34
 800b10e:	bfde      	ittt	le
 800b110:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b114:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
 800b118:	fa03 f202 	lslle.w	r2, r3, r2
 800b11c:	f04f 0a00 	mov.w	sl, #0
 800b120:	bfcc      	ite	gt
 800b122:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b126:	ea02 0b01 	andle.w	fp, r2, r1
 800b12a:	2200      	movs	r2, #0
 800b12c:	2300      	movs	r3, #0
 800b12e:	4650      	mov	r0, sl
 800b130:	4659      	mov	r1, fp
 800b132:	f7f5 fcd1 	bl	8000ad8 <__aeabi_dcmpeq>
 800b136:	2800      	cmp	r0, #0
 800b138:	d1a2      	bne.n	800b080 <_strtod_l+0x578>
 800b13a:	9b07      	ldr	r3, [sp, #28]
 800b13c:	9300      	str	r3, [sp, #0]
 800b13e:	9908      	ldr	r1, [sp, #32]
 800b140:	462b      	mov	r3, r5
 800b142:	463a      	mov	r2, r7
 800b144:	4620      	mov	r0, r4
 800b146:	f001 f943 	bl	800c3d0 <__s2b>
 800b14a:	9007      	str	r0, [sp, #28]
 800b14c:	2800      	cmp	r0, #0
 800b14e:	f43f af1f 	beq.w	800af90 <_strtod_l+0x488>
 800b152:	9b05      	ldr	r3, [sp, #20]
 800b154:	1b9e      	subs	r6, r3, r6
 800b156:	9b06      	ldr	r3, [sp, #24]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	bfb4      	ite	lt
 800b15c:	4633      	movlt	r3, r6
 800b15e:	2300      	movge	r3, #0
 800b160:	930c      	str	r3, [sp, #48]	; 0x30
 800b162:	9b06      	ldr	r3, [sp, #24]
 800b164:	2500      	movs	r5, #0
 800b166:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b16a:	9312      	str	r3, [sp, #72]	; 0x48
 800b16c:	462e      	mov	r6, r5
 800b16e:	9b07      	ldr	r3, [sp, #28]
 800b170:	4620      	mov	r0, r4
 800b172:	6859      	ldr	r1, [r3, #4]
 800b174:	f001 f884 	bl	800c280 <_Balloc>
 800b178:	9005      	str	r0, [sp, #20]
 800b17a:	2800      	cmp	r0, #0
 800b17c:	f43f af0c 	beq.w	800af98 <_strtod_l+0x490>
 800b180:	9b07      	ldr	r3, [sp, #28]
 800b182:	691a      	ldr	r2, [r3, #16]
 800b184:	3202      	adds	r2, #2
 800b186:	f103 010c 	add.w	r1, r3, #12
 800b18a:	0092      	lsls	r2, r2, #2
 800b18c:	300c      	adds	r0, #12
 800b18e:	f7ff fa94 	bl	800a6ba <memcpy>
 800b192:	ec4b ab10 	vmov	d0, sl, fp
 800b196:	aa1a      	add	r2, sp, #104	; 0x68
 800b198:	a919      	add	r1, sp, #100	; 0x64
 800b19a:	4620      	mov	r0, r4
 800b19c:	f001 fc5e 	bl	800ca5c <__d2b>
 800b1a0:	ec4b ab18 	vmov	d8, sl, fp
 800b1a4:	9018      	str	r0, [sp, #96]	; 0x60
 800b1a6:	2800      	cmp	r0, #0
 800b1a8:	f43f aef6 	beq.w	800af98 <_strtod_l+0x490>
 800b1ac:	2101      	movs	r1, #1
 800b1ae:	4620      	mov	r0, r4
 800b1b0:	f001 f9a8 	bl	800c504 <__i2b>
 800b1b4:	4606      	mov	r6, r0
 800b1b6:	2800      	cmp	r0, #0
 800b1b8:	f43f aeee 	beq.w	800af98 <_strtod_l+0x490>
 800b1bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b1be:	9904      	ldr	r1, [sp, #16]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	bfab      	itete	ge
 800b1c4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800b1c6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800b1c8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b1ca:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800b1ce:	bfac      	ite	ge
 800b1d0:	eb03 0902 	addge.w	r9, r3, r2
 800b1d4:	1ad7      	sublt	r7, r2, r3
 800b1d6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b1d8:	eba3 0801 	sub.w	r8, r3, r1
 800b1dc:	4490      	add	r8, r2
 800b1de:	4ba1      	ldr	r3, [pc, #644]	; (800b464 <_strtod_l+0x95c>)
 800b1e0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800b1e4:	4598      	cmp	r8, r3
 800b1e6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b1ea:	f280 80c7 	bge.w	800b37c <_strtod_l+0x874>
 800b1ee:	eba3 0308 	sub.w	r3, r3, r8
 800b1f2:	2b1f      	cmp	r3, #31
 800b1f4:	eba2 0203 	sub.w	r2, r2, r3
 800b1f8:	f04f 0101 	mov.w	r1, #1
 800b1fc:	f300 80b1 	bgt.w	800b362 <_strtod_l+0x85a>
 800b200:	fa01 f303 	lsl.w	r3, r1, r3
 800b204:	930d      	str	r3, [sp, #52]	; 0x34
 800b206:	2300      	movs	r3, #0
 800b208:	9308      	str	r3, [sp, #32]
 800b20a:	eb09 0802 	add.w	r8, r9, r2
 800b20e:	9b04      	ldr	r3, [sp, #16]
 800b210:	45c1      	cmp	r9, r8
 800b212:	4417      	add	r7, r2
 800b214:	441f      	add	r7, r3
 800b216:	464b      	mov	r3, r9
 800b218:	bfa8      	it	ge
 800b21a:	4643      	movge	r3, r8
 800b21c:	42bb      	cmp	r3, r7
 800b21e:	bfa8      	it	ge
 800b220:	463b      	movge	r3, r7
 800b222:	2b00      	cmp	r3, #0
 800b224:	bfc2      	ittt	gt
 800b226:	eba8 0803 	subgt.w	r8, r8, r3
 800b22a:	1aff      	subgt	r7, r7, r3
 800b22c:	eba9 0903 	subgt.w	r9, r9, r3
 800b230:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b232:	2b00      	cmp	r3, #0
 800b234:	dd17      	ble.n	800b266 <_strtod_l+0x75e>
 800b236:	4631      	mov	r1, r6
 800b238:	461a      	mov	r2, r3
 800b23a:	4620      	mov	r0, r4
 800b23c:	f001 fa22 	bl	800c684 <__pow5mult>
 800b240:	4606      	mov	r6, r0
 800b242:	2800      	cmp	r0, #0
 800b244:	f43f aea8 	beq.w	800af98 <_strtod_l+0x490>
 800b248:	4601      	mov	r1, r0
 800b24a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b24c:	4620      	mov	r0, r4
 800b24e:	f001 f96f 	bl	800c530 <__multiply>
 800b252:	900b      	str	r0, [sp, #44]	; 0x2c
 800b254:	2800      	cmp	r0, #0
 800b256:	f43f ae9f 	beq.w	800af98 <_strtod_l+0x490>
 800b25a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b25c:	4620      	mov	r0, r4
 800b25e:	f001 f84f 	bl	800c300 <_Bfree>
 800b262:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b264:	9318      	str	r3, [sp, #96]	; 0x60
 800b266:	f1b8 0f00 	cmp.w	r8, #0
 800b26a:	f300 808c 	bgt.w	800b386 <_strtod_l+0x87e>
 800b26e:	9b06      	ldr	r3, [sp, #24]
 800b270:	2b00      	cmp	r3, #0
 800b272:	dd08      	ble.n	800b286 <_strtod_l+0x77e>
 800b274:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b276:	9905      	ldr	r1, [sp, #20]
 800b278:	4620      	mov	r0, r4
 800b27a:	f001 fa03 	bl	800c684 <__pow5mult>
 800b27e:	9005      	str	r0, [sp, #20]
 800b280:	2800      	cmp	r0, #0
 800b282:	f43f ae89 	beq.w	800af98 <_strtod_l+0x490>
 800b286:	2f00      	cmp	r7, #0
 800b288:	dd08      	ble.n	800b29c <_strtod_l+0x794>
 800b28a:	9905      	ldr	r1, [sp, #20]
 800b28c:	463a      	mov	r2, r7
 800b28e:	4620      	mov	r0, r4
 800b290:	f001 fa52 	bl	800c738 <__lshift>
 800b294:	9005      	str	r0, [sp, #20]
 800b296:	2800      	cmp	r0, #0
 800b298:	f43f ae7e 	beq.w	800af98 <_strtod_l+0x490>
 800b29c:	f1b9 0f00 	cmp.w	r9, #0
 800b2a0:	dd08      	ble.n	800b2b4 <_strtod_l+0x7ac>
 800b2a2:	4631      	mov	r1, r6
 800b2a4:	464a      	mov	r2, r9
 800b2a6:	4620      	mov	r0, r4
 800b2a8:	f001 fa46 	bl	800c738 <__lshift>
 800b2ac:	4606      	mov	r6, r0
 800b2ae:	2800      	cmp	r0, #0
 800b2b0:	f43f ae72 	beq.w	800af98 <_strtod_l+0x490>
 800b2b4:	9a05      	ldr	r2, [sp, #20]
 800b2b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b2b8:	4620      	mov	r0, r4
 800b2ba:	f001 fac9 	bl	800c850 <__mdiff>
 800b2be:	4605      	mov	r5, r0
 800b2c0:	2800      	cmp	r0, #0
 800b2c2:	f43f ae69 	beq.w	800af98 <_strtod_l+0x490>
 800b2c6:	68c3      	ldr	r3, [r0, #12]
 800b2c8:	930b      	str	r3, [sp, #44]	; 0x2c
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	60c3      	str	r3, [r0, #12]
 800b2ce:	4631      	mov	r1, r6
 800b2d0:	f001 faa2 	bl	800c818 <__mcmp>
 800b2d4:	2800      	cmp	r0, #0
 800b2d6:	da60      	bge.n	800b39a <_strtod_l+0x892>
 800b2d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2da:	ea53 030a 	orrs.w	r3, r3, sl
 800b2de:	f040 8082 	bne.w	800b3e6 <_strtod_l+0x8de>
 800b2e2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d17d      	bne.n	800b3e6 <_strtod_l+0x8de>
 800b2ea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b2ee:	0d1b      	lsrs	r3, r3, #20
 800b2f0:	051b      	lsls	r3, r3, #20
 800b2f2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b2f6:	d976      	bls.n	800b3e6 <_strtod_l+0x8de>
 800b2f8:	696b      	ldr	r3, [r5, #20]
 800b2fa:	b913      	cbnz	r3, 800b302 <_strtod_l+0x7fa>
 800b2fc:	692b      	ldr	r3, [r5, #16]
 800b2fe:	2b01      	cmp	r3, #1
 800b300:	dd71      	ble.n	800b3e6 <_strtod_l+0x8de>
 800b302:	4629      	mov	r1, r5
 800b304:	2201      	movs	r2, #1
 800b306:	4620      	mov	r0, r4
 800b308:	f001 fa16 	bl	800c738 <__lshift>
 800b30c:	4631      	mov	r1, r6
 800b30e:	4605      	mov	r5, r0
 800b310:	f001 fa82 	bl	800c818 <__mcmp>
 800b314:	2800      	cmp	r0, #0
 800b316:	dd66      	ble.n	800b3e6 <_strtod_l+0x8de>
 800b318:	9904      	ldr	r1, [sp, #16]
 800b31a:	4a53      	ldr	r2, [pc, #332]	; (800b468 <_strtod_l+0x960>)
 800b31c:	465b      	mov	r3, fp
 800b31e:	2900      	cmp	r1, #0
 800b320:	f000 8081 	beq.w	800b426 <_strtod_l+0x91e>
 800b324:	ea02 010b 	and.w	r1, r2, fp
 800b328:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b32c:	dc7b      	bgt.n	800b426 <_strtod_l+0x91e>
 800b32e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b332:	f77f aea9 	ble.w	800b088 <_strtod_l+0x580>
 800b336:	4b4d      	ldr	r3, [pc, #308]	; (800b46c <_strtod_l+0x964>)
 800b338:	4650      	mov	r0, sl
 800b33a:	4659      	mov	r1, fp
 800b33c:	2200      	movs	r2, #0
 800b33e:	f7f5 f963 	bl	8000608 <__aeabi_dmul>
 800b342:	460b      	mov	r3, r1
 800b344:	4303      	orrs	r3, r0
 800b346:	bf08      	it	eq
 800b348:	2322      	moveq	r3, #34	; 0x22
 800b34a:	4682      	mov	sl, r0
 800b34c:	468b      	mov	fp, r1
 800b34e:	bf08      	it	eq
 800b350:	6023      	streq	r3, [r4, #0]
 800b352:	e62b      	b.n	800afac <_strtod_l+0x4a4>
 800b354:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b358:	fa02 f303 	lsl.w	r3, r2, r3
 800b35c:	ea03 0a0a 	and.w	sl, r3, sl
 800b360:	e6e3      	b.n	800b12a <_strtod_l+0x622>
 800b362:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b366:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800b36a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800b36e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b372:	fa01 f308 	lsl.w	r3, r1, r8
 800b376:	9308      	str	r3, [sp, #32]
 800b378:	910d      	str	r1, [sp, #52]	; 0x34
 800b37a:	e746      	b.n	800b20a <_strtod_l+0x702>
 800b37c:	2300      	movs	r3, #0
 800b37e:	9308      	str	r3, [sp, #32]
 800b380:	2301      	movs	r3, #1
 800b382:	930d      	str	r3, [sp, #52]	; 0x34
 800b384:	e741      	b.n	800b20a <_strtod_l+0x702>
 800b386:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b388:	4642      	mov	r2, r8
 800b38a:	4620      	mov	r0, r4
 800b38c:	f001 f9d4 	bl	800c738 <__lshift>
 800b390:	9018      	str	r0, [sp, #96]	; 0x60
 800b392:	2800      	cmp	r0, #0
 800b394:	f47f af6b 	bne.w	800b26e <_strtod_l+0x766>
 800b398:	e5fe      	b.n	800af98 <_strtod_l+0x490>
 800b39a:	465f      	mov	r7, fp
 800b39c:	d16e      	bne.n	800b47c <_strtod_l+0x974>
 800b39e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b3a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b3a4:	b342      	cbz	r2, 800b3f8 <_strtod_l+0x8f0>
 800b3a6:	4a32      	ldr	r2, [pc, #200]	; (800b470 <_strtod_l+0x968>)
 800b3a8:	4293      	cmp	r3, r2
 800b3aa:	d128      	bne.n	800b3fe <_strtod_l+0x8f6>
 800b3ac:	9b04      	ldr	r3, [sp, #16]
 800b3ae:	4651      	mov	r1, sl
 800b3b0:	b1eb      	cbz	r3, 800b3ee <_strtod_l+0x8e6>
 800b3b2:	4b2d      	ldr	r3, [pc, #180]	; (800b468 <_strtod_l+0x960>)
 800b3b4:	403b      	ands	r3, r7
 800b3b6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b3ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b3be:	d819      	bhi.n	800b3f4 <_strtod_l+0x8ec>
 800b3c0:	0d1b      	lsrs	r3, r3, #20
 800b3c2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b3c6:	fa02 f303 	lsl.w	r3, r2, r3
 800b3ca:	4299      	cmp	r1, r3
 800b3cc:	d117      	bne.n	800b3fe <_strtod_l+0x8f6>
 800b3ce:	4b29      	ldr	r3, [pc, #164]	; (800b474 <_strtod_l+0x96c>)
 800b3d0:	429f      	cmp	r7, r3
 800b3d2:	d102      	bne.n	800b3da <_strtod_l+0x8d2>
 800b3d4:	3101      	adds	r1, #1
 800b3d6:	f43f addf 	beq.w	800af98 <_strtod_l+0x490>
 800b3da:	4b23      	ldr	r3, [pc, #140]	; (800b468 <_strtod_l+0x960>)
 800b3dc:	403b      	ands	r3, r7
 800b3de:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b3e2:	f04f 0a00 	mov.w	sl, #0
 800b3e6:	9b04      	ldr	r3, [sp, #16]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d1a4      	bne.n	800b336 <_strtod_l+0x82e>
 800b3ec:	e5de      	b.n	800afac <_strtod_l+0x4a4>
 800b3ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b3f2:	e7ea      	b.n	800b3ca <_strtod_l+0x8c2>
 800b3f4:	4613      	mov	r3, r2
 800b3f6:	e7e8      	b.n	800b3ca <_strtod_l+0x8c2>
 800b3f8:	ea53 030a 	orrs.w	r3, r3, sl
 800b3fc:	d08c      	beq.n	800b318 <_strtod_l+0x810>
 800b3fe:	9b08      	ldr	r3, [sp, #32]
 800b400:	b1db      	cbz	r3, 800b43a <_strtod_l+0x932>
 800b402:	423b      	tst	r3, r7
 800b404:	d0ef      	beq.n	800b3e6 <_strtod_l+0x8de>
 800b406:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b408:	9a04      	ldr	r2, [sp, #16]
 800b40a:	4650      	mov	r0, sl
 800b40c:	4659      	mov	r1, fp
 800b40e:	b1c3      	cbz	r3, 800b442 <_strtod_l+0x93a>
 800b410:	f7ff fb5d 	bl	800aace <sulp>
 800b414:	4602      	mov	r2, r0
 800b416:	460b      	mov	r3, r1
 800b418:	ec51 0b18 	vmov	r0, r1, d8
 800b41c:	f7f4 ff3e 	bl	800029c <__adddf3>
 800b420:	4682      	mov	sl, r0
 800b422:	468b      	mov	fp, r1
 800b424:	e7df      	b.n	800b3e6 <_strtod_l+0x8de>
 800b426:	4013      	ands	r3, r2
 800b428:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b42c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b430:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b434:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b438:	e7d5      	b.n	800b3e6 <_strtod_l+0x8de>
 800b43a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b43c:	ea13 0f0a 	tst.w	r3, sl
 800b440:	e7e0      	b.n	800b404 <_strtod_l+0x8fc>
 800b442:	f7ff fb44 	bl	800aace <sulp>
 800b446:	4602      	mov	r2, r0
 800b448:	460b      	mov	r3, r1
 800b44a:	ec51 0b18 	vmov	r0, r1, d8
 800b44e:	f7f4 ff23 	bl	8000298 <__aeabi_dsub>
 800b452:	2200      	movs	r2, #0
 800b454:	2300      	movs	r3, #0
 800b456:	4682      	mov	sl, r0
 800b458:	468b      	mov	fp, r1
 800b45a:	f7f5 fb3d 	bl	8000ad8 <__aeabi_dcmpeq>
 800b45e:	2800      	cmp	r0, #0
 800b460:	d0c1      	beq.n	800b3e6 <_strtod_l+0x8de>
 800b462:	e611      	b.n	800b088 <_strtod_l+0x580>
 800b464:	fffffc02 	.word	0xfffffc02
 800b468:	7ff00000 	.word	0x7ff00000
 800b46c:	39500000 	.word	0x39500000
 800b470:	000fffff 	.word	0x000fffff
 800b474:	7fefffff 	.word	0x7fefffff
 800b478:	0800dd90 	.word	0x0800dd90
 800b47c:	4631      	mov	r1, r6
 800b47e:	4628      	mov	r0, r5
 800b480:	f001 fb48 	bl	800cb14 <__ratio>
 800b484:	ec59 8b10 	vmov	r8, r9, d0
 800b488:	ee10 0a10 	vmov	r0, s0
 800b48c:	2200      	movs	r2, #0
 800b48e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b492:	4649      	mov	r1, r9
 800b494:	f7f5 fb34 	bl	8000b00 <__aeabi_dcmple>
 800b498:	2800      	cmp	r0, #0
 800b49a:	d07a      	beq.n	800b592 <_strtod_l+0xa8a>
 800b49c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d04a      	beq.n	800b538 <_strtod_l+0xa30>
 800b4a2:	4b95      	ldr	r3, [pc, #596]	; (800b6f8 <_strtod_l+0xbf0>)
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b4aa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b6f8 <_strtod_l+0xbf0>
 800b4ae:	f04f 0800 	mov.w	r8, #0
 800b4b2:	4b92      	ldr	r3, [pc, #584]	; (800b6fc <_strtod_l+0xbf4>)
 800b4b4:	403b      	ands	r3, r7
 800b4b6:	930d      	str	r3, [sp, #52]	; 0x34
 800b4b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b4ba:	4b91      	ldr	r3, [pc, #580]	; (800b700 <_strtod_l+0xbf8>)
 800b4bc:	429a      	cmp	r2, r3
 800b4be:	f040 80b0 	bne.w	800b622 <_strtod_l+0xb1a>
 800b4c2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b4c6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b4ca:	ec4b ab10 	vmov	d0, sl, fp
 800b4ce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b4d2:	f001 fa47 	bl	800c964 <__ulp>
 800b4d6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b4da:	ec53 2b10 	vmov	r2, r3, d0
 800b4de:	f7f5 f893 	bl	8000608 <__aeabi_dmul>
 800b4e2:	4652      	mov	r2, sl
 800b4e4:	465b      	mov	r3, fp
 800b4e6:	f7f4 fed9 	bl	800029c <__adddf3>
 800b4ea:	460b      	mov	r3, r1
 800b4ec:	4983      	ldr	r1, [pc, #524]	; (800b6fc <_strtod_l+0xbf4>)
 800b4ee:	4a85      	ldr	r2, [pc, #532]	; (800b704 <_strtod_l+0xbfc>)
 800b4f0:	4019      	ands	r1, r3
 800b4f2:	4291      	cmp	r1, r2
 800b4f4:	4682      	mov	sl, r0
 800b4f6:	d960      	bls.n	800b5ba <_strtod_l+0xab2>
 800b4f8:	ee18 3a90 	vmov	r3, s17
 800b4fc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b500:	4293      	cmp	r3, r2
 800b502:	d104      	bne.n	800b50e <_strtod_l+0xa06>
 800b504:	ee18 3a10 	vmov	r3, s16
 800b508:	3301      	adds	r3, #1
 800b50a:	f43f ad45 	beq.w	800af98 <_strtod_l+0x490>
 800b50e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800b710 <_strtod_l+0xc08>
 800b512:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800b516:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b518:	4620      	mov	r0, r4
 800b51a:	f000 fef1 	bl	800c300 <_Bfree>
 800b51e:	9905      	ldr	r1, [sp, #20]
 800b520:	4620      	mov	r0, r4
 800b522:	f000 feed 	bl	800c300 <_Bfree>
 800b526:	4631      	mov	r1, r6
 800b528:	4620      	mov	r0, r4
 800b52a:	f000 fee9 	bl	800c300 <_Bfree>
 800b52e:	4629      	mov	r1, r5
 800b530:	4620      	mov	r0, r4
 800b532:	f000 fee5 	bl	800c300 <_Bfree>
 800b536:	e61a      	b.n	800b16e <_strtod_l+0x666>
 800b538:	f1ba 0f00 	cmp.w	sl, #0
 800b53c:	d11b      	bne.n	800b576 <_strtod_l+0xa6e>
 800b53e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b542:	b9f3      	cbnz	r3, 800b582 <_strtod_l+0xa7a>
 800b544:	4b6c      	ldr	r3, [pc, #432]	; (800b6f8 <_strtod_l+0xbf0>)
 800b546:	2200      	movs	r2, #0
 800b548:	4640      	mov	r0, r8
 800b54a:	4649      	mov	r1, r9
 800b54c:	f7f5 face 	bl	8000aec <__aeabi_dcmplt>
 800b550:	b9d0      	cbnz	r0, 800b588 <_strtod_l+0xa80>
 800b552:	4640      	mov	r0, r8
 800b554:	4649      	mov	r1, r9
 800b556:	4b6c      	ldr	r3, [pc, #432]	; (800b708 <_strtod_l+0xc00>)
 800b558:	2200      	movs	r2, #0
 800b55a:	f7f5 f855 	bl	8000608 <__aeabi_dmul>
 800b55e:	4680      	mov	r8, r0
 800b560:	4689      	mov	r9, r1
 800b562:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b566:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800b56a:	9315      	str	r3, [sp, #84]	; 0x54
 800b56c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b570:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b574:	e79d      	b.n	800b4b2 <_strtod_l+0x9aa>
 800b576:	f1ba 0f01 	cmp.w	sl, #1
 800b57a:	d102      	bne.n	800b582 <_strtod_l+0xa7a>
 800b57c:	2f00      	cmp	r7, #0
 800b57e:	f43f ad83 	beq.w	800b088 <_strtod_l+0x580>
 800b582:	4b62      	ldr	r3, [pc, #392]	; (800b70c <_strtod_l+0xc04>)
 800b584:	2200      	movs	r2, #0
 800b586:	e78e      	b.n	800b4a6 <_strtod_l+0x99e>
 800b588:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800b708 <_strtod_l+0xc00>
 800b58c:	f04f 0800 	mov.w	r8, #0
 800b590:	e7e7      	b.n	800b562 <_strtod_l+0xa5a>
 800b592:	4b5d      	ldr	r3, [pc, #372]	; (800b708 <_strtod_l+0xc00>)
 800b594:	4640      	mov	r0, r8
 800b596:	4649      	mov	r1, r9
 800b598:	2200      	movs	r2, #0
 800b59a:	f7f5 f835 	bl	8000608 <__aeabi_dmul>
 800b59e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5a0:	4680      	mov	r8, r0
 800b5a2:	4689      	mov	r9, r1
 800b5a4:	b933      	cbnz	r3, 800b5b4 <_strtod_l+0xaac>
 800b5a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b5aa:	900e      	str	r0, [sp, #56]	; 0x38
 800b5ac:	930f      	str	r3, [sp, #60]	; 0x3c
 800b5ae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b5b2:	e7dd      	b.n	800b570 <_strtod_l+0xa68>
 800b5b4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800b5b8:	e7f9      	b.n	800b5ae <_strtod_l+0xaa6>
 800b5ba:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b5be:	9b04      	ldr	r3, [sp, #16]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d1a8      	bne.n	800b516 <_strtod_l+0xa0e>
 800b5c4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b5c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b5ca:	0d1b      	lsrs	r3, r3, #20
 800b5cc:	051b      	lsls	r3, r3, #20
 800b5ce:	429a      	cmp	r2, r3
 800b5d0:	d1a1      	bne.n	800b516 <_strtod_l+0xa0e>
 800b5d2:	4640      	mov	r0, r8
 800b5d4:	4649      	mov	r1, r9
 800b5d6:	f7f5 fb39 	bl	8000c4c <__aeabi_d2lz>
 800b5da:	f7f4 ffe7 	bl	80005ac <__aeabi_l2d>
 800b5de:	4602      	mov	r2, r0
 800b5e0:	460b      	mov	r3, r1
 800b5e2:	4640      	mov	r0, r8
 800b5e4:	4649      	mov	r1, r9
 800b5e6:	f7f4 fe57 	bl	8000298 <__aeabi_dsub>
 800b5ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b5ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b5f0:	ea43 030a 	orr.w	r3, r3, sl
 800b5f4:	4313      	orrs	r3, r2
 800b5f6:	4680      	mov	r8, r0
 800b5f8:	4689      	mov	r9, r1
 800b5fa:	d055      	beq.n	800b6a8 <_strtod_l+0xba0>
 800b5fc:	a336      	add	r3, pc, #216	; (adr r3, 800b6d8 <_strtod_l+0xbd0>)
 800b5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b602:	f7f5 fa73 	bl	8000aec <__aeabi_dcmplt>
 800b606:	2800      	cmp	r0, #0
 800b608:	f47f acd0 	bne.w	800afac <_strtod_l+0x4a4>
 800b60c:	a334      	add	r3, pc, #208	; (adr r3, 800b6e0 <_strtod_l+0xbd8>)
 800b60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b612:	4640      	mov	r0, r8
 800b614:	4649      	mov	r1, r9
 800b616:	f7f5 fa87 	bl	8000b28 <__aeabi_dcmpgt>
 800b61a:	2800      	cmp	r0, #0
 800b61c:	f43f af7b 	beq.w	800b516 <_strtod_l+0xa0e>
 800b620:	e4c4      	b.n	800afac <_strtod_l+0x4a4>
 800b622:	9b04      	ldr	r3, [sp, #16]
 800b624:	b333      	cbz	r3, 800b674 <_strtod_l+0xb6c>
 800b626:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b628:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b62c:	d822      	bhi.n	800b674 <_strtod_l+0xb6c>
 800b62e:	a32e      	add	r3, pc, #184	; (adr r3, 800b6e8 <_strtod_l+0xbe0>)
 800b630:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b634:	4640      	mov	r0, r8
 800b636:	4649      	mov	r1, r9
 800b638:	f7f5 fa62 	bl	8000b00 <__aeabi_dcmple>
 800b63c:	b1a0      	cbz	r0, 800b668 <_strtod_l+0xb60>
 800b63e:	4649      	mov	r1, r9
 800b640:	4640      	mov	r0, r8
 800b642:	f7f5 fa7b 	bl	8000b3c <__aeabi_d2uiz>
 800b646:	2801      	cmp	r0, #1
 800b648:	bf38      	it	cc
 800b64a:	2001      	movcc	r0, #1
 800b64c:	f7f4 ff62 	bl	8000514 <__aeabi_ui2d>
 800b650:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b652:	4680      	mov	r8, r0
 800b654:	4689      	mov	r9, r1
 800b656:	bb23      	cbnz	r3, 800b6a2 <_strtod_l+0xb9a>
 800b658:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b65c:	9010      	str	r0, [sp, #64]	; 0x40
 800b65e:	9311      	str	r3, [sp, #68]	; 0x44
 800b660:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b664:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b66a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b66c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b670:	1a9b      	subs	r3, r3, r2
 800b672:	9309      	str	r3, [sp, #36]	; 0x24
 800b674:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b678:	eeb0 0a48 	vmov.f32	s0, s16
 800b67c:	eef0 0a68 	vmov.f32	s1, s17
 800b680:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b684:	f001 f96e 	bl	800c964 <__ulp>
 800b688:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b68c:	ec53 2b10 	vmov	r2, r3, d0
 800b690:	f7f4 ffba 	bl	8000608 <__aeabi_dmul>
 800b694:	ec53 2b18 	vmov	r2, r3, d8
 800b698:	f7f4 fe00 	bl	800029c <__adddf3>
 800b69c:	4682      	mov	sl, r0
 800b69e:	468b      	mov	fp, r1
 800b6a0:	e78d      	b.n	800b5be <_strtod_l+0xab6>
 800b6a2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800b6a6:	e7db      	b.n	800b660 <_strtod_l+0xb58>
 800b6a8:	a311      	add	r3, pc, #68	; (adr r3, 800b6f0 <_strtod_l+0xbe8>)
 800b6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ae:	f7f5 fa1d 	bl	8000aec <__aeabi_dcmplt>
 800b6b2:	e7b2      	b.n	800b61a <_strtod_l+0xb12>
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	930a      	str	r3, [sp, #40]	; 0x28
 800b6b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b6ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b6bc:	6013      	str	r3, [r2, #0]
 800b6be:	f7ff ba6b 	b.w	800ab98 <_strtod_l+0x90>
 800b6c2:	2a65      	cmp	r2, #101	; 0x65
 800b6c4:	f43f ab5f 	beq.w	800ad86 <_strtod_l+0x27e>
 800b6c8:	2a45      	cmp	r2, #69	; 0x45
 800b6ca:	f43f ab5c 	beq.w	800ad86 <_strtod_l+0x27e>
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	f7ff bb94 	b.w	800adfc <_strtod_l+0x2f4>
 800b6d4:	f3af 8000 	nop.w
 800b6d8:	94a03595 	.word	0x94a03595
 800b6dc:	3fdfffff 	.word	0x3fdfffff
 800b6e0:	35afe535 	.word	0x35afe535
 800b6e4:	3fe00000 	.word	0x3fe00000
 800b6e8:	ffc00000 	.word	0xffc00000
 800b6ec:	41dfffff 	.word	0x41dfffff
 800b6f0:	94a03595 	.word	0x94a03595
 800b6f4:	3fcfffff 	.word	0x3fcfffff
 800b6f8:	3ff00000 	.word	0x3ff00000
 800b6fc:	7ff00000 	.word	0x7ff00000
 800b700:	7fe00000 	.word	0x7fe00000
 800b704:	7c9fffff 	.word	0x7c9fffff
 800b708:	3fe00000 	.word	0x3fe00000
 800b70c:	bff00000 	.word	0xbff00000
 800b710:	7fefffff 	.word	0x7fefffff

0800b714 <strtod>:
 800b714:	460a      	mov	r2, r1
 800b716:	4601      	mov	r1, r0
 800b718:	4802      	ldr	r0, [pc, #8]	; (800b724 <strtod+0x10>)
 800b71a:	4b03      	ldr	r3, [pc, #12]	; (800b728 <strtod+0x14>)
 800b71c:	6800      	ldr	r0, [r0, #0]
 800b71e:	f7ff b9f3 	b.w	800ab08 <_strtod_l>
 800b722:	bf00      	nop
 800b724:	20000010 	.word	0x20000010
 800b728:	20000078 	.word	0x20000078

0800b72c <__swbuf_r>:
 800b72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b72e:	460e      	mov	r6, r1
 800b730:	4614      	mov	r4, r2
 800b732:	4605      	mov	r5, r0
 800b734:	b118      	cbz	r0, 800b73e <__swbuf_r+0x12>
 800b736:	6983      	ldr	r3, [r0, #24]
 800b738:	b90b      	cbnz	r3, 800b73e <__swbuf_r+0x12>
 800b73a:	f7fe fef9 	bl	800a530 <__sinit>
 800b73e:	4b21      	ldr	r3, [pc, #132]	; (800b7c4 <__swbuf_r+0x98>)
 800b740:	429c      	cmp	r4, r3
 800b742:	d12b      	bne.n	800b79c <__swbuf_r+0x70>
 800b744:	686c      	ldr	r4, [r5, #4]
 800b746:	69a3      	ldr	r3, [r4, #24]
 800b748:	60a3      	str	r3, [r4, #8]
 800b74a:	89a3      	ldrh	r3, [r4, #12]
 800b74c:	071a      	lsls	r2, r3, #28
 800b74e:	d52f      	bpl.n	800b7b0 <__swbuf_r+0x84>
 800b750:	6923      	ldr	r3, [r4, #16]
 800b752:	b36b      	cbz	r3, 800b7b0 <__swbuf_r+0x84>
 800b754:	6923      	ldr	r3, [r4, #16]
 800b756:	6820      	ldr	r0, [r4, #0]
 800b758:	1ac0      	subs	r0, r0, r3
 800b75a:	6963      	ldr	r3, [r4, #20]
 800b75c:	b2f6      	uxtb	r6, r6
 800b75e:	4283      	cmp	r3, r0
 800b760:	4637      	mov	r7, r6
 800b762:	dc04      	bgt.n	800b76e <__swbuf_r+0x42>
 800b764:	4621      	mov	r1, r4
 800b766:	4628      	mov	r0, r5
 800b768:	f000 f948 	bl	800b9fc <_fflush_r>
 800b76c:	bb30      	cbnz	r0, 800b7bc <__swbuf_r+0x90>
 800b76e:	68a3      	ldr	r3, [r4, #8]
 800b770:	3b01      	subs	r3, #1
 800b772:	60a3      	str	r3, [r4, #8]
 800b774:	6823      	ldr	r3, [r4, #0]
 800b776:	1c5a      	adds	r2, r3, #1
 800b778:	6022      	str	r2, [r4, #0]
 800b77a:	701e      	strb	r6, [r3, #0]
 800b77c:	6963      	ldr	r3, [r4, #20]
 800b77e:	3001      	adds	r0, #1
 800b780:	4283      	cmp	r3, r0
 800b782:	d004      	beq.n	800b78e <__swbuf_r+0x62>
 800b784:	89a3      	ldrh	r3, [r4, #12]
 800b786:	07db      	lsls	r3, r3, #31
 800b788:	d506      	bpl.n	800b798 <__swbuf_r+0x6c>
 800b78a:	2e0a      	cmp	r6, #10
 800b78c:	d104      	bne.n	800b798 <__swbuf_r+0x6c>
 800b78e:	4621      	mov	r1, r4
 800b790:	4628      	mov	r0, r5
 800b792:	f000 f933 	bl	800b9fc <_fflush_r>
 800b796:	b988      	cbnz	r0, 800b7bc <__swbuf_r+0x90>
 800b798:	4638      	mov	r0, r7
 800b79a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b79c:	4b0a      	ldr	r3, [pc, #40]	; (800b7c8 <__swbuf_r+0x9c>)
 800b79e:	429c      	cmp	r4, r3
 800b7a0:	d101      	bne.n	800b7a6 <__swbuf_r+0x7a>
 800b7a2:	68ac      	ldr	r4, [r5, #8]
 800b7a4:	e7cf      	b.n	800b746 <__swbuf_r+0x1a>
 800b7a6:	4b09      	ldr	r3, [pc, #36]	; (800b7cc <__swbuf_r+0xa0>)
 800b7a8:	429c      	cmp	r4, r3
 800b7aa:	bf08      	it	eq
 800b7ac:	68ec      	ldreq	r4, [r5, #12]
 800b7ae:	e7ca      	b.n	800b746 <__swbuf_r+0x1a>
 800b7b0:	4621      	mov	r1, r4
 800b7b2:	4628      	mov	r0, r5
 800b7b4:	f000 f81e 	bl	800b7f4 <__swsetup_r>
 800b7b8:	2800      	cmp	r0, #0
 800b7ba:	d0cb      	beq.n	800b754 <__swbuf_r+0x28>
 800b7bc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b7c0:	e7ea      	b.n	800b798 <__swbuf_r+0x6c>
 800b7c2:	bf00      	nop
 800b7c4:	0800dd14 	.word	0x0800dd14
 800b7c8:	0800dd34 	.word	0x0800dd34
 800b7cc:	0800dcf4 	.word	0x0800dcf4

0800b7d0 <_write_r>:
 800b7d0:	b538      	push	{r3, r4, r5, lr}
 800b7d2:	4d07      	ldr	r5, [pc, #28]	; (800b7f0 <_write_r+0x20>)
 800b7d4:	4604      	mov	r4, r0
 800b7d6:	4608      	mov	r0, r1
 800b7d8:	4611      	mov	r1, r2
 800b7da:	2200      	movs	r2, #0
 800b7dc:	602a      	str	r2, [r5, #0]
 800b7de:	461a      	mov	r2, r3
 800b7e0:	f7f6 fe87 	bl	80024f2 <_write>
 800b7e4:	1c43      	adds	r3, r0, #1
 800b7e6:	d102      	bne.n	800b7ee <_write_r+0x1e>
 800b7e8:	682b      	ldr	r3, [r5, #0]
 800b7ea:	b103      	cbz	r3, 800b7ee <_write_r+0x1e>
 800b7ec:	6023      	str	r3, [r4, #0]
 800b7ee:	bd38      	pop	{r3, r4, r5, pc}
 800b7f0:	20004904 	.word	0x20004904

0800b7f4 <__swsetup_r>:
 800b7f4:	4b32      	ldr	r3, [pc, #200]	; (800b8c0 <__swsetup_r+0xcc>)
 800b7f6:	b570      	push	{r4, r5, r6, lr}
 800b7f8:	681d      	ldr	r5, [r3, #0]
 800b7fa:	4606      	mov	r6, r0
 800b7fc:	460c      	mov	r4, r1
 800b7fe:	b125      	cbz	r5, 800b80a <__swsetup_r+0x16>
 800b800:	69ab      	ldr	r3, [r5, #24]
 800b802:	b913      	cbnz	r3, 800b80a <__swsetup_r+0x16>
 800b804:	4628      	mov	r0, r5
 800b806:	f7fe fe93 	bl	800a530 <__sinit>
 800b80a:	4b2e      	ldr	r3, [pc, #184]	; (800b8c4 <__swsetup_r+0xd0>)
 800b80c:	429c      	cmp	r4, r3
 800b80e:	d10f      	bne.n	800b830 <__swsetup_r+0x3c>
 800b810:	686c      	ldr	r4, [r5, #4]
 800b812:	89a3      	ldrh	r3, [r4, #12]
 800b814:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b818:	0719      	lsls	r1, r3, #28
 800b81a:	d42c      	bmi.n	800b876 <__swsetup_r+0x82>
 800b81c:	06dd      	lsls	r5, r3, #27
 800b81e:	d411      	bmi.n	800b844 <__swsetup_r+0x50>
 800b820:	2309      	movs	r3, #9
 800b822:	6033      	str	r3, [r6, #0]
 800b824:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b828:	81a3      	strh	r3, [r4, #12]
 800b82a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b82e:	e03e      	b.n	800b8ae <__swsetup_r+0xba>
 800b830:	4b25      	ldr	r3, [pc, #148]	; (800b8c8 <__swsetup_r+0xd4>)
 800b832:	429c      	cmp	r4, r3
 800b834:	d101      	bne.n	800b83a <__swsetup_r+0x46>
 800b836:	68ac      	ldr	r4, [r5, #8]
 800b838:	e7eb      	b.n	800b812 <__swsetup_r+0x1e>
 800b83a:	4b24      	ldr	r3, [pc, #144]	; (800b8cc <__swsetup_r+0xd8>)
 800b83c:	429c      	cmp	r4, r3
 800b83e:	bf08      	it	eq
 800b840:	68ec      	ldreq	r4, [r5, #12]
 800b842:	e7e6      	b.n	800b812 <__swsetup_r+0x1e>
 800b844:	0758      	lsls	r0, r3, #29
 800b846:	d512      	bpl.n	800b86e <__swsetup_r+0x7a>
 800b848:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b84a:	b141      	cbz	r1, 800b85e <__swsetup_r+0x6a>
 800b84c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b850:	4299      	cmp	r1, r3
 800b852:	d002      	beq.n	800b85a <__swsetup_r+0x66>
 800b854:	4630      	mov	r0, r6
 800b856:	f001 f9eb 	bl	800cc30 <_free_r>
 800b85a:	2300      	movs	r3, #0
 800b85c:	6363      	str	r3, [r4, #52]	; 0x34
 800b85e:	89a3      	ldrh	r3, [r4, #12]
 800b860:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b864:	81a3      	strh	r3, [r4, #12]
 800b866:	2300      	movs	r3, #0
 800b868:	6063      	str	r3, [r4, #4]
 800b86a:	6923      	ldr	r3, [r4, #16]
 800b86c:	6023      	str	r3, [r4, #0]
 800b86e:	89a3      	ldrh	r3, [r4, #12]
 800b870:	f043 0308 	orr.w	r3, r3, #8
 800b874:	81a3      	strh	r3, [r4, #12]
 800b876:	6923      	ldr	r3, [r4, #16]
 800b878:	b94b      	cbnz	r3, 800b88e <__swsetup_r+0x9a>
 800b87a:	89a3      	ldrh	r3, [r4, #12]
 800b87c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b880:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b884:	d003      	beq.n	800b88e <__swsetup_r+0x9a>
 800b886:	4621      	mov	r1, r4
 800b888:	4630      	mov	r0, r6
 800b88a:	f000 fc9b 	bl	800c1c4 <__smakebuf_r>
 800b88e:	89a0      	ldrh	r0, [r4, #12]
 800b890:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b894:	f010 0301 	ands.w	r3, r0, #1
 800b898:	d00a      	beq.n	800b8b0 <__swsetup_r+0xbc>
 800b89a:	2300      	movs	r3, #0
 800b89c:	60a3      	str	r3, [r4, #8]
 800b89e:	6963      	ldr	r3, [r4, #20]
 800b8a0:	425b      	negs	r3, r3
 800b8a2:	61a3      	str	r3, [r4, #24]
 800b8a4:	6923      	ldr	r3, [r4, #16]
 800b8a6:	b943      	cbnz	r3, 800b8ba <__swsetup_r+0xc6>
 800b8a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b8ac:	d1ba      	bne.n	800b824 <__swsetup_r+0x30>
 800b8ae:	bd70      	pop	{r4, r5, r6, pc}
 800b8b0:	0781      	lsls	r1, r0, #30
 800b8b2:	bf58      	it	pl
 800b8b4:	6963      	ldrpl	r3, [r4, #20]
 800b8b6:	60a3      	str	r3, [r4, #8]
 800b8b8:	e7f4      	b.n	800b8a4 <__swsetup_r+0xb0>
 800b8ba:	2000      	movs	r0, #0
 800b8bc:	e7f7      	b.n	800b8ae <__swsetup_r+0xba>
 800b8be:	bf00      	nop
 800b8c0:	20000010 	.word	0x20000010
 800b8c4:	0800dd14 	.word	0x0800dd14
 800b8c8:	0800dd34 	.word	0x0800dd34
 800b8cc:	0800dcf4 	.word	0x0800dcf4

0800b8d0 <_close_r>:
 800b8d0:	b538      	push	{r3, r4, r5, lr}
 800b8d2:	4d06      	ldr	r5, [pc, #24]	; (800b8ec <_close_r+0x1c>)
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	4604      	mov	r4, r0
 800b8d8:	4608      	mov	r0, r1
 800b8da:	602b      	str	r3, [r5, #0]
 800b8dc:	f7f6 fe25 	bl	800252a <_close>
 800b8e0:	1c43      	adds	r3, r0, #1
 800b8e2:	d102      	bne.n	800b8ea <_close_r+0x1a>
 800b8e4:	682b      	ldr	r3, [r5, #0]
 800b8e6:	b103      	cbz	r3, 800b8ea <_close_r+0x1a>
 800b8e8:	6023      	str	r3, [r4, #0]
 800b8ea:	bd38      	pop	{r3, r4, r5, pc}
 800b8ec:	20004904 	.word	0x20004904

0800b8f0 <__sflush_r>:
 800b8f0:	898a      	ldrh	r2, [r1, #12]
 800b8f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8f6:	4605      	mov	r5, r0
 800b8f8:	0710      	lsls	r0, r2, #28
 800b8fa:	460c      	mov	r4, r1
 800b8fc:	d458      	bmi.n	800b9b0 <__sflush_r+0xc0>
 800b8fe:	684b      	ldr	r3, [r1, #4]
 800b900:	2b00      	cmp	r3, #0
 800b902:	dc05      	bgt.n	800b910 <__sflush_r+0x20>
 800b904:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b906:	2b00      	cmp	r3, #0
 800b908:	dc02      	bgt.n	800b910 <__sflush_r+0x20>
 800b90a:	2000      	movs	r0, #0
 800b90c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b910:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b912:	2e00      	cmp	r6, #0
 800b914:	d0f9      	beq.n	800b90a <__sflush_r+0x1a>
 800b916:	2300      	movs	r3, #0
 800b918:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b91c:	682f      	ldr	r7, [r5, #0]
 800b91e:	602b      	str	r3, [r5, #0]
 800b920:	d032      	beq.n	800b988 <__sflush_r+0x98>
 800b922:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b924:	89a3      	ldrh	r3, [r4, #12]
 800b926:	075a      	lsls	r2, r3, #29
 800b928:	d505      	bpl.n	800b936 <__sflush_r+0x46>
 800b92a:	6863      	ldr	r3, [r4, #4]
 800b92c:	1ac0      	subs	r0, r0, r3
 800b92e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b930:	b10b      	cbz	r3, 800b936 <__sflush_r+0x46>
 800b932:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b934:	1ac0      	subs	r0, r0, r3
 800b936:	2300      	movs	r3, #0
 800b938:	4602      	mov	r2, r0
 800b93a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b93c:	6a21      	ldr	r1, [r4, #32]
 800b93e:	4628      	mov	r0, r5
 800b940:	47b0      	blx	r6
 800b942:	1c43      	adds	r3, r0, #1
 800b944:	89a3      	ldrh	r3, [r4, #12]
 800b946:	d106      	bne.n	800b956 <__sflush_r+0x66>
 800b948:	6829      	ldr	r1, [r5, #0]
 800b94a:	291d      	cmp	r1, #29
 800b94c:	d82c      	bhi.n	800b9a8 <__sflush_r+0xb8>
 800b94e:	4a2a      	ldr	r2, [pc, #168]	; (800b9f8 <__sflush_r+0x108>)
 800b950:	40ca      	lsrs	r2, r1
 800b952:	07d6      	lsls	r6, r2, #31
 800b954:	d528      	bpl.n	800b9a8 <__sflush_r+0xb8>
 800b956:	2200      	movs	r2, #0
 800b958:	6062      	str	r2, [r4, #4]
 800b95a:	04d9      	lsls	r1, r3, #19
 800b95c:	6922      	ldr	r2, [r4, #16]
 800b95e:	6022      	str	r2, [r4, #0]
 800b960:	d504      	bpl.n	800b96c <__sflush_r+0x7c>
 800b962:	1c42      	adds	r2, r0, #1
 800b964:	d101      	bne.n	800b96a <__sflush_r+0x7a>
 800b966:	682b      	ldr	r3, [r5, #0]
 800b968:	b903      	cbnz	r3, 800b96c <__sflush_r+0x7c>
 800b96a:	6560      	str	r0, [r4, #84]	; 0x54
 800b96c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b96e:	602f      	str	r7, [r5, #0]
 800b970:	2900      	cmp	r1, #0
 800b972:	d0ca      	beq.n	800b90a <__sflush_r+0x1a>
 800b974:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b978:	4299      	cmp	r1, r3
 800b97a:	d002      	beq.n	800b982 <__sflush_r+0x92>
 800b97c:	4628      	mov	r0, r5
 800b97e:	f001 f957 	bl	800cc30 <_free_r>
 800b982:	2000      	movs	r0, #0
 800b984:	6360      	str	r0, [r4, #52]	; 0x34
 800b986:	e7c1      	b.n	800b90c <__sflush_r+0x1c>
 800b988:	6a21      	ldr	r1, [r4, #32]
 800b98a:	2301      	movs	r3, #1
 800b98c:	4628      	mov	r0, r5
 800b98e:	47b0      	blx	r6
 800b990:	1c41      	adds	r1, r0, #1
 800b992:	d1c7      	bne.n	800b924 <__sflush_r+0x34>
 800b994:	682b      	ldr	r3, [r5, #0]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d0c4      	beq.n	800b924 <__sflush_r+0x34>
 800b99a:	2b1d      	cmp	r3, #29
 800b99c:	d001      	beq.n	800b9a2 <__sflush_r+0xb2>
 800b99e:	2b16      	cmp	r3, #22
 800b9a0:	d101      	bne.n	800b9a6 <__sflush_r+0xb6>
 800b9a2:	602f      	str	r7, [r5, #0]
 800b9a4:	e7b1      	b.n	800b90a <__sflush_r+0x1a>
 800b9a6:	89a3      	ldrh	r3, [r4, #12]
 800b9a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9ac:	81a3      	strh	r3, [r4, #12]
 800b9ae:	e7ad      	b.n	800b90c <__sflush_r+0x1c>
 800b9b0:	690f      	ldr	r7, [r1, #16]
 800b9b2:	2f00      	cmp	r7, #0
 800b9b4:	d0a9      	beq.n	800b90a <__sflush_r+0x1a>
 800b9b6:	0793      	lsls	r3, r2, #30
 800b9b8:	680e      	ldr	r6, [r1, #0]
 800b9ba:	bf08      	it	eq
 800b9bc:	694b      	ldreq	r3, [r1, #20]
 800b9be:	600f      	str	r7, [r1, #0]
 800b9c0:	bf18      	it	ne
 800b9c2:	2300      	movne	r3, #0
 800b9c4:	eba6 0807 	sub.w	r8, r6, r7
 800b9c8:	608b      	str	r3, [r1, #8]
 800b9ca:	f1b8 0f00 	cmp.w	r8, #0
 800b9ce:	dd9c      	ble.n	800b90a <__sflush_r+0x1a>
 800b9d0:	6a21      	ldr	r1, [r4, #32]
 800b9d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b9d4:	4643      	mov	r3, r8
 800b9d6:	463a      	mov	r2, r7
 800b9d8:	4628      	mov	r0, r5
 800b9da:	47b0      	blx	r6
 800b9dc:	2800      	cmp	r0, #0
 800b9de:	dc06      	bgt.n	800b9ee <__sflush_r+0xfe>
 800b9e0:	89a3      	ldrh	r3, [r4, #12]
 800b9e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9e6:	81a3      	strh	r3, [r4, #12]
 800b9e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b9ec:	e78e      	b.n	800b90c <__sflush_r+0x1c>
 800b9ee:	4407      	add	r7, r0
 800b9f0:	eba8 0800 	sub.w	r8, r8, r0
 800b9f4:	e7e9      	b.n	800b9ca <__sflush_r+0xda>
 800b9f6:	bf00      	nop
 800b9f8:	20400001 	.word	0x20400001

0800b9fc <_fflush_r>:
 800b9fc:	b538      	push	{r3, r4, r5, lr}
 800b9fe:	690b      	ldr	r3, [r1, #16]
 800ba00:	4605      	mov	r5, r0
 800ba02:	460c      	mov	r4, r1
 800ba04:	b913      	cbnz	r3, 800ba0c <_fflush_r+0x10>
 800ba06:	2500      	movs	r5, #0
 800ba08:	4628      	mov	r0, r5
 800ba0a:	bd38      	pop	{r3, r4, r5, pc}
 800ba0c:	b118      	cbz	r0, 800ba16 <_fflush_r+0x1a>
 800ba0e:	6983      	ldr	r3, [r0, #24]
 800ba10:	b90b      	cbnz	r3, 800ba16 <_fflush_r+0x1a>
 800ba12:	f7fe fd8d 	bl	800a530 <__sinit>
 800ba16:	4b14      	ldr	r3, [pc, #80]	; (800ba68 <_fflush_r+0x6c>)
 800ba18:	429c      	cmp	r4, r3
 800ba1a:	d11b      	bne.n	800ba54 <_fflush_r+0x58>
 800ba1c:	686c      	ldr	r4, [r5, #4]
 800ba1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d0ef      	beq.n	800ba06 <_fflush_r+0xa>
 800ba26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ba28:	07d0      	lsls	r0, r2, #31
 800ba2a:	d404      	bmi.n	800ba36 <_fflush_r+0x3a>
 800ba2c:	0599      	lsls	r1, r3, #22
 800ba2e:	d402      	bmi.n	800ba36 <_fflush_r+0x3a>
 800ba30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba32:	f7fe fe40 	bl	800a6b6 <__retarget_lock_acquire_recursive>
 800ba36:	4628      	mov	r0, r5
 800ba38:	4621      	mov	r1, r4
 800ba3a:	f7ff ff59 	bl	800b8f0 <__sflush_r>
 800ba3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ba40:	07da      	lsls	r2, r3, #31
 800ba42:	4605      	mov	r5, r0
 800ba44:	d4e0      	bmi.n	800ba08 <_fflush_r+0xc>
 800ba46:	89a3      	ldrh	r3, [r4, #12]
 800ba48:	059b      	lsls	r3, r3, #22
 800ba4a:	d4dd      	bmi.n	800ba08 <_fflush_r+0xc>
 800ba4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba4e:	f7fe fe33 	bl	800a6b8 <__retarget_lock_release_recursive>
 800ba52:	e7d9      	b.n	800ba08 <_fflush_r+0xc>
 800ba54:	4b05      	ldr	r3, [pc, #20]	; (800ba6c <_fflush_r+0x70>)
 800ba56:	429c      	cmp	r4, r3
 800ba58:	d101      	bne.n	800ba5e <_fflush_r+0x62>
 800ba5a:	68ac      	ldr	r4, [r5, #8]
 800ba5c:	e7df      	b.n	800ba1e <_fflush_r+0x22>
 800ba5e:	4b04      	ldr	r3, [pc, #16]	; (800ba70 <_fflush_r+0x74>)
 800ba60:	429c      	cmp	r4, r3
 800ba62:	bf08      	it	eq
 800ba64:	68ec      	ldreq	r4, [r5, #12]
 800ba66:	e7da      	b.n	800ba1e <_fflush_r+0x22>
 800ba68:	0800dd14 	.word	0x0800dd14
 800ba6c:	0800dd34 	.word	0x0800dd34
 800ba70:	0800dcf4 	.word	0x0800dcf4

0800ba74 <rshift>:
 800ba74:	6903      	ldr	r3, [r0, #16]
 800ba76:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ba7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba7e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ba82:	f100 0414 	add.w	r4, r0, #20
 800ba86:	dd45      	ble.n	800bb14 <rshift+0xa0>
 800ba88:	f011 011f 	ands.w	r1, r1, #31
 800ba8c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ba90:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ba94:	d10c      	bne.n	800bab0 <rshift+0x3c>
 800ba96:	f100 0710 	add.w	r7, r0, #16
 800ba9a:	4629      	mov	r1, r5
 800ba9c:	42b1      	cmp	r1, r6
 800ba9e:	d334      	bcc.n	800bb0a <rshift+0x96>
 800baa0:	1a9b      	subs	r3, r3, r2
 800baa2:	009b      	lsls	r3, r3, #2
 800baa4:	1eea      	subs	r2, r5, #3
 800baa6:	4296      	cmp	r6, r2
 800baa8:	bf38      	it	cc
 800baaa:	2300      	movcc	r3, #0
 800baac:	4423      	add	r3, r4
 800baae:	e015      	b.n	800badc <rshift+0x68>
 800bab0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bab4:	f1c1 0820 	rsb	r8, r1, #32
 800bab8:	40cf      	lsrs	r7, r1
 800baba:	f105 0e04 	add.w	lr, r5, #4
 800babe:	46a1      	mov	r9, r4
 800bac0:	4576      	cmp	r6, lr
 800bac2:	46f4      	mov	ip, lr
 800bac4:	d815      	bhi.n	800baf2 <rshift+0x7e>
 800bac6:	1a9a      	subs	r2, r3, r2
 800bac8:	0092      	lsls	r2, r2, #2
 800baca:	3a04      	subs	r2, #4
 800bacc:	3501      	adds	r5, #1
 800bace:	42ae      	cmp	r6, r5
 800bad0:	bf38      	it	cc
 800bad2:	2200      	movcc	r2, #0
 800bad4:	18a3      	adds	r3, r4, r2
 800bad6:	50a7      	str	r7, [r4, r2]
 800bad8:	b107      	cbz	r7, 800badc <rshift+0x68>
 800bada:	3304      	adds	r3, #4
 800badc:	1b1a      	subs	r2, r3, r4
 800bade:	42a3      	cmp	r3, r4
 800bae0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bae4:	bf08      	it	eq
 800bae6:	2300      	moveq	r3, #0
 800bae8:	6102      	str	r2, [r0, #16]
 800baea:	bf08      	it	eq
 800baec:	6143      	streq	r3, [r0, #20]
 800baee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800baf2:	f8dc c000 	ldr.w	ip, [ip]
 800baf6:	fa0c fc08 	lsl.w	ip, ip, r8
 800bafa:	ea4c 0707 	orr.w	r7, ip, r7
 800bafe:	f849 7b04 	str.w	r7, [r9], #4
 800bb02:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bb06:	40cf      	lsrs	r7, r1
 800bb08:	e7da      	b.n	800bac0 <rshift+0x4c>
 800bb0a:	f851 cb04 	ldr.w	ip, [r1], #4
 800bb0e:	f847 cf04 	str.w	ip, [r7, #4]!
 800bb12:	e7c3      	b.n	800ba9c <rshift+0x28>
 800bb14:	4623      	mov	r3, r4
 800bb16:	e7e1      	b.n	800badc <rshift+0x68>

0800bb18 <__hexdig_fun>:
 800bb18:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bb1c:	2b09      	cmp	r3, #9
 800bb1e:	d802      	bhi.n	800bb26 <__hexdig_fun+0xe>
 800bb20:	3820      	subs	r0, #32
 800bb22:	b2c0      	uxtb	r0, r0
 800bb24:	4770      	bx	lr
 800bb26:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bb2a:	2b05      	cmp	r3, #5
 800bb2c:	d801      	bhi.n	800bb32 <__hexdig_fun+0x1a>
 800bb2e:	3847      	subs	r0, #71	; 0x47
 800bb30:	e7f7      	b.n	800bb22 <__hexdig_fun+0xa>
 800bb32:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bb36:	2b05      	cmp	r3, #5
 800bb38:	d801      	bhi.n	800bb3e <__hexdig_fun+0x26>
 800bb3a:	3827      	subs	r0, #39	; 0x27
 800bb3c:	e7f1      	b.n	800bb22 <__hexdig_fun+0xa>
 800bb3e:	2000      	movs	r0, #0
 800bb40:	4770      	bx	lr
	...

0800bb44 <__gethex>:
 800bb44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb48:	ed2d 8b02 	vpush	{d8}
 800bb4c:	b089      	sub	sp, #36	; 0x24
 800bb4e:	ee08 0a10 	vmov	s16, r0
 800bb52:	9304      	str	r3, [sp, #16]
 800bb54:	4bb4      	ldr	r3, [pc, #720]	; (800be28 <__gethex+0x2e4>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	9301      	str	r3, [sp, #4]
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	468b      	mov	fp, r1
 800bb5e:	4690      	mov	r8, r2
 800bb60:	f7f4 fb3e 	bl	80001e0 <strlen>
 800bb64:	9b01      	ldr	r3, [sp, #4]
 800bb66:	f8db 2000 	ldr.w	r2, [fp]
 800bb6a:	4403      	add	r3, r0
 800bb6c:	4682      	mov	sl, r0
 800bb6e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800bb72:	9305      	str	r3, [sp, #20]
 800bb74:	1c93      	adds	r3, r2, #2
 800bb76:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800bb7a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800bb7e:	32fe      	adds	r2, #254	; 0xfe
 800bb80:	18d1      	adds	r1, r2, r3
 800bb82:	461f      	mov	r7, r3
 800bb84:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bb88:	9100      	str	r1, [sp, #0]
 800bb8a:	2830      	cmp	r0, #48	; 0x30
 800bb8c:	d0f8      	beq.n	800bb80 <__gethex+0x3c>
 800bb8e:	f7ff ffc3 	bl	800bb18 <__hexdig_fun>
 800bb92:	4604      	mov	r4, r0
 800bb94:	2800      	cmp	r0, #0
 800bb96:	d13a      	bne.n	800bc0e <__gethex+0xca>
 800bb98:	9901      	ldr	r1, [sp, #4]
 800bb9a:	4652      	mov	r2, sl
 800bb9c:	4638      	mov	r0, r7
 800bb9e:	f7fe ff82 	bl	800aaa6 <strncmp>
 800bba2:	4605      	mov	r5, r0
 800bba4:	2800      	cmp	r0, #0
 800bba6:	d168      	bne.n	800bc7a <__gethex+0x136>
 800bba8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800bbac:	eb07 060a 	add.w	r6, r7, sl
 800bbb0:	f7ff ffb2 	bl	800bb18 <__hexdig_fun>
 800bbb4:	2800      	cmp	r0, #0
 800bbb6:	d062      	beq.n	800bc7e <__gethex+0x13a>
 800bbb8:	4633      	mov	r3, r6
 800bbba:	7818      	ldrb	r0, [r3, #0]
 800bbbc:	2830      	cmp	r0, #48	; 0x30
 800bbbe:	461f      	mov	r7, r3
 800bbc0:	f103 0301 	add.w	r3, r3, #1
 800bbc4:	d0f9      	beq.n	800bbba <__gethex+0x76>
 800bbc6:	f7ff ffa7 	bl	800bb18 <__hexdig_fun>
 800bbca:	2301      	movs	r3, #1
 800bbcc:	fab0 f480 	clz	r4, r0
 800bbd0:	0964      	lsrs	r4, r4, #5
 800bbd2:	4635      	mov	r5, r6
 800bbd4:	9300      	str	r3, [sp, #0]
 800bbd6:	463a      	mov	r2, r7
 800bbd8:	4616      	mov	r6, r2
 800bbda:	3201      	adds	r2, #1
 800bbdc:	7830      	ldrb	r0, [r6, #0]
 800bbde:	f7ff ff9b 	bl	800bb18 <__hexdig_fun>
 800bbe2:	2800      	cmp	r0, #0
 800bbe4:	d1f8      	bne.n	800bbd8 <__gethex+0x94>
 800bbe6:	9901      	ldr	r1, [sp, #4]
 800bbe8:	4652      	mov	r2, sl
 800bbea:	4630      	mov	r0, r6
 800bbec:	f7fe ff5b 	bl	800aaa6 <strncmp>
 800bbf0:	b980      	cbnz	r0, 800bc14 <__gethex+0xd0>
 800bbf2:	b94d      	cbnz	r5, 800bc08 <__gethex+0xc4>
 800bbf4:	eb06 050a 	add.w	r5, r6, sl
 800bbf8:	462a      	mov	r2, r5
 800bbfa:	4616      	mov	r6, r2
 800bbfc:	3201      	adds	r2, #1
 800bbfe:	7830      	ldrb	r0, [r6, #0]
 800bc00:	f7ff ff8a 	bl	800bb18 <__hexdig_fun>
 800bc04:	2800      	cmp	r0, #0
 800bc06:	d1f8      	bne.n	800bbfa <__gethex+0xb6>
 800bc08:	1bad      	subs	r5, r5, r6
 800bc0a:	00ad      	lsls	r5, r5, #2
 800bc0c:	e004      	b.n	800bc18 <__gethex+0xd4>
 800bc0e:	2400      	movs	r4, #0
 800bc10:	4625      	mov	r5, r4
 800bc12:	e7e0      	b.n	800bbd6 <__gethex+0x92>
 800bc14:	2d00      	cmp	r5, #0
 800bc16:	d1f7      	bne.n	800bc08 <__gethex+0xc4>
 800bc18:	7833      	ldrb	r3, [r6, #0]
 800bc1a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bc1e:	2b50      	cmp	r3, #80	; 0x50
 800bc20:	d13b      	bne.n	800bc9a <__gethex+0x156>
 800bc22:	7873      	ldrb	r3, [r6, #1]
 800bc24:	2b2b      	cmp	r3, #43	; 0x2b
 800bc26:	d02c      	beq.n	800bc82 <__gethex+0x13e>
 800bc28:	2b2d      	cmp	r3, #45	; 0x2d
 800bc2a:	d02e      	beq.n	800bc8a <__gethex+0x146>
 800bc2c:	1c71      	adds	r1, r6, #1
 800bc2e:	f04f 0900 	mov.w	r9, #0
 800bc32:	7808      	ldrb	r0, [r1, #0]
 800bc34:	f7ff ff70 	bl	800bb18 <__hexdig_fun>
 800bc38:	1e43      	subs	r3, r0, #1
 800bc3a:	b2db      	uxtb	r3, r3
 800bc3c:	2b18      	cmp	r3, #24
 800bc3e:	d82c      	bhi.n	800bc9a <__gethex+0x156>
 800bc40:	f1a0 0210 	sub.w	r2, r0, #16
 800bc44:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bc48:	f7ff ff66 	bl	800bb18 <__hexdig_fun>
 800bc4c:	1e43      	subs	r3, r0, #1
 800bc4e:	b2db      	uxtb	r3, r3
 800bc50:	2b18      	cmp	r3, #24
 800bc52:	d91d      	bls.n	800bc90 <__gethex+0x14c>
 800bc54:	f1b9 0f00 	cmp.w	r9, #0
 800bc58:	d000      	beq.n	800bc5c <__gethex+0x118>
 800bc5a:	4252      	negs	r2, r2
 800bc5c:	4415      	add	r5, r2
 800bc5e:	f8cb 1000 	str.w	r1, [fp]
 800bc62:	b1e4      	cbz	r4, 800bc9e <__gethex+0x15a>
 800bc64:	9b00      	ldr	r3, [sp, #0]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	bf14      	ite	ne
 800bc6a:	2700      	movne	r7, #0
 800bc6c:	2706      	moveq	r7, #6
 800bc6e:	4638      	mov	r0, r7
 800bc70:	b009      	add	sp, #36	; 0x24
 800bc72:	ecbd 8b02 	vpop	{d8}
 800bc76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc7a:	463e      	mov	r6, r7
 800bc7c:	4625      	mov	r5, r4
 800bc7e:	2401      	movs	r4, #1
 800bc80:	e7ca      	b.n	800bc18 <__gethex+0xd4>
 800bc82:	f04f 0900 	mov.w	r9, #0
 800bc86:	1cb1      	adds	r1, r6, #2
 800bc88:	e7d3      	b.n	800bc32 <__gethex+0xee>
 800bc8a:	f04f 0901 	mov.w	r9, #1
 800bc8e:	e7fa      	b.n	800bc86 <__gethex+0x142>
 800bc90:	230a      	movs	r3, #10
 800bc92:	fb03 0202 	mla	r2, r3, r2, r0
 800bc96:	3a10      	subs	r2, #16
 800bc98:	e7d4      	b.n	800bc44 <__gethex+0x100>
 800bc9a:	4631      	mov	r1, r6
 800bc9c:	e7df      	b.n	800bc5e <__gethex+0x11a>
 800bc9e:	1bf3      	subs	r3, r6, r7
 800bca0:	3b01      	subs	r3, #1
 800bca2:	4621      	mov	r1, r4
 800bca4:	2b07      	cmp	r3, #7
 800bca6:	dc0b      	bgt.n	800bcc0 <__gethex+0x17c>
 800bca8:	ee18 0a10 	vmov	r0, s16
 800bcac:	f000 fae8 	bl	800c280 <_Balloc>
 800bcb0:	4604      	mov	r4, r0
 800bcb2:	b940      	cbnz	r0, 800bcc6 <__gethex+0x182>
 800bcb4:	4b5d      	ldr	r3, [pc, #372]	; (800be2c <__gethex+0x2e8>)
 800bcb6:	4602      	mov	r2, r0
 800bcb8:	21de      	movs	r1, #222	; 0xde
 800bcba:	485d      	ldr	r0, [pc, #372]	; (800be30 <__gethex+0x2ec>)
 800bcbc:	f001 fb1a 	bl	800d2f4 <__assert_func>
 800bcc0:	3101      	adds	r1, #1
 800bcc2:	105b      	asrs	r3, r3, #1
 800bcc4:	e7ee      	b.n	800bca4 <__gethex+0x160>
 800bcc6:	f100 0914 	add.w	r9, r0, #20
 800bcca:	f04f 0b00 	mov.w	fp, #0
 800bcce:	f1ca 0301 	rsb	r3, sl, #1
 800bcd2:	f8cd 9008 	str.w	r9, [sp, #8]
 800bcd6:	f8cd b000 	str.w	fp, [sp]
 800bcda:	9306      	str	r3, [sp, #24]
 800bcdc:	42b7      	cmp	r7, r6
 800bcde:	d340      	bcc.n	800bd62 <__gethex+0x21e>
 800bce0:	9802      	ldr	r0, [sp, #8]
 800bce2:	9b00      	ldr	r3, [sp, #0]
 800bce4:	f840 3b04 	str.w	r3, [r0], #4
 800bce8:	eba0 0009 	sub.w	r0, r0, r9
 800bcec:	1080      	asrs	r0, r0, #2
 800bcee:	0146      	lsls	r6, r0, #5
 800bcf0:	6120      	str	r0, [r4, #16]
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f000 fbb6 	bl	800c464 <__hi0bits>
 800bcf8:	1a30      	subs	r0, r6, r0
 800bcfa:	f8d8 6000 	ldr.w	r6, [r8]
 800bcfe:	42b0      	cmp	r0, r6
 800bd00:	dd63      	ble.n	800bdca <__gethex+0x286>
 800bd02:	1b87      	subs	r7, r0, r6
 800bd04:	4639      	mov	r1, r7
 800bd06:	4620      	mov	r0, r4
 800bd08:	f000 ff5a 	bl	800cbc0 <__any_on>
 800bd0c:	4682      	mov	sl, r0
 800bd0e:	b1a8      	cbz	r0, 800bd3c <__gethex+0x1f8>
 800bd10:	1e7b      	subs	r3, r7, #1
 800bd12:	1159      	asrs	r1, r3, #5
 800bd14:	f003 021f 	and.w	r2, r3, #31
 800bd18:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800bd1c:	f04f 0a01 	mov.w	sl, #1
 800bd20:	fa0a f202 	lsl.w	r2, sl, r2
 800bd24:	420a      	tst	r2, r1
 800bd26:	d009      	beq.n	800bd3c <__gethex+0x1f8>
 800bd28:	4553      	cmp	r3, sl
 800bd2a:	dd05      	ble.n	800bd38 <__gethex+0x1f4>
 800bd2c:	1eb9      	subs	r1, r7, #2
 800bd2e:	4620      	mov	r0, r4
 800bd30:	f000 ff46 	bl	800cbc0 <__any_on>
 800bd34:	2800      	cmp	r0, #0
 800bd36:	d145      	bne.n	800bdc4 <__gethex+0x280>
 800bd38:	f04f 0a02 	mov.w	sl, #2
 800bd3c:	4639      	mov	r1, r7
 800bd3e:	4620      	mov	r0, r4
 800bd40:	f7ff fe98 	bl	800ba74 <rshift>
 800bd44:	443d      	add	r5, r7
 800bd46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bd4a:	42ab      	cmp	r3, r5
 800bd4c:	da4c      	bge.n	800bde8 <__gethex+0x2a4>
 800bd4e:	ee18 0a10 	vmov	r0, s16
 800bd52:	4621      	mov	r1, r4
 800bd54:	f000 fad4 	bl	800c300 <_Bfree>
 800bd58:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	6013      	str	r3, [r2, #0]
 800bd5e:	27a3      	movs	r7, #163	; 0xa3
 800bd60:	e785      	b.n	800bc6e <__gethex+0x12a>
 800bd62:	1e73      	subs	r3, r6, #1
 800bd64:	9a05      	ldr	r2, [sp, #20]
 800bd66:	9303      	str	r3, [sp, #12]
 800bd68:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bd6c:	4293      	cmp	r3, r2
 800bd6e:	d019      	beq.n	800bda4 <__gethex+0x260>
 800bd70:	f1bb 0f20 	cmp.w	fp, #32
 800bd74:	d107      	bne.n	800bd86 <__gethex+0x242>
 800bd76:	9b02      	ldr	r3, [sp, #8]
 800bd78:	9a00      	ldr	r2, [sp, #0]
 800bd7a:	f843 2b04 	str.w	r2, [r3], #4
 800bd7e:	9302      	str	r3, [sp, #8]
 800bd80:	2300      	movs	r3, #0
 800bd82:	9300      	str	r3, [sp, #0]
 800bd84:	469b      	mov	fp, r3
 800bd86:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800bd8a:	f7ff fec5 	bl	800bb18 <__hexdig_fun>
 800bd8e:	9b00      	ldr	r3, [sp, #0]
 800bd90:	f000 000f 	and.w	r0, r0, #15
 800bd94:	fa00 f00b 	lsl.w	r0, r0, fp
 800bd98:	4303      	orrs	r3, r0
 800bd9a:	9300      	str	r3, [sp, #0]
 800bd9c:	f10b 0b04 	add.w	fp, fp, #4
 800bda0:	9b03      	ldr	r3, [sp, #12]
 800bda2:	e00d      	b.n	800bdc0 <__gethex+0x27c>
 800bda4:	9b03      	ldr	r3, [sp, #12]
 800bda6:	9a06      	ldr	r2, [sp, #24]
 800bda8:	4413      	add	r3, r2
 800bdaa:	42bb      	cmp	r3, r7
 800bdac:	d3e0      	bcc.n	800bd70 <__gethex+0x22c>
 800bdae:	4618      	mov	r0, r3
 800bdb0:	9901      	ldr	r1, [sp, #4]
 800bdb2:	9307      	str	r3, [sp, #28]
 800bdb4:	4652      	mov	r2, sl
 800bdb6:	f7fe fe76 	bl	800aaa6 <strncmp>
 800bdba:	9b07      	ldr	r3, [sp, #28]
 800bdbc:	2800      	cmp	r0, #0
 800bdbe:	d1d7      	bne.n	800bd70 <__gethex+0x22c>
 800bdc0:	461e      	mov	r6, r3
 800bdc2:	e78b      	b.n	800bcdc <__gethex+0x198>
 800bdc4:	f04f 0a03 	mov.w	sl, #3
 800bdc8:	e7b8      	b.n	800bd3c <__gethex+0x1f8>
 800bdca:	da0a      	bge.n	800bde2 <__gethex+0x29e>
 800bdcc:	1a37      	subs	r7, r6, r0
 800bdce:	4621      	mov	r1, r4
 800bdd0:	ee18 0a10 	vmov	r0, s16
 800bdd4:	463a      	mov	r2, r7
 800bdd6:	f000 fcaf 	bl	800c738 <__lshift>
 800bdda:	1bed      	subs	r5, r5, r7
 800bddc:	4604      	mov	r4, r0
 800bdde:	f100 0914 	add.w	r9, r0, #20
 800bde2:	f04f 0a00 	mov.w	sl, #0
 800bde6:	e7ae      	b.n	800bd46 <__gethex+0x202>
 800bde8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800bdec:	42a8      	cmp	r0, r5
 800bdee:	dd72      	ble.n	800bed6 <__gethex+0x392>
 800bdf0:	1b45      	subs	r5, r0, r5
 800bdf2:	42ae      	cmp	r6, r5
 800bdf4:	dc36      	bgt.n	800be64 <__gethex+0x320>
 800bdf6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bdfa:	2b02      	cmp	r3, #2
 800bdfc:	d02a      	beq.n	800be54 <__gethex+0x310>
 800bdfe:	2b03      	cmp	r3, #3
 800be00:	d02c      	beq.n	800be5c <__gethex+0x318>
 800be02:	2b01      	cmp	r3, #1
 800be04:	d11c      	bne.n	800be40 <__gethex+0x2fc>
 800be06:	42ae      	cmp	r6, r5
 800be08:	d11a      	bne.n	800be40 <__gethex+0x2fc>
 800be0a:	2e01      	cmp	r6, #1
 800be0c:	d112      	bne.n	800be34 <__gethex+0x2f0>
 800be0e:	9a04      	ldr	r2, [sp, #16]
 800be10:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800be14:	6013      	str	r3, [r2, #0]
 800be16:	2301      	movs	r3, #1
 800be18:	6123      	str	r3, [r4, #16]
 800be1a:	f8c9 3000 	str.w	r3, [r9]
 800be1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800be20:	2762      	movs	r7, #98	; 0x62
 800be22:	601c      	str	r4, [r3, #0]
 800be24:	e723      	b.n	800bc6e <__gethex+0x12a>
 800be26:	bf00      	nop
 800be28:	0800de30 	.word	0x0800de30
 800be2c:	0800ddb8 	.word	0x0800ddb8
 800be30:	0800ddc9 	.word	0x0800ddc9
 800be34:	1e71      	subs	r1, r6, #1
 800be36:	4620      	mov	r0, r4
 800be38:	f000 fec2 	bl	800cbc0 <__any_on>
 800be3c:	2800      	cmp	r0, #0
 800be3e:	d1e6      	bne.n	800be0e <__gethex+0x2ca>
 800be40:	ee18 0a10 	vmov	r0, s16
 800be44:	4621      	mov	r1, r4
 800be46:	f000 fa5b 	bl	800c300 <_Bfree>
 800be4a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800be4c:	2300      	movs	r3, #0
 800be4e:	6013      	str	r3, [r2, #0]
 800be50:	2750      	movs	r7, #80	; 0x50
 800be52:	e70c      	b.n	800bc6e <__gethex+0x12a>
 800be54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800be56:	2b00      	cmp	r3, #0
 800be58:	d1f2      	bne.n	800be40 <__gethex+0x2fc>
 800be5a:	e7d8      	b.n	800be0e <__gethex+0x2ca>
 800be5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d1d5      	bne.n	800be0e <__gethex+0x2ca>
 800be62:	e7ed      	b.n	800be40 <__gethex+0x2fc>
 800be64:	1e6f      	subs	r7, r5, #1
 800be66:	f1ba 0f00 	cmp.w	sl, #0
 800be6a:	d131      	bne.n	800bed0 <__gethex+0x38c>
 800be6c:	b127      	cbz	r7, 800be78 <__gethex+0x334>
 800be6e:	4639      	mov	r1, r7
 800be70:	4620      	mov	r0, r4
 800be72:	f000 fea5 	bl	800cbc0 <__any_on>
 800be76:	4682      	mov	sl, r0
 800be78:	117b      	asrs	r3, r7, #5
 800be7a:	2101      	movs	r1, #1
 800be7c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800be80:	f007 071f 	and.w	r7, r7, #31
 800be84:	fa01 f707 	lsl.w	r7, r1, r7
 800be88:	421f      	tst	r7, r3
 800be8a:	4629      	mov	r1, r5
 800be8c:	4620      	mov	r0, r4
 800be8e:	bf18      	it	ne
 800be90:	f04a 0a02 	orrne.w	sl, sl, #2
 800be94:	1b76      	subs	r6, r6, r5
 800be96:	f7ff fded 	bl	800ba74 <rshift>
 800be9a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800be9e:	2702      	movs	r7, #2
 800bea0:	f1ba 0f00 	cmp.w	sl, #0
 800bea4:	d048      	beq.n	800bf38 <__gethex+0x3f4>
 800bea6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800beaa:	2b02      	cmp	r3, #2
 800beac:	d015      	beq.n	800beda <__gethex+0x396>
 800beae:	2b03      	cmp	r3, #3
 800beb0:	d017      	beq.n	800bee2 <__gethex+0x39e>
 800beb2:	2b01      	cmp	r3, #1
 800beb4:	d109      	bne.n	800beca <__gethex+0x386>
 800beb6:	f01a 0f02 	tst.w	sl, #2
 800beba:	d006      	beq.n	800beca <__gethex+0x386>
 800bebc:	f8d9 0000 	ldr.w	r0, [r9]
 800bec0:	ea4a 0a00 	orr.w	sl, sl, r0
 800bec4:	f01a 0f01 	tst.w	sl, #1
 800bec8:	d10e      	bne.n	800bee8 <__gethex+0x3a4>
 800beca:	f047 0710 	orr.w	r7, r7, #16
 800bece:	e033      	b.n	800bf38 <__gethex+0x3f4>
 800bed0:	f04f 0a01 	mov.w	sl, #1
 800bed4:	e7d0      	b.n	800be78 <__gethex+0x334>
 800bed6:	2701      	movs	r7, #1
 800bed8:	e7e2      	b.n	800bea0 <__gethex+0x35c>
 800beda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bedc:	f1c3 0301 	rsb	r3, r3, #1
 800bee0:	9315      	str	r3, [sp, #84]	; 0x54
 800bee2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d0f0      	beq.n	800beca <__gethex+0x386>
 800bee8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800beec:	f104 0314 	add.w	r3, r4, #20
 800bef0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bef4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bef8:	f04f 0c00 	mov.w	ip, #0
 800befc:	4618      	mov	r0, r3
 800befe:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf02:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800bf06:	d01c      	beq.n	800bf42 <__gethex+0x3fe>
 800bf08:	3201      	adds	r2, #1
 800bf0a:	6002      	str	r2, [r0, #0]
 800bf0c:	2f02      	cmp	r7, #2
 800bf0e:	f104 0314 	add.w	r3, r4, #20
 800bf12:	d13f      	bne.n	800bf94 <__gethex+0x450>
 800bf14:	f8d8 2000 	ldr.w	r2, [r8]
 800bf18:	3a01      	subs	r2, #1
 800bf1a:	42b2      	cmp	r2, r6
 800bf1c:	d10a      	bne.n	800bf34 <__gethex+0x3f0>
 800bf1e:	1171      	asrs	r1, r6, #5
 800bf20:	2201      	movs	r2, #1
 800bf22:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bf26:	f006 061f 	and.w	r6, r6, #31
 800bf2a:	fa02 f606 	lsl.w	r6, r2, r6
 800bf2e:	421e      	tst	r6, r3
 800bf30:	bf18      	it	ne
 800bf32:	4617      	movne	r7, r2
 800bf34:	f047 0720 	orr.w	r7, r7, #32
 800bf38:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bf3a:	601c      	str	r4, [r3, #0]
 800bf3c:	9b04      	ldr	r3, [sp, #16]
 800bf3e:	601d      	str	r5, [r3, #0]
 800bf40:	e695      	b.n	800bc6e <__gethex+0x12a>
 800bf42:	4299      	cmp	r1, r3
 800bf44:	f843 cc04 	str.w	ip, [r3, #-4]
 800bf48:	d8d8      	bhi.n	800befc <__gethex+0x3b8>
 800bf4a:	68a3      	ldr	r3, [r4, #8]
 800bf4c:	459b      	cmp	fp, r3
 800bf4e:	db19      	blt.n	800bf84 <__gethex+0x440>
 800bf50:	6861      	ldr	r1, [r4, #4]
 800bf52:	ee18 0a10 	vmov	r0, s16
 800bf56:	3101      	adds	r1, #1
 800bf58:	f000 f992 	bl	800c280 <_Balloc>
 800bf5c:	4681      	mov	r9, r0
 800bf5e:	b918      	cbnz	r0, 800bf68 <__gethex+0x424>
 800bf60:	4b1a      	ldr	r3, [pc, #104]	; (800bfcc <__gethex+0x488>)
 800bf62:	4602      	mov	r2, r0
 800bf64:	2184      	movs	r1, #132	; 0x84
 800bf66:	e6a8      	b.n	800bcba <__gethex+0x176>
 800bf68:	6922      	ldr	r2, [r4, #16]
 800bf6a:	3202      	adds	r2, #2
 800bf6c:	f104 010c 	add.w	r1, r4, #12
 800bf70:	0092      	lsls	r2, r2, #2
 800bf72:	300c      	adds	r0, #12
 800bf74:	f7fe fba1 	bl	800a6ba <memcpy>
 800bf78:	4621      	mov	r1, r4
 800bf7a:	ee18 0a10 	vmov	r0, s16
 800bf7e:	f000 f9bf 	bl	800c300 <_Bfree>
 800bf82:	464c      	mov	r4, r9
 800bf84:	6923      	ldr	r3, [r4, #16]
 800bf86:	1c5a      	adds	r2, r3, #1
 800bf88:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bf8c:	6122      	str	r2, [r4, #16]
 800bf8e:	2201      	movs	r2, #1
 800bf90:	615a      	str	r2, [r3, #20]
 800bf92:	e7bb      	b.n	800bf0c <__gethex+0x3c8>
 800bf94:	6922      	ldr	r2, [r4, #16]
 800bf96:	455a      	cmp	r2, fp
 800bf98:	dd0b      	ble.n	800bfb2 <__gethex+0x46e>
 800bf9a:	2101      	movs	r1, #1
 800bf9c:	4620      	mov	r0, r4
 800bf9e:	f7ff fd69 	bl	800ba74 <rshift>
 800bfa2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bfa6:	3501      	adds	r5, #1
 800bfa8:	42ab      	cmp	r3, r5
 800bfaa:	f6ff aed0 	blt.w	800bd4e <__gethex+0x20a>
 800bfae:	2701      	movs	r7, #1
 800bfb0:	e7c0      	b.n	800bf34 <__gethex+0x3f0>
 800bfb2:	f016 061f 	ands.w	r6, r6, #31
 800bfb6:	d0fa      	beq.n	800bfae <__gethex+0x46a>
 800bfb8:	4453      	add	r3, sl
 800bfba:	f1c6 0620 	rsb	r6, r6, #32
 800bfbe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bfc2:	f000 fa4f 	bl	800c464 <__hi0bits>
 800bfc6:	42b0      	cmp	r0, r6
 800bfc8:	dbe7      	blt.n	800bf9a <__gethex+0x456>
 800bfca:	e7f0      	b.n	800bfae <__gethex+0x46a>
 800bfcc:	0800ddb8 	.word	0x0800ddb8

0800bfd0 <L_shift>:
 800bfd0:	f1c2 0208 	rsb	r2, r2, #8
 800bfd4:	0092      	lsls	r2, r2, #2
 800bfd6:	b570      	push	{r4, r5, r6, lr}
 800bfd8:	f1c2 0620 	rsb	r6, r2, #32
 800bfdc:	6843      	ldr	r3, [r0, #4]
 800bfde:	6804      	ldr	r4, [r0, #0]
 800bfe0:	fa03 f506 	lsl.w	r5, r3, r6
 800bfe4:	432c      	orrs	r4, r5
 800bfe6:	40d3      	lsrs	r3, r2
 800bfe8:	6004      	str	r4, [r0, #0]
 800bfea:	f840 3f04 	str.w	r3, [r0, #4]!
 800bfee:	4288      	cmp	r0, r1
 800bff0:	d3f4      	bcc.n	800bfdc <L_shift+0xc>
 800bff2:	bd70      	pop	{r4, r5, r6, pc}

0800bff4 <__match>:
 800bff4:	b530      	push	{r4, r5, lr}
 800bff6:	6803      	ldr	r3, [r0, #0]
 800bff8:	3301      	adds	r3, #1
 800bffa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bffe:	b914      	cbnz	r4, 800c006 <__match+0x12>
 800c000:	6003      	str	r3, [r0, #0]
 800c002:	2001      	movs	r0, #1
 800c004:	bd30      	pop	{r4, r5, pc}
 800c006:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c00a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c00e:	2d19      	cmp	r5, #25
 800c010:	bf98      	it	ls
 800c012:	3220      	addls	r2, #32
 800c014:	42a2      	cmp	r2, r4
 800c016:	d0f0      	beq.n	800bffa <__match+0x6>
 800c018:	2000      	movs	r0, #0
 800c01a:	e7f3      	b.n	800c004 <__match+0x10>

0800c01c <__hexnan>:
 800c01c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c020:	680b      	ldr	r3, [r1, #0]
 800c022:	115e      	asrs	r6, r3, #5
 800c024:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c028:	f013 031f 	ands.w	r3, r3, #31
 800c02c:	b087      	sub	sp, #28
 800c02e:	bf18      	it	ne
 800c030:	3604      	addne	r6, #4
 800c032:	2500      	movs	r5, #0
 800c034:	1f37      	subs	r7, r6, #4
 800c036:	4690      	mov	r8, r2
 800c038:	6802      	ldr	r2, [r0, #0]
 800c03a:	9301      	str	r3, [sp, #4]
 800c03c:	4682      	mov	sl, r0
 800c03e:	f846 5c04 	str.w	r5, [r6, #-4]
 800c042:	46b9      	mov	r9, r7
 800c044:	463c      	mov	r4, r7
 800c046:	9502      	str	r5, [sp, #8]
 800c048:	46ab      	mov	fp, r5
 800c04a:	7851      	ldrb	r1, [r2, #1]
 800c04c:	1c53      	adds	r3, r2, #1
 800c04e:	9303      	str	r3, [sp, #12]
 800c050:	b341      	cbz	r1, 800c0a4 <__hexnan+0x88>
 800c052:	4608      	mov	r0, r1
 800c054:	9205      	str	r2, [sp, #20]
 800c056:	9104      	str	r1, [sp, #16]
 800c058:	f7ff fd5e 	bl	800bb18 <__hexdig_fun>
 800c05c:	2800      	cmp	r0, #0
 800c05e:	d14f      	bne.n	800c100 <__hexnan+0xe4>
 800c060:	9904      	ldr	r1, [sp, #16]
 800c062:	9a05      	ldr	r2, [sp, #20]
 800c064:	2920      	cmp	r1, #32
 800c066:	d818      	bhi.n	800c09a <__hexnan+0x7e>
 800c068:	9b02      	ldr	r3, [sp, #8]
 800c06a:	459b      	cmp	fp, r3
 800c06c:	dd13      	ble.n	800c096 <__hexnan+0x7a>
 800c06e:	454c      	cmp	r4, r9
 800c070:	d206      	bcs.n	800c080 <__hexnan+0x64>
 800c072:	2d07      	cmp	r5, #7
 800c074:	dc04      	bgt.n	800c080 <__hexnan+0x64>
 800c076:	462a      	mov	r2, r5
 800c078:	4649      	mov	r1, r9
 800c07a:	4620      	mov	r0, r4
 800c07c:	f7ff ffa8 	bl	800bfd0 <L_shift>
 800c080:	4544      	cmp	r4, r8
 800c082:	d950      	bls.n	800c126 <__hexnan+0x10a>
 800c084:	2300      	movs	r3, #0
 800c086:	f1a4 0904 	sub.w	r9, r4, #4
 800c08a:	f844 3c04 	str.w	r3, [r4, #-4]
 800c08e:	f8cd b008 	str.w	fp, [sp, #8]
 800c092:	464c      	mov	r4, r9
 800c094:	461d      	mov	r5, r3
 800c096:	9a03      	ldr	r2, [sp, #12]
 800c098:	e7d7      	b.n	800c04a <__hexnan+0x2e>
 800c09a:	2929      	cmp	r1, #41	; 0x29
 800c09c:	d156      	bne.n	800c14c <__hexnan+0x130>
 800c09e:	3202      	adds	r2, #2
 800c0a0:	f8ca 2000 	str.w	r2, [sl]
 800c0a4:	f1bb 0f00 	cmp.w	fp, #0
 800c0a8:	d050      	beq.n	800c14c <__hexnan+0x130>
 800c0aa:	454c      	cmp	r4, r9
 800c0ac:	d206      	bcs.n	800c0bc <__hexnan+0xa0>
 800c0ae:	2d07      	cmp	r5, #7
 800c0b0:	dc04      	bgt.n	800c0bc <__hexnan+0xa0>
 800c0b2:	462a      	mov	r2, r5
 800c0b4:	4649      	mov	r1, r9
 800c0b6:	4620      	mov	r0, r4
 800c0b8:	f7ff ff8a 	bl	800bfd0 <L_shift>
 800c0bc:	4544      	cmp	r4, r8
 800c0be:	d934      	bls.n	800c12a <__hexnan+0x10e>
 800c0c0:	f1a8 0204 	sub.w	r2, r8, #4
 800c0c4:	4623      	mov	r3, r4
 800c0c6:	f853 1b04 	ldr.w	r1, [r3], #4
 800c0ca:	f842 1f04 	str.w	r1, [r2, #4]!
 800c0ce:	429f      	cmp	r7, r3
 800c0d0:	d2f9      	bcs.n	800c0c6 <__hexnan+0xaa>
 800c0d2:	1b3b      	subs	r3, r7, r4
 800c0d4:	f023 0303 	bic.w	r3, r3, #3
 800c0d8:	3304      	adds	r3, #4
 800c0da:	3401      	adds	r4, #1
 800c0dc:	3e03      	subs	r6, #3
 800c0de:	42b4      	cmp	r4, r6
 800c0e0:	bf88      	it	hi
 800c0e2:	2304      	movhi	r3, #4
 800c0e4:	4443      	add	r3, r8
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	f843 2b04 	str.w	r2, [r3], #4
 800c0ec:	429f      	cmp	r7, r3
 800c0ee:	d2fb      	bcs.n	800c0e8 <__hexnan+0xcc>
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	b91b      	cbnz	r3, 800c0fc <__hexnan+0xe0>
 800c0f4:	4547      	cmp	r7, r8
 800c0f6:	d127      	bne.n	800c148 <__hexnan+0x12c>
 800c0f8:	2301      	movs	r3, #1
 800c0fa:	603b      	str	r3, [r7, #0]
 800c0fc:	2005      	movs	r0, #5
 800c0fe:	e026      	b.n	800c14e <__hexnan+0x132>
 800c100:	3501      	adds	r5, #1
 800c102:	2d08      	cmp	r5, #8
 800c104:	f10b 0b01 	add.w	fp, fp, #1
 800c108:	dd06      	ble.n	800c118 <__hexnan+0xfc>
 800c10a:	4544      	cmp	r4, r8
 800c10c:	d9c3      	bls.n	800c096 <__hexnan+0x7a>
 800c10e:	2300      	movs	r3, #0
 800c110:	f844 3c04 	str.w	r3, [r4, #-4]
 800c114:	2501      	movs	r5, #1
 800c116:	3c04      	subs	r4, #4
 800c118:	6822      	ldr	r2, [r4, #0]
 800c11a:	f000 000f 	and.w	r0, r0, #15
 800c11e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c122:	6022      	str	r2, [r4, #0]
 800c124:	e7b7      	b.n	800c096 <__hexnan+0x7a>
 800c126:	2508      	movs	r5, #8
 800c128:	e7b5      	b.n	800c096 <__hexnan+0x7a>
 800c12a:	9b01      	ldr	r3, [sp, #4]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d0df      	beq.n	800c0f0 <__hexnan+0xd4>
 800c130:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c134:	f1c3 0320 	rsb	r3, r3, #32
 800c138:	fa22 f303 	lsr.w	r3, r2, r3
 800c13c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c140:	401a      	ands	r2, r3
 800c142:	f846 2c04 	str.w	r2, [r6, #-4]
 800c146:	e7d3      	b.n	800c0f0 <__hexnan+0xd4>
 800c148:	3f04      	subs	r7, #4
 800c14a:	e7d1      	b.n	800c0f0 <__hexnan+0xd4>
 800c14c:	2004      	movs	r0, #4
 800c14e:	b007      	add	sp, #28
 800c150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c154 <_lseek_r>:
 800c154:	b538      	push	{r3, r4, r5, lr}
 800c156:	4d07      	ldr	r5, [pc, #28]	; (800c174 <_lseek_r+0x20>)
 800c158:	4604      	mov	r4, r0
 800c15a:	4608      	mov	r0, r1
 800c15c:	4611      	mov	r1, r2
 800c15e:	2200      	movs	r2, #0
 800c160:	602a      	str	r2, [r5, #0]
 800c162:	461a      	mov	r2, r3
 800c164:	f7f6 fa08 	bl	8002578 <_lseek>
 800c168:	1c43      	adds	r3, r0, #1
 800c16a:	d102      	bne.n	800c172 <_lseek_r+0x1e>
 800c16c:	682b      	ldr	r3, [r5, #0]
 800c16e:	b103      	cbz	r3, 800c172 <_lseek_r+0x1e>
 800c170:	6023      	str	r3, [r4, #0]
 800c172:	bd38      	pop	{r3, r4, r5, pc}
 800c174:	20004904 	.word	0x20004904

0800c178 <__swhatbuf_r>:
 800c178:	b570      	push	{r4, r5, r6, lr}
 800c17a:	460e      	mov	r6, r1
 800c17c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c180:	2900      	cmp	r1, #0
 800c182:	b096      	sub	sp, #88	; 0x58
 800c184:	4614      	mov	r4, r2
 800c186:	461d      	mov	r5, r3
 800c188:	da08      	bge.n	800c19c <__swhatbuf_r+0x24>
 800c18a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c18e:	2200      	movs	r2, #0
 800c190:	602a      	str	r2, [r5, #0]
 800c192:	061a      	lsls	r2, r3, #24
 800c194:	d410      	bmi.n	800c1b8 <__swhatbuf_r+0x40>
 800c196:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c19a:	e00e      	b.n	800c1ba <__swhatbuf_r+0x42>
 800c19c:	466a      	mov	r2, sp
 800c19e:	f001 f8d9 	bl	800d354 <_fstat_r>
 800c1a2:	2800      	cmp	r0, #0
 800c1a4:	dbf1      	blt.n	800c18a <__swhatbuf_r+0x12>
 800c1a6:	9a01      	ldr	r2, [sp, #4]
 800c1a8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c1ac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c1b0:	425a      	negs	r2, r3
 800c1b2:	415a      	adcs	r2, r3
 800c1b4:	602a      	str	r2, [r5, #0]
 800c1b6:	e7ee      	b.n	800c196 <__swhatbuf_r+0x1e>
 800c1b8:	2340      	movs	r3, #64	; 0x40
 800c1ba:	2000      	movs	r0, #0
 800c1bc:	6023      	str	r3, [r4, #0]
 800c1be:	b016      	add	sp, #88	; 0x58
 800c1c0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c1c4 <__smakebuf_r>:
 800c1c4:	898b      	ldrh	r3, [r1, #12]
 800c1c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c1c8:	079d      	lsls	r5, r3, #30
 800c1ca:	4606      	mov	r6, r0
 800c1cc:	460c      	mov	r4, r1
 800c1ce:	d507      	bpl.n	800c1e0 <__smakebuf_r+0x1c>
 800c1d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c1d4:	6023      	str	r3, [r4, #0]
 800c1d6:	6123      	str	r3, [r4, #16]
 800c1d8:	2301      	movs	r3, #1
 800c1da:	6163      	str	r3, [r4, #20]
 800c1dc:	b002      	add	sp, #8
 800c1de:	bd70      	pop	{r4, r5, r6, pc}
 800c1e0:	ab01      	add	r3, sp, #4
 800c1e2:	466a      	mov	r2, sp
 800c1e4:	f7ff ffc8 	bl	800c178 <__swhatbuf_r>
 800c1e8:	9900      	ldr	r1, [sp, #0]
 800c1ea:	4605      	mov	r5, r0
 800c1ec:	4630      	mov	r0, r6
 800c1ee:	f7fe fa9b 	bl	800a728 <_malloc_r>
 800c1f2:	b948      	cbnz	r0, 800c208 <__smakebuf_r+0x44>
 800c1f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1f8:	059a      	lsls	r2, r3, #22
 800c1fa:	d4ef      	bmi.n	800c1dc <__smakebuf_r+0x18>
 800c1fc:	f023 0303 	bic.w	r3, r3, #3
 800c200:	f043 0302 	orr.w	r3, r3, #2
 800c204:	81a3      	strh	r3, [r4, #12]
 800c206:	e7e3      	b.n	800c1d0 <__smakebuf_r+0xc>
 800c208:	4b0d      	ldr	r3, [pc, #52]	; (800c240 <__smakebuf_r+0x7c>)
 800c20a:	62b3      	str	r3, [r6, #40]	; 0x28
 800c20c:	89a3      	ldrh	r3, [r4, #12]
 800c20e:	6020      	str	r0, [r4, #0]
 800c210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c214:	81a3      	strh	r3, [r4, #12]
 800c216:	9b00      	ldr	r3, [sp, #0]
 800c218:	6163      	str	r3, [r4, #20]
 800c21a:	9b01      	ldr	r3, [sp, #4]
 800c21c:	6120      	str	r0, [r4, #16]
 800c21e:	b15b      	cbz	r3, 800c238 <__smakebuf_r+0x74>
 800c220:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c224:	4630      	mov	r0, r6
 800c226:	f001 f8a7 	bl	800d378 <_isatty_r>
 800c22a:	b128      	cbz	r0, 800c238 <__smakebuf_r+0x74>
 800c22c:	89a3      	ldrh	r3, [r4, #12]
 800c22e:	f023 0303 	bic.w	r3, r3, #3
 800c232:	f043 0301 	orr.w	r3, r3, #1
 800c236:	81a3      	strh	r3, [r4, #12]
 800c238:	89a0      	ldrh	r0, [r4, #12]
 800c23a:	4305      	orrs	r5, r0
 800c23c:	81a5      	strh	r5, [r4, #12]
 800c23e:	e7cd      	b.n	800c1dc <__smakebuf_r+0x18>
 800c240:	0800a4c9 	.word	0x0800a4c9

0800c244 <__ascii_mbtowc>:
 800c244:	b082      	sub	sp, #8
 800c246:	b901      	cbnz	r1, 800c24a <__ascii_mbtowc+0x6>
 800c248:	a901      	add	r1, sp, #4
 800c24a:	b142      	cbz	r2, 800c25e <__ascii_mbtowc+0x1a>
 800c24c:	b14b      	cbz	r3, 800c262 <__ascii_mbtowc+0x1e>
 800c24e:	7813      	ldrb	r3, [r2, #0]
 800c250:	600b      	str	r3, [r1, #0]
 800c252:	7812      	ldrb	r2, [r2, #0]
 800c254:	1e10      	subs	r0, r2, #0
 800c256:	bf18      	it	ne
 800c258:	2001      	movne	r0, #1
 800c25a:	b002      	add	sp, #8
 800c25c:	4770      	bx	lr
 800c25e:	4610      	mov	r0, r2
 800c260:	e7fb      	b.n	800c25a <__ascii_mbtowc+0x16>
 800c262:	f06f 0001 	mvn.w	r0, #1
 800c266:	e7f8      	b.n	800c25a <__ascii_mbtowc+0x16>

0800c268 <__malloc_lock>:
 800c268:	4801      	ldr	r0, [pc, #4]	; (800c270 <__malloc_lock+0x8>)
 800c26a:	f7fe ba24 	b.w	800a6b6 <__retarget_lock_acquire_recursive>
 800c26e:	bf00      	nop
 800c270:	200048f8 	.word	0x200048f8

0800c274 <__malloc_unlock>:
 800c274:	4801      	ldr	r0, [pc, #4]	; (800c27c <__malloc_unlock+0x8>)
 800c276:	f7fe ba1f 	b.w	800a6b8 <__retarget_lock_release_recursive>
 800c27a:	bf00      	nop
 800c27c:	200048f8 	.word	0x200048f8

0800c280 <_Balloc>:
 800c280:	b570      	push	{r4, r5, r6, lr}
 800c282:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c284:	4604      	mov	r4, r0
 800c286:	460d      	mov	r5, r1
 800c288:	b976      	cbnz	r6, 800c2a8 <_Balloc+0x28>
 800c28a:	2010      	movs	r0, #16
 800c28c:	f001 f884 	bl	800d398 <malloc>
 800c290:	4602      	mov	r2, r0
 800c292:	6260      	str	r0, [r4, #36]	; 0x24
 800c294:	b920      	cbnz	r0, 800c2a0 <_Balloc+0x20>
 800c296:	4b18      	ldr	r3, [pc, #96]	; (800c2f8 <_Balloc+0x78>)
 800c298:	4818      	ldr	r0, [pc, #96]	; (800c2fc <_Balloc+0x7c>)
 800c29a:	2166      	movs	r1, #102	; 0x66
 800c29c:	f001 f82a 	bl	800d2f4 <__assert_func>
 800c2a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c2a4:	6006      	str	r6, [r0, #0]
 800c2a6:	60c6      	str	r6, [r0, #12]
 800c2a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c2aa:	68f3      	ldr	r3, [r6, #12]
 800c2ac:	b183      	cbz	r3, 800c2d0 <_Balloc+0x50>
 800c2ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2b0:	68db      	ldr	r3, [r3, #12]
 800c2b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c2b6:	b9b8      	cbnz	r0, 800c2e8 <_Balloc+0x68>
 800c2b8:	2101      	movs	r1, #1
 800c2ba:	fa01 f605 	lsl.w	r6, r1, r5
 800c2be:	1d72      	adds	r2, r6, #5
 800c2c0:	0092      	lsls	r2, r2, #2
 800c2c2:	4620      	mov	r0, r4
 800c2c4:	f000 fc9d 	bl	800cc02 <_calloc_r>
 800c2c8:	b160      	cbz	r0, 800c2e4 <_Balloc+0x64>
 800c2ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c2ce:	e00e      	b.n	800c2ee <_Balloc+0x6e>
 800c2d0:	2221      	movs	r2, #33	; 0x21
 800c2d2:	2104      	movs	r1, #4
 800c2d4:	4620      	mov	r0, r4
 800c2d6:	f000 fc94 	bl	800cc02 <_calloc_r>
 800c2da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c2dc:	60f0      	str	r0, [r6, #12]
 800c2de:	68db      	ldr	r3, [r3, #12]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d1e4      	bne.n	800c2ae <_Balloc+0x2e>
 800c2e4:	2000      	movs	r0, #0
 800c2e6:	bd70      	pop	{r4, r5, r6, pc}
 800c2e8:	6802      	ldr	r2, [r0, #0]
 800c2ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c2f4:	e7f7      	b.n	800c2e6 <_Balloc+0x66>
 800c2f6:	bf00      	nop
 800c2f8:	0800de44 	.word	0x0800de44
 800c2fc:	0800de5b 	.word	0x0800de5b

0800c300 <_Bfree>:
 800c300:	b570      	push	{r4, r5, r6, lr}
 800c302:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c304:	4605      	mov	r5, r0
 800c306:	460c      	mov	r4, r1
 800c308:	b976      	cbnz	r6, 800c328 <_Bfree+0x28>
 800c30a:	2010      	movs	r0, #16
 800c30c:	f001 f844 	bl	800d398 <malloc>
 800c310:	4602      	mov	r2, r0
 800c312:	6268      	str	r0, [r5, #36]	; 0x24
 800c314:	b920      	cbnz	r0, 800c320 <_Bfree+0x20>
 800c316:	4b09      	ldr	r3, [pc, #36]	; (800c33c <_Bfree+0x3c>)
 800c318:	4809      	ldr	r0, [pc, #36]	; (800c340 <_Bfree+0x40>)
 800c31a:	218a      	movs	r1, #138	; 0x8a
 800c31c:	f000 ffea 	bl	800d2f4 <__assert_func>
 800c320:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c324:	6006      	str	r6, [r0, #0]
 800c326:	60c6      	str	r6, [r0, #12]
 800c328:	b13c      	cbz	r4, 800c33a <_Bfree+0x3a>
 800c32a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c32c:	6862      	ldr	r2, [r4, #4]
 800c32e:	68db      	ldr	r3, [r3, #12]
 800c330:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c334:	6021      	str	r1, [r4, #0]
 800c336:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c33a:	bd70      	pop	{r4, r5, r6, pc}
 800c33c:	0800de44 	.word	0x0800de44
 800c340:	0800de5b 	.word	0x0800de5b

0800c344 <__multadd>:
 800c344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c348:	690d      	ldr	r5, [r1, #16]
 800c34a:	4607      	mov	r7, r0
 800c34c:	460c      	mov	r4, r1
 800c34e:	461e      	mov	r6, r3
 800c350:	f101 0c14 	add.w	ip, r1, #20
 800c354:	2000      	movs	r0, #0
 800c356:	f8dc 3000 	ldr.w	r3, [ip]
 800c35a:	b299      	uxth	r1, r3
 800c35c:	fb02 6101 	mla	r1, r2, r1, r6
 800c360:	0c1e      	lsrs	r6, r3, #16
 800c362:	0c0b      	lsrs	r3, r1, #16
 800c364:	fb02 3306 	mla	r3, r2, r6, r3
 800c368:	b289      	uxth	r1, r1
 800c36a:	3001      	adds	r0, #1
 800c36c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c370:	4285      	cmp	r5, r0
 800c372:	f84c 1b04 	str.w	r1, [ip], #4
 800c376:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c37a:	dcec      	bgt.n	800c356 <__multadd+0x12>
 800c37c:	b30e      	cbz	r6, 800c3c2 <__multadd+0x7e>
 800c37e:	68a3      	ldr	r3, [r4, #8]
 800c380:	42ab      	cmp	r3, r5
 800c382:	dc19      	bgt.n	800c3b8 <__multadd+0x74>
 800c384:	6861      	ldr	r1, [r4, #4]
 800c386:	4638      	mov	r0, r7
 800c388:	3101      	adds	r1, #1
 800c38a:	f7ff ff79 	bl	800c280 <_Balloc>
 800c38e:	4680      	mov	r8, r0
 800c390:	b928      	cbnz	r0, 800c39e <__multadd+0x5a>
 800c392:	4602      	mov	r2, r0
 800c394:	4b0c      	ldr	r3, [pc, #48]	; (800c3c8 <__multadd+0x84>)
 800c396:	480d      	ldr	r0, [pc, #52]	; (800c3cc <__multadd+0x88>)
 800c398:	21b5      	movs	r1, #181	; 0xb5
 800c39a:	f000 ffab 	bl	800d2f4 <__assert_func>
 800c39e:	6922      	ldr	r2, [r4, #16]
 800c3a0:	3202      	adds	r2, #2
 800c3a2:	f104 010c 	add.w	r1, r4, #12
 800c3a6:	0092      	lsls	r2, r2, #2
 800c3a8:	300c      	adds	r0, #12
 800c3aa:	f7fe f986 	bl	800a6ba <memcpy>
 800c3ae:	4621      	mov	r1, r4
 800c3b0:	4638      	mov	r0, r7
 800c3b2:	f7ff ffa5 	bl	800c300 <_Bfree>
 800c3b6:	4644      	mov	r4, r8
 800c3b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c3bc:	3501      	adds	r5, #1
 800c3be:	615e      	str	r6, [r3, #20]
 800c3c0:	6125      	str	r5, [r4, #16]
 800c3c2:	4620      	mov	r0, r4
 800c3c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3c8:	0800ddb8 	.word	0x0800ddb8
 800c3cc:	0800de5b 	.word	0x0800de5b

0800c3d0 <__s2b>:
 800c3d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3d4:	460c      	mov	r4, r1
 800c3d6:	4615      	mov	r5, r2
 800c3d8:	461f      	mov	r7, r3
 800c3da:	2209      	movs	r2, #9
 800c3dc:	3308      	adds	r3, #8
 800c3de:	4606      	mov	r6, r0
 800c3e0:	fb93 f3f2 	sdiv	r3, r3, r2
 800c3e4:	2100      	movs	r1, #0
 800c3e6:	2201      	movs	r2, #1
 800c3e8:	429a      	cmp	r2, r3
 800c3ea:	db09      	blt.n	800c400 <__s2b+0x30>
 800c3ec:	4630      	mov	r0, r6
 800c3ee:	f7ff ff47 	bl	800c280 <_Balloc>
 800c3f2:	b940      	cbnz	r0, 800c406 <__s2b+0x36>
 800c3f4:	4602      	mov	r2, r0
 800c3f6:	4b19      	ldr	r3, [pc, #100]	; (800c45c <__s2b+0x8c>)
 800c3f8:	4819      	ldr	r0, [pc, #100]	; (800c460 <__s2b+0x90>)
 800c3fa:	21ce      	movs	r1, #206	; 0xce
 800c3fc:	f000 ff7a 	bl	800d2f4 <__assert_func>
 800c400:	0052      	lsls	r2, r2, #1
 800c402:	3101      	adds	r1, #1
 800c404:	e7f0      	b.n	800c3e8 <__s2b+0x18>
 800c406:	9b08      	ldr	r3, [sp, #32]
 800c408:	6143      	str	r3, [r0, #20]
 800c40a:	2d09      	cmp	r5, #9
 800c40c:	f04f 0301 	mov.w	r3, #1
 800c410:	6103      	str	r3, [r0, #16]
 800c412:	dd16      	ble.n	800c442 <__s2b+0x72>
 800c414:	f104 0909 	add.w	r9, r4, #9
 800c418:	46c8      	mov	r8, r9
 800c41a:	442c      	add	r4, r5
 800c41c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c420:	4601      	mov	r1, r0
 800c422:	3b30      	subs	r3, #48	; 0x30
 800c424:	220a      	movs	r2, #10
 800c426:	4630      	mov	r0, r6
 800c428:	f7ff ff8c 	bl	800c344 <__multadd>
 800c42c:	45a0      	cmp	r8, r4
 800c42e:	d1f5      	bne.n	800c41c <__s2b+0x4c>
 800c430:	f1a5 0408 	sub.w	r4, r5, #8
 800c434:	444c      	add	r4, r9
 800c436:	1b2d      	subs	r5, r5, r4
 800c438:	1963      	adds	r3, r4, r5
 800c43a:	42bb      	cmp	r3, r7
 800c43c:	db04      	blt.n	800c448 <__s2b+0x78>
 800c43e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c442:	340a      	adds	r4, #10
 800c444:	2509      	movs	r5, #9
 800c446:	e7f6      	b.n	800c436 <__s2b+0x66>
 800c448:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c44c:	4601      	mov	r1, r0
 800c44e:	3b30      	subs	r3, #48	; 0x30
 800c450:	220a      	movs	r2, #10
 800c452:	4630      	mov	r0, r6
 800c454:	f7ff ff76 	bl	800c344 <__multadd>
 800c458:	e7ee      	b.n	800c438 <__s2b+0x68>
 800c45a:	bf00      	nop
 800c45c:	0800ddb8 	.word	0x0800ddb8
 800c460:	0800de5b 	.word	0x0800de5b

0800c464 <__hi0bits>:
 800c464:	0c03      	lsrs	r3, r0, #16
 800c466:	041b      	lsls	r3, r3, #16
 800c468:	b9d3      	cbnz	r3, 800c4a0 <__hi0bits+0x3c>
 800c46a:	0400      	lsls	r0, r0, #16
 800c46c:	2310      	movs	r3, #16
 800c46e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c472:	bf04      	itt	eq
 800c474:	0200      	lsleq	r0, r0, #8
 800c476:	3308      	addeq	r3, #8
 800c478:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c47c:	bf04      	itt	eq
 800c47e:	0100      	lsleq	r0, r0, #4
 800c480:	3304      	addeq	r3, #4
 800c482:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c486:	bf04      	itt	eq
 800c488:	0080      	lsleq	r0, r0, #2
 800c48a:	3302      	addeq	r3, #2
 800c48c:	2800      	cmp	r0, #0
 800c48e:	db05      	blt.n	800c49c <__hi0bits+0x38>
 800c490:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c494:	f103 0301 	add.w	r3, r3, #1
 800c498:	bf08      	it	eq
 800c49a:	2320      	moveq	r3, #32
 800c49c:	4618      	mov	r0, r3
 800c49e:	4770      	bx	lr
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	e7e4      	b.n	800c46e <__hi0bits+0xa>

0800c4a4 <__lo0bits>:
 800c4a4:	6803      	ldr	r3, [r0, #0]
 800c4a6:	f013 0207 	ands.w	r2, r3, #7
 800c4aa:	4601      	mov	r1, r0
 800c4ac:	d00b      	beq.n	800c4c6 <__lo0bits+0x22>
 800c4ae:	07da      	lsls	r2, r3, #31
 800c4b0:	d423      	bmi.n	800c4fa <__lo0bits+0x56>
 800c4b2:	0798      	lsls	r0, r3, #30
 800c4b4:	bf49      	itett	mi
 800c4b6:	085b      	lsrmi	r3, r3, #1
 800c4b8:	089b      	lsrpl	r3, r3, #2
 800c4ba:	2001      	movmi	r0, #1
 800c4bc:	600b      	strmi	r3, [r1, #0]
 800c4be:	bf5c      	itt	pl
 800c4c0:	600b      	strpl	r3, [r1, #0]
 800c4c2:	2002      	movpl	r0, #2
 800c4c4:	4770      	bx	lr
 800c4c6:	b298      	uxth	r0, r3
 800c4c8:	b9a8      	cbnz	r0, 800c4f6 <__lo0bits+0x52>
 800c4ca:	0c1b      	lsrs	r3, r3, #16
 800c4cc:	2010      	movs	r0, #16
 800c4ce:	b2da      	uxtb	r2, r3
 800c4d0:	b90a      	cbnz	r2, 800c4d6 <__lo0bits+0x32>
 800c4d2:	3008      	adds	r0, #8
 800c4d4:	0a1b      	lsrs	r3, r3, #8
 800c4d6:	071a      	lsls	r2, r3, #28
 800c4d8:	bf04      	itt	eq
 800c4da:	091b      	lsreq	r3, r3, #4
 800c4dc:	3004      	addeq	r0, #4
 800c4de:	079a      	lsls	r2, r3, #30
 800c4e0:	bf04      	itt	eq
 800c4e2:	089b      	lsreq	r3, r3, #2
 800c4e4:	3002      	addeq	r0, #2
 800c4e6:	07da      	lsls	r2, r3, #31
 800c4e8:	d403      	bmi.n	800c4f2 <__lo0bits+0x4e>
 800c4ea:	085b      	lsrs	r3, r3, #1
 800c4ec:	f100 0001 	add.w	r0, r0, #1
 800c4f0:	d005      	beq.n	800c4fe <__lo0bits+0x5a>
 800c4f2:	600b      	str	r3, [r1, #0]
 800c4f4:	4770      	bx	lr
 800c4f6:	4610      	mov	r0, r2
 800c4f8:	e7e9      	b.n	800c4ce <__lo0bits+0x2a>
 800c4fa:	2000      	movs	r0, #0
 800c4fc:	4770      	bx	lr
 800c4fe:	2020      	movs	r0, #32
 800c500:	4770      	bx	lr
	...

0800c504 <__i2b>:
 800c504:	b510      	push	{r4, lr}
 800c506:	460c      	mov	r4, r1
 800c508:	2101      	movs	r1, #1
 800c50a:	f7ff feb9 	bl	800c280 <_Balloc>
 800c50e:	4602      	mov	r2, r0
 800c510:	b928      	cbnz	r0, 800c51e <__i2b+0x1a>
 800c512:	4b05      	ldr	r3, [pc, #20]	; (800c528 <__i2b+0x24>)
 800c514:	4805      	ldr	r0, [pc, #20]	; (800c52c <__i2b+0x28>)
 800c516:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c51a:	f000 feeb 	bl	800d2f4 <__assert_func>
 800c51e:	2301      	movs	r3, #1
 800c520:	6144      	str	r4, [r0, #20]
 800c522:	6103      	str	r3, [r0, #16]
 800c524:	bd10      	pop	{r4, pc}
 800c526:	bf00      	nop
 800c528:	0800ddb8 	.word	0x0800ddb8
 800c52c:	0800de5b 	.word	0x0800de5b

0800c530 <__multiply>:
 800c530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c534:	4691      	mov	r9, r2
 800c536:	690a      	ldr	r2, [r1, #16]
 800c538:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c53c:	429a      	cmp	r2, r3
 800c53e:	bfb8      	it	lt
 800c540:	460b      	movlt	r3, r1
 800c542:	460c      	mov	r4, r1
 800c544:	bfbc      	itt	lt
 800c546:	464c      	movlt	r4, r9
 800c548:	4699      	movlt	r9, r3
 800c54a:	6927      	ldr	r7, [r4, #16]
 800c54c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c550:	68a3      	ldr	r3, [r4, #8]
 800c552:	6861      	ldr	r1, [r4, #4]
 800c554:	eb07 060a 	add.w	r6, r7, sl
 800c558:	42b3      	cmp	r3, r6
 800c55a:	b085      	sub	sp, #20
 800c55c:	bfb8      	it	lt
 800c55e:	3101      	addlt	r1, #1
 800c560:	f7ff fe8e 	bl	800c280 <_Balloc>
 800c564:	b930      	cbnz	r0, 800c574 <__multiply+0x44>
 800c566:	4602      	mov	r2, r0
 800c568:	4b44      	ldr	r3, [pc, #272]	; (800c67c <__multiply+0x14c>)
 800c56a:	4845      	ldr	r0, [pc, #276]	; (800c680 <__multiply+0x150>)
 800c56c:	f240 115d 	movw	r1, #349	; 0x15d
 800c570:	f000 fec0 	bl	800d2f4 <__assert_func>
 800c574:	f100 0514 	add.w	r5, r0, #20
 800c578:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c57c:	462b      	mov	r3, r5
 800c57e:	2200      	movs	r2, #0
 800c580:	4543      	cmp	r3, r8
 800c582:	d321      	bcc.n	800c5c8 <__multiply+0x98>
 800c584:	f104 0314 	add.w	r3, r4, #20
 800c588:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c58c:	f109 0314 	add.w	r3, r9, #20
 800c590:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c594:	9202      	str	r2, [sp, #8]
 800c596:	1b3a      	subs	r2, r7, r4
 800c598:	3a15      	subs	r2, #21
 800c59a:	f022 0203 	bic.w	r2, r2, #3
 800c59e:	3204      	adds	r2, #4
 800c5a0:	f104 0115 	add.w	r1, r4, #21
 800c5a4:	428f      	cmp	r7, r1
 800c5a6:	bf38      	it	cc
 800c5a8:	2204      	movcc	r2, #4
 800c5aa:	9201      	str	r2, [sp, #4]
 800c5ac:	9a02      	ldr	r2, [sp, #8]
 800c5ae:	9303      	str	r3, [sp, #12]
 800c5b0:	429a      	cmp	r2, r3
 800c5b2:	d80c      	bhi.n	800c5ce <__multiply+0x9e>
 800c5b4:	2e00      	cmp	r6, #0
 800c5b6:	dd03      	ble.n	800c5c0 <__multiply+0x90>
 800c5b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d05a      	beq.n	800c676 <__multiply+0x146>
 800c5c0:	6106      	str	r6, [r0, #16]
 800c5c2:	b005      	add	sp, #20
 800c5c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5c8:	f843 2b04 	str.w	r2, [r3], #4
 800c5cc:	e7d8      	b.n	800c580 <__multiply+0x50>
 800c5ce:	f8b3 a000 	ldrh.w	sl, [r3]
 800c5d2:	f1ba 0f00 	cmp.w	sl, #0
 800c5d6:	d024      	beq.n	800c622 <__multiply+0xf2>
 800c5d8:	f104 0e14 	add.w	lr, r4, #20
 800c5dc:	46a9      	mov	r9, r5
 800c5de:	f04f 0c00 	mov.w	ip, #0
 800c5e2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c5e6:	f8d9 1000 	ldr.w	r1, [r9]
 800c5ea:	fa1f fb82 	uxth.w	fp, r2
 800c5ee:	b289      	uxth	r1, r1
 800c5f0:	fb0a 110b 	mla	r1, sl, fp, r1
 800c5f4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c5f8:	f8d9 2000 	ldr.w	r2, [r9]
 800c5fc:	4461      	add	r1, ip
 800c5fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c602:	fb0a c20b 	mla	r2, sl, fp, ip
 800c606:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c60a:	b289      	uxth	r1, r1
 800c60c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c610:	4577      	cmp	r7, lr
 800c612:	f849 1b04 	str.w	r1, [r9], #4
 800c616:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c61a:	d8e2      	bhi.n	800c5e2 <__multiply+0xb2>
 800c61c:	9a01      	ldr	r2, [sp, #4]
 800c61e:	f845 c002 	str.w	ip, [r5, r2]
 800c622:	9a03      	ldr	r2, [sp, #12]
 800c624:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c628:	3304      	adds	r3, #4
 800c62a:	f1b9 0f00 	cmp.w	r9, #0
 800c62e:	d020      	beq.n	800c672 <__multiply+0x142>
 800c630:	6829      	ldr	r1, [r5, #0]
 800c632:	f104 0c14 	add.w	ip, r4, #20
 800c636:	46ae      	mov	lr, r5
 800c638:	f04f 0a00 	mov.w	sl, #0
 800c63c:	f8bc b000 	ldrh.w	fp, [ip]
 800c640:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c644:	fb09 220b 	mla	r2, r9, fp, r2
 800c648:	4492      	add	sl, r2
 800c64a:	b289      	uxth	r1, r1
 800c64c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c650:	f84e 1b04 	str.w	r1, [lr], #4
 800c654:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c658:	f8be 1000 	ldrh.w	r1, [lr]
 800c65c:	0c12      	lsrs	r2, r2, #16
 800c65e:	fb09 1102 	mla	r1, r9, r2, r1
 800c662:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c666:	4567      	cmp	r7, ip
 800c668:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c66c:	d8e6      	bhi.n	800c63c <__multiply+0x10c>
 800c66e:	9a01      	ldr	r2, [sp, #4]
 800c670:	50a9      	str	r1, [r5, r2]
 800c672:	3504      	adds	r5, #4
 800c674:	e79a      	b.n	800c5ac <__multiply+0x7c>
 800c676:	3e01      	subs	r6, #1
 800c678:	e79c      	b.n	800c5b4 <__multiply+0x84>
 800c67a:	bf00      	nop
 800c67c:	0800ddb8 	.word	0x0800ddb8
 800c680:	0800de5b 	.word	0x0800de5b

0800c684 <__pow5mult>:
 800c684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c688:	4615      	mov	r5, r2
 800c68a:	f012 0203 	ands.w	r2, r2, #3
 800c68e:	4606      	mov	r6, r0
 800c690:	460f      	mov	r7, r1
 800c692:	d007      	beq.n	800c6a4 <__pow5mult+0x20>
 800c694:	4c25      	ldr	r4, [pc, #148]	; (800c72c <__pow5mult+0xa8>)
 800c696:	3a01      	subs	r2, #1
 800c698:	2300      	movs	r3, #0
 800c69a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c69e:	f7ff fe51 	bl	800c344 <__multadd>
 800c6a2:	4607      	mov	r7, r0
 800c6a4:	10ad      	asrs	r5, r5, #2
 800c6a6:	d03d      	beq.n	800c724 <__pow5mult+0xa0>
 800c6a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c6aa:	b97c      	cbnz	r4, 800c6cc <__pow5mult+0x48>
 800c6ac:	2010      	movs	r0, #16
 800c6ae:	f000 fe73 	bl	800d398 <malloc>
 800c6b2:	4602      	mov	r2, r0
 800c6b4:	6270      	str	r0, [r6, #36]	; 0x24
 800c6b6:	b928      	cbnz	r0, 800c6c4 <__pow5mult+0x40>
 800c6b8:	4b1d      	ldr	r3, [pc, #116]	; (800c730 <__pow5mult+0xac>)
 800c6ba:	481e      	ldr	r0, [pc, #120]	; (800c734 <__pow5mult+0xb0>)
 800c6bc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c6c0:	f000 fe18 	bl	800d2f4 <__assert_func>
 800c6c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c6c8:	6004      	str	r4, [r0, #0]
 800c6ca:	60c4      	str	r4, [r0, #12]
 800c6cc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c6d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c6d4:	b94c      	cbnz	r4, 800c6ea <__pow5mult+0x66>
 800c6d6:	f240 2171 	movw	r1, #625	; 0x271
 800c6da:	4630      	mov	r0, r6
 800c6dc:	f7ff ff12 	bl	800c504 <__i2b>
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	f8c8 0008 	str.w	r0, [r8, #8]
 800c6e6:	4604      	mov	r4, r0
 800c6e8:	6003      	str	r3, [r0, #0]
 800c6ea:	f04f 0900 	mov.w	r9, #0
 800c6ee:	07eb      	lsls	r3, r5, #31
 800c6f0:	d50a      	bpl.n	800c708 <__pow5mult+0x84>
 800c6f2:	4639      	mov	r1, r7
 800c6f4:	4622      	mov	r2, r4
 800c6f6:	4630      	mov	r0, r6
 800c6f8:	f7ff ff1a 	bl	800c530 <__multiply>
 800c6fc:	4639      	mov	r1, r7
 800c6fe:	4680      	mov	r8, r0
 800c700:	4630      	mov	r0, r6
 800c702:	f7ff fdfd 	bl	800c300 <_Bfree>
 800c706:	4647      	mov	r7, r8
 800c708:	106d      	asrs	r5, r5, #1
 800c70a:	d00b      	beq.n	800c724 <__pow5mult+0xa0>
 800c70c:	6820      	ldr	r0, [r4, #0]
 800c70e:	b938      	cbnz	r0, 800c720 <__pow5mult+0x9c>
 800c710:	4622      	mov	r2, r4
 800c712:	4621      	mov	r1, r4
 800c714:	4630      	mov	r0, r6
 800c716:	f7ff ff0b 	bl	800c530 <__multiply>
 800c71a:	6020      	str	r0, [r4, #0]
 800c71c:	f8c0 9000 	str.w	r9, [r0]
 800c720:	4604      	mov	r4, r0
 800c722:	e7e4      	b.n	800c6ee <__pow5mult+0x6a>
 800c724:	4638      	mov	r0, r7
 800c726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c72a:	bf00      	nop
 800c72c:	0800dfa8 	.word	0x0800dfa8
 800c730:	0800de44 	.word	0x0800de44
 800c734:	0800de5b 	.word	0x0800de5b

0800c738 <__lshift>:
 800c738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c73c:	460c      	mov	r4, r1
 800c73e:	6849      	ldr	r1, [r1, #4]
 800c740:	6923      	ldr	r3, [r4, #16]
 800c742:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c746:	68a3      	ldr	r3, [r4, #8]
 800c748:	4607      	mov	r7, r0
 800c74a:	4691      	mov	r9, r2
 800c74c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c750:	f108 0601 	add.w	r6, r8, #1
 800c754:	42b3      	cmp	r3, r6
 800c756:	db0b      	blt.n	800c770 <__lshift+0x38>
 800c758:	4638      	mov	r0, r7
 800c75a:	f7ff fd91 	bl	800c280 <_Balloc>
 800c75e:	4605      	mov	r5, r0
 800c760:	b948      	cbnz	r0, 800c776 <__lshift+0x3e>
 800c762:	4602      	mov	r2, r0
 800c764:	4b2a      	ldr	r3, [pc, #168]	; (800c810 <__lshift+0xd8>)
 800c766:	482b      	ldr	r0, [pc, #172]	; (800c814 <__lshift+0xdc>)
 800c768:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c76c:	f000 fdc2 	bl	800d2f4 <__assert_func>
 800c770:	3101      	adds	r1, #1
 800c772:	005b      	lsls	r3, r3, #1
 800c774:	e7ee      	b.n	800c754 <__lshift+0x1c>
 800c776:	2300      	movs	r3, #0
 800c778:	f100 0114 	add.w	r1, r0, #20
 800c77c:	f100 0210 	add.w	r2, r0, #16
 800c780:	4618      	mov	r0, r3
 800c782:	4553      	cmp	r3, sl
 800c784:	db37      	blt.n	800c7f6 <__lshift+0xbe>
 800c786:	6920      	ldr	r0, [r4, #16]
 800c788:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c78c:	f104 0314 	add.w	r3, r4, #20
 800c790:	f019 091f 	ands.w	r9, r9, #31
 800c794:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c798:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c79c:	d02f      	beq.n	800c7fe <__lshift+0xc6>
 800c79e:	f1c9 0e20 	rsb	lr, r9, #32
 800c7a2:	468a      	mov	sl, r1
 800c7a4:	f04f 0c00 	mov.w	ip, #0
 800c7a8:	681a      	ldr	r2, [r3, #0]
 800c7aa:	fa02 f209 	lsl.w	r2, r2, r9
 800c7ae:	ea42 020c 	orr.w	r2, r2, ip
 800c7b2:	f84a 2b04 	str.w	r2, [sl], #4
 800c7b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7ba:	4298      	cmp	r0, r3
 800c7bc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c7c0:	d8f2      	bhi.n	800c7a8 <__lshift+0x70>
 800c7c2:	1b03      	subs	r3, r0, r4
 800c7c4:	3b15      	subs	r3, #21
 800c7c6:	f023 0303 	bic.w	r3, r3, #3
 800c7ca:	3304      	adds	r3, #4
 800c7cc:	f104 0215 	add.w	r2, r4, #21
 800c7d0:	4290      	cmp	r0, r2
 800c7d2:	bf38      	it	cc
 800c7d4:	2304      	movcc	r3, #4
 800c7d6:	f841 c003 	str.w	ip, [r1, r3]
 800c7da:	f1bc 0f00 	cmp.w	ip, #0
 800c7de:	d001      	beq.n	800c7e4 <__lshift+0xac>
 800c7e0:	f108 0602 	add.w	r6, r8, #2
 800c7e4:	3e01      	subs	r6, #1
 800c7e6:	4638      	mov	r0, r7
 800c7e8:	612e      	str	r6, [r5, #16]
 800c7ea:	4621      	mov	r1, r4
 800c7ec:	f7ff fd88 	bl	800c300 <_Bfree>
 800c7f0:	4628      	mov	r0, r5
 800c7f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7f6:	f842 0f04 	str.w	r0, [r2, #4]!
 800c7fa:	3301      	adds	r3, #1
 800c7fc:	e7c1      	b.n	800c782 <__lshift+0x4a>
 800c7fe:	3904      	subs	r1, #4
 800c800:	f853 2b04 	ldr.w	r2, [r3], #4
 800c804:	f841 2f04 	str.w	r2, [r1, #4]!
 800c808:	4298      	cmp	r0, r3
 800c80a:	d8f9      	bhi.n	800c800 <__lshift+0xc8>
 800c80c:	e7ea      	b.n	800c7e4 <__lshift+0xac>
 800c80e:	bf00      	nop
 800c810:	0800ddb8 	.word	0x0800ddb8
 800c814:	0800de5b 	.word	0x0800de5b

0800c818 <__mcmp>:
 800c818:	b530      	push	{r4, r5, lr}
 800c81a:	6902      	ldr	r2, [r0, #16]
 800c81c:	690c      	ldr	r4, [r1, #16]
 800c81e:	1b12      	subs	r2, r2, r4
 800c820:	d10e      	bne.n	800c840 <__mcmp+0x28>
 800c822:	f100 0314 	add.w	r3, r0, #20
 800c826:	3114      	adds	r1, #20
 800c828:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c82c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c830:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c834:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c838:	42a5      	cmp	r5, r4
 800c83a:	d003      	beq.n	800c844 <__mcmp+0x2c>
 800c83c:	d305      	bcc.n	800c84a <__mcmp+0x32>
 800c83e:	2201      	movs	r2, #1
 800c840:	4610      	mov	r0, r2
 800c842:	bd30      	pop	{r4, r5, pc}
 800c844:	4283      	cmp	r3, r0
 800c846:	d3f3      	bcc.n	800c830 <__mcmp+0x18>
 800c848:	e7fa      	b.n	800c840 <__mcmp+0x28>
 800c84a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c84e:	e7f7      	b.n	800c840 <__mcmp+0x28>

0800c850 <__mdiff>:
 800c850:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c854:	460c      	mov	r4, r1
 800c856:	4606      	mov	r6, r0
 800c858:	4611      	mov	r1, r2
 800c85a:	4620      	mov	r0, r4
 800c85c:	4690      	mov	r8, r2
 800c85e:	f7ff ffdb 	bl	800c818 <__mcmp>
 800c862:	1e05      	subs	r5, r0, #0
 800c864:	d110      	bne.n	800c888 <__mdiff+0x38>
 800c866:	4629      	mov	r1, r5
 800c868:	4630      	mov	r0, r6
 800c86a:	f7ff fd09 	bl	800c280 <_Balloc>
 800c86e:	b930      	cbnz	r0, 800c87e <__mdiff+0x2e>
 800c870:	4b3a      	ldr	r3, [pc, #232]	; (800c95c <__mdiff+0x10c>)
 800c872:	4602      	mov	r2, r0
 800c874:	f240 2132 	movw	r1, #562	; 0x232
 800c878:	4839      	ldr	r0, [pc, #228]	; (800c960 <__mdiff+0x110>)
 800c87a:	f000 fd3b 	bl	800d2f4 <__assert_func>
 800c87e:	2301      	movs	r3, #1
 800c880:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c884:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c888:	bfa4      	itt	ge
 800c88a:	4643      	movge	r3, r8
 800c88c:	46a0      	movge	r8, r4
 800c88e:	4630      	mov	r0, r6
 800c890:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c894:	bfa6      	itte	ge
 800c896:	461c      	movge	r4, r3
 800c898:	2500      	movge	r5, #0
 800c89a:	2501      	movlt	r5, #1
 800c89c:	f7ff fcf0 	bl	800c280 <_Balloc>
 800c8a0:	b920      	cbnz	r0, 800c8ac <__mdiff+0x5c>
 800c8a2:	4b2e      	ldr	r3, [pc, #184]	; (800c95c <__mdiff+0x10c>)
 800c8a4:	4602      	mov	r2, r0
 800c8a6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c8aa:	e7e5      	b.n	800c878 <__mdiff+0x28>
 800c8ac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c8b0:	6926      	ldr	r6, [r4, #16]
 800c8b2:	60c5      	str	r5, [r0, #12]
 800c8b4:	f104 0914 	add.w	r9, r4, #20
 800c8b8:	f108 0514 	add.w	r5, r8, #20
 800c8bc:	f100 0e14 	add.w	lr, r0, #20
 800c8c0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c8c4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c8c8:	f108 0210 	add.w	r2, r8, #16
 800c8cc:	46f2      	mov	sl, lr
 800c8ce:	2100      	movs	r1, #0
 800c8d0:	f859 3b04 	ldr.w	r3, [r9], #4
 800c8d4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c8d8:	fa1f f883 	uxth.w	r8, r3
 800c8dc:	fa11 f18b 	uxtah	r1, r1, fp
 800c8e0:	0c1b      	lsrs	r3, r3, #16
 800c8e2:	eba1 0808 	sub.w	r8, r1, r8
 800c8e6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c8ea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c8ee:	fa1f f888 	uxth.w	r8, r8
 800c8f2:	1419      	asrs	r1, r3, #16
 800c8f4:	454e      	cmp	r6, r9
 800c8f6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c8fa:	f84a 3b04 	str.w	r3, [sl], #4
 800c8fe:	d8e7      	bhi.n	800c8d0 <__mdiff+0x80>
 800c900:	1b33      	subs	r3, r6, r4
 800c902:	3b15      	subs	r3, #21
 800c904:	f023 0303 	bic.w	r3, r3, #3
 800c908:	3304      	adds	r3, #4
 800c90a:	3415      	adds	r4, #21
 800c90c:	42a6      	cmp	r6, r4
 800c90e:	bf38      	it	cc
 800c910:	2304      	movcc	r3, #4
 800c912:	441d      	add	r5, r3
 800c914:	4473      	add	r3, lr
 800c916:	469e      	mov	lr, r3
 800c918:	462e      	mov	r6, r5
 800c91a:	4566      	cmp	r6, ip
 800c91c:	d30e      	bcc.n	800c93c <__mdiff+0xec>
 800c91e:	f10c 0203 	add.w	r2, ip, #3
 800c922:	1b52      	subs	r2, r2, r5
 800c924:	f022 0203 	bic.w	r2, r2, #3
 800c928:	3d03      	subs	r5, #3
 800c92a:	45ac      	cmp	ip, r5
 800c92c:	bf38      	it	cc
 800c92e:	2200      	movcc	r2, #0
 800c930:	441a      	add	r2, r3
 800c932:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c936:	b17b      	cbz	r3, 800c958 <__mdiff+0x108>
 800c938:	6107      	str	r7, [r0, #16]
 800c93a:	e7a3      	b.n	800c884 <__mdiff+0x34>
 800c93c:	f856 8b04 	ldr.w	r8, [r6], #4
 800c940:	fa11 f288 	uxtah	r2, r1, r8
 800c944:	1414      	asrs	r4, r2, #16
 800c946:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c94a:	b292      	uxth	r2, r2
 800c94c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c950:	f84e 2b04 	str.w	r2, [lr], #4
 800c954:	1421      	asrs	r1, r4, #16
 800c956:	e7e0      	b.n	800c91a <__mdiff+0xca>
 800c958:	3f01      	subs	r7, #1
 800c95a:	e7ea      	b.n	800c932 <__mdiff+0xe2>
 800c95c:	0800ddb8 	.word	0x0800ddb8
 800c960:	0800de5b 	.word	0x0800de5b

0800c964 <__ulp>:
 800c964:	b082      	sub	sp, #8
 800c966:	ed8d 0b00 	vstr	d0, [sp]
 800c96a:	9b01      	ldr	r3, [sp, #4]
 800c96c:	4912      	ldr	r1, [pc, #72]	; (800c9b8 <__ulp+0x54>)
 800c96e:	4019      	ands	r1, r3
 800c970:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c974:	2900      	cmp	r1, #0
 800c976:	dd05      	ble.n	800c984 <__ulp+0x20>
 800c978:	2200      	movs	r2, #0
 800c97a:	460b      	mov	r3, r1
 800c97c:	ec43 2b10 	vmov	d0, r2, r3
 800c980:	b002      	add	sp, #8
 800c982:	4770      	bx	lr
 800c984:	4249      	negs	r1, r1
 800c986:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c98a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c98e:	f04f 0200 	mov.w	r2, #0
 800c992:	f04f 0300 	mov.w	r3, #0
 800c996:	da04      	bge.n	800c9a2 <__ulp+0x3e>
 800c998:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c99c:	fa41 f300 	asr.w	r3, r1, r0
 800c9a0:	e7ec      	b.n	800c97c <__ulp+0x18>
 800c9a2:	f1a0 0114 	sub.w	r1, r0, #20
 800c9a6:	291e      	cmp	r1, #30
 800c9a8:	bfda      	itte	le
 800c9aa:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c9ae:	fa20 f101 	lsrle.w	r1, r0, r1
 800c9b2:	2101      	movgt	r1, #1
 800c9b4:	460a      	mov	r2, r1
 800c9b6:	e7e1      	b.n	800c97c <__ulp+0x18>
 800c9b8:	7ff00000 	.word	0x7ff00000

0800c9bc <__b2d>:
 800c9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9be:	6905      	ldr	r5, [r0, #16]
 800c9c0:	f100 0714 	add.w	r7, r0, #20
 800c9c4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c9c8:	1f2e      	subs	r6, r5, #4
 800c9ca:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c9ce:	4620      	mov	r0, r4
 800c9d0:	f7ff fd48 	bl	800c464 <__hi0bits>
 800c9d4:	f1c0 0320 	rsb	r3, r0, #32
 800c9d8:	280a      	cmp	r0, #10
 800c9da:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ca58 <__b2d+0x9c>
 800c9de:	600b      	str	r3, [r1, #0]
 800c9e0:	dc14      	bgt.n	800ca0c <__b2d+0x50>
 800c9e2:	f1c0 0e0b 	rsb	lr, r0, #11
 800c9e6:	fa24 f10e 	lsr.w	r1, r4, lr
 800c9ea:	42b7      	cmp	r7, r6
 800c9ec:	ea41 030c 	orr.w	r3, r1, ip
 800c9f0:	bf34      	ite	cc
 800c9f2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c9f6:	2100      	movcs	r1, #0
 800c9f8:	3015      	adds	r0, #21
 800c9fa:	fa04 f000 	lsl.w	r0, r4, r0
 800c9fe:	fa21 f10e 	lsr.w	r1, r1, lr
 800ca02:	ea40 0201 	orr.w	r2, r0, r1
 800ca06:	ec43 2b10 	vmov	d0, r2, r3
 800ca0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca0c:	42b7      	cmp	r7, r6
 800ca0e:	bf3a      	itte	cc
 800ca10:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ca14:	f1a5 0608 	subcc.w	r6, r5, #8
 800ca18:	2100      	movcs	r1, #0
 800ca1a:	380b      	subs	r0, #11
 800ca1c:	d017      	beq.n	800ca4e <__b2d+0x92>
 800ca1e:	f1c0 0c20 	rsb	ip, r0, #32
 800ca22:	fa04 f500 	lsl.w	r5, r4, r0
 800ca26:	42be      	cmp	r6, r7
 800ca28:	fa21 f40c 	lsr.w	r4, r1, ip
 800ca2c:	ea45 0504 	orr.w	r5, r5, r4
 800ca30:	bf8c      	ite	hi
 800ca32:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ca36:	2400      	movls	r4, #0
 800ca38:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ca3c:	fa01 f000 	lsl.w	r0, r1, r0
 800ca40:	fa24 f40c 	lsr.w	r4, r4, ip
 800ca44:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ca48:	ea40 0204 	orr.w	r2, r0, r4
 800ca4c:	e7db      	b.n	800ca06 <__b2d+0x4a>
 800ca4e:	ea44 030c 	orr.w	r3, r4, ip
 800ca52:	460a      	mov	r2, r1
 800ca54:	e7d7      	b.n	800ca06 <__b2d+0x4a>
 800ca56:	bf00      	nop
 800ca58:	3ff00000 	.word	0x3ff00000

0800ca5c <__d2b>:
 800ca5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ca60:	4689      	mov	r9, r1
 800ca62:	2101      	movs	r1, #1
 800ca64:	ec57 6b10 	vmov	r6, r7, d0
 800ca68:	4690      	mov	r8, r2
 800ca6a:	f7ff fc09 	bl	800c280 <_Balloc>
 800ca6e:	4604      	mov	r4, r0
 800ca70:	b930      	cbnz	r0, 800ca80 <__d2b+0x24>
 800ca72:	4602      	mov	r2, r0
 800ca74:	4b25      	ldr	r3, [pc, #148]	; (800cb0c <__d2b+0xb0>)
 800ca76:	4826      	ldr	r0, [pc, #152]	; (800cb10 <__d2b+0xb4>)
 800ca78:	f240 310a 	movw	r1, #778	; 0x30a
 800ca7c:	f000 fc3a 	bl	800d2f4 <__assert_func>
 800ca80:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ca84:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ca88:	bb35      	cbnz	r5, 800cad8 <__d2b+0x7c>
 800ca8a:	2e00      	cmp	r6, #0
 800ca8c:	9301      	str	r3, [sp, #4]
 800ca8e:	d028      	beq.n	800cae2 <__d2b+0x86>
 800ca90:	4668      	mov	r0, sp
 800ca92:	9600      	str	r6, [sp, #0]
 800ca94:	f7ff fd06 	bl	800c4a4 <__lo0bits>
 800ca98:	9900      	ldr	r1, [sp, #0]
 800ca9a:	b300      	cbz	r0, 800cade <__d2b+0x82>
 800ca9c:	9a01      	ldr	r2, [sp, #4]
 800ca9e:	f1c0 0320 	rsb	r3, r0, #32
 800caa2:	fa02 f303 	lsl.w	r3, r2, r3
 800caa6:	430b      	orrs	r3, r1
 800caa8:	40c2      	lsrs	r2, r0
 800caaa:	6163      	str	r3, [r4, #20]
 800caac:	9201      	str	r2, [sp, #4]
 800caae:	9b01      	ldr	r3, [sp, #4]
 800cab0:	61a3      	str	r3, [r4, #24]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	bf14      	ite	ne
 800cab6:	2202      	movne	r2, #2
 800cab8:	2201      	moveq	r2, #1
 800caba:	6122      	str	r2, [r4, #16]
 800cabc:	b1d5      	cbz	r5, 800caf4 <__d2b+0x98>
 800cabe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cac2:	4405      	add	r5, r0
 800cac4:	f8c9 5000 	str.w	r5, [r9]
 800cac8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cacc:	f8c8 0000 	str.w	r0, [r8]
 800cad0:	4620      	mov	r0, r4
 800cad2:	b003      	add	sp, #12
 800cad4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cad8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cadc:	e7d5      	b.n	800ca8a <__d2b+0x2e>
 800cade:	6161      	str	r1, [r4, #20]
 800cae0:	e7e5      	b.n	800caae <__d2b+0x52>
 800cae2:	a801      	add	r0, sp, #4
 800cae4:	f7ff fcde 	bl	800c4a4 <__lo0bits>
 800cae8:	9b01      	ldr	r3, [sp, #4]
 800caea:	6163      	str	r3, [r4, #20]
 800caec:	2201      	movs	r2, #1
 800caee:	6122      	str	r2, [r4, #16]
 800caf0:	3020      	adds	r0, #32
 800caf2:	e7e3      	b.n	800cabc <__d2b+0x60>
 800caf4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800caf8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cafc:	f8c9 0000 	str.w	r0, [r9]
 800cb00:	6918      	ldr	r0, [r3, #16]
 800cb02:	f7ff fcaf 	bl	800c464 <__hi0bits>
 800cb06:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cb0a:	e7df      	b.n	800cacc <__d2b+0x70>
 800cb0c:	0800ddb8 	.word	0x0800ddb8
 800cb10:	0800de5b 	.word	0x0800de5b

0800cb14 <__ratio>:
 800cb14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb18:	4688      	mov	r8, r1
 800cb1a:	4669      	mov	r1, sp
 800cb1c:	4681      	mov	r9, r0
 800cb1e:	f7ff ff4d 	bl	800c9bc <__b2d>
 800cb22:	a901      	add	r1, sp, #4
 800cb24:	4640      	mov	r0, r8
 800cb26:	ec55 4b10 	vmov	r4, r5, d0
 800cb2a:	f7ff ff47 	bl	800c9bc <__b2d>
 800cb2e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cb32:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800cb36:	eba3 0c02 	sub.w	ip, r3, r2
 800cb3a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cb3e:	1a9b      	subs	r3, r3, r2
 800cb40:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800cb44:	ec51 0b10 	vmov	r0, r1, d0
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	bfd6      	itet	le
 800cb4c:	460a      	movle	r2, r1
 800cb4e:	462a      	movgt	r2, r5
 800cb50:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cb54:	468b      	mov	fp, r1
 800cb56:	462f      	mov	r7, r5
 800cb58:	bfd4      	ite	le
 800cb5a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800cb5e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cb62:	4620      	mov	r0, r4
 800cb64:	ee10 2a10 	vmov	r2, s0
 800cb68:	465b      	mov	r3, fp
 800cb6a:	4639      	mov	r1, r7
 800cb6c:	f7f3 fe76 	bl	800085c <__aeabi_ddiv>
 800cb70:	ec41 0b10 	vmov	d0, r0, r1
 800cb74:	b003      	add	sp, #12
 800cb76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cb7a <__copybits>:
 800cb7a:	3901      	subs	r1, #1
 800cb7c:	b570      	push	{r4, r5, r6, lr}
 800cb7e:	1149      	asrs	r1, r1, #5
 800cb80:	6914      	ldr	r4, [r2, #16]
 800cb82:	3101      	adds	r1, #1
 800cb84:	f102 0314 	add.w	r3, r2, #20
 800cb88:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cb8c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cb90:	1f05      	subs	r5, r0, #4
 800cb92:	42a3      	cmp	r3, r4
 800cb94:	d30c      	bcc.n	800cbb0 <__copybits+0x36>
 800cb96:	1aa3      	subs	r3, r4, r2
 800cb98:	3b11      	subs	r3, #17
 800cb9a:	f023 0303 	bic.w	r3, r3, #3
 800cb9e:	3211      	adds	r2, #17
 800cba0:	42a2      	cmp	r2, r4
 800cba2:	bf88      	it	hi
 800cba4:	2300      	movhi	r3, #0
 800cba6:	4418      	add	r0, r3
 800cba8:	2300      	movs	r3, #0
 800cbaa:	4288      	cmp	r0, r1
 800cbac:	d305      	bcc.n	800cbba <__copybits+0x40>
 800cbae:	bd70      	pop	{r4, r5, r6, pc}
 800cbb0:	f853 6b04 	ldr.w	r6, [r3], #4
 800cbb4:	f845 6f04 	str.w	r6, [r5, #4]!
 800cbb8:	e7eb      	b.n	800cb92 <__copybits+0x18>
 800cbba:	f840 3b04 	str.w	r3, [r0], #4
 800cbbe:	e7f4      	b.n	800cbaa <__copybits+0x30>

0800cbc0 <__any_on>:
 800cbc0:	f100 0214 	add.w	r2, r0, #20
 800cbc4:	6900      	ldr	r0, [r0, #16]
 800cbc6:	114b      	asrs	r3, r1, #5
 800cbc8:	4298      	cmp	r0, r3
 800cbca:	b510      	push	{r4, lr}
 800cbcc:	db11      	blt.n	800cbf2 <__any_on+0x32>
 800cbce:	dd0a      	ble.n	800cbe6 <__any_on+0x26>
 800cbd0:	f011 011f 	ands.w	r1, r1, #31
 800cbd4:	d007      	beq.n	800cbe6 <__any_on+0x26>
 800cbd6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cbda:	fa24 f001 	lsr.w	r0, r4, r1
 800cbde:	fa00 f101 	lsl.w	r1, r0, r1
 800cbe2:	428c      	cmp	r4, r1
 800cbe4:	d10b      	bne.n	800cbfe <__any_on+0x3e>
 800cbe6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cbea:	4293      	cmp	r3, r2
 800cbec:	d803      	bhi.n	800cbf6 <__any_on+0x36>
 800cbee:	2000      	movs	r0, #0
 800cbf0:	bd10      	pop	{r4, pc}
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	e7f7      	b.n	800cbe6 <__any_on+0x26>
 800cbf6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cbfa:	2900      	cmp	r1, #0
 800cbfc:	d0f5      	beq.n	800cbea <__any_on+0x2a>
 800cbfe:	2001      	movs	r0, #1
 800cc00:	e7f6      	b.n	800cbf0 <__any_on+0x30>

0800cc02 <_calloc_r>:
 800cc02:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cc04:	fba1 2402 	umull	r2, r4, r1, r2
 800cc08:	b94c      	cbnz	r4, 800cc1e <_calloc_r+0x1c>
 800cc0a:	4611      	mov	r1, r2
 800cc0c:	9201      	str	r2, [sp, #4]
 800cc0e:	f7fd fd8b 	bl	800a728 <_malloc_r>
 800cc12:	9a01      	ldr	r2, [sp, #4]
 800cc14:	4605      	mov	r5, r0
 800cc16:	b930      	cbnz	r0, 800cc26 <_calloc_r+0x24>
 800cc18:	4628      	mov	r0, r5
 800cc1a:	b003      	add	sp, #12
 800cc1c:	bd30      	pop	{r4, r5, pc}
 800cc1e:	220c      	movs	r2, #12
 800cc20:	6002      	str	r2, [r0, #0]
 800cc22:	2500      	movs	r5, #0
 800cc24:	e7f8      	b.n	800cc18 <_calloc_r+0x16>
 800cc26:	4621      	mov	r1, r4
 800cc28:	f7fd fd55 	bl	800a6d6 <memset>
 800cc2c:	e7f4      	b.n	800cc18 <_calloc_r+0x16>
	...

0800cc30 <_free_r>:
 800cc30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cc32:	2900      	cmp	r1, #0
 800cc34:	d044      	beq.n	800ccc0 <_free_r+0x90>
 800cc36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc3a:	9001      	str	r0, [sp, #4]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	f1a1 0404 	sub.w	r4, r1, #4
 800cc42:	bfb8      	it	lt
 800cc44:	18e4      	addlt	r4, r4, r3
 800cc46:	f7ff fb0f 	bl	800c268 <__malloc_lock>
 800cc4a:	4a1e      	ldr	r2, [pc, #120]	; (800ccc4 <_free_r+0x94>)
 800cc4c:	9801      	ldr	r0, [sp, #4]
 800cc4e:	6813      	ldr	r3, [r2, #0]
 800cc50:	b933      	cbnz	r3, 800cc60 <_free_r+0x30>
 800cc52:	6063      	str	r3, [r4, #4]
 800cc54:	6014      	str	r4, [r2, #0]
 800cc56:	b003      	add	sp, #12
 800cc58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cc5c:	f7ff bb0a 	b.w	800c274 <__malloc_unlock>
 800cc60:	42a3      	cmp	r3, r4
 800cc62:	d908      	bls.n	800cc76 <_free_r+0x46>
 800cc64:	6825      	ldr	r5, [r4, #0]
 800cc66:	1961      	adds	r1, r4, r5
 800cc68:	428b      	cmp	r3, r1
 800cc6a:	bf01      	itttt	eq
 800cc6c:	6819      	ldreq	r1, [r3, #0]
 800cc6e:	685b      	ldreq	r3, [r3, #4]
 800cc70:	1949      	addeq	r1, r1, r5
 800cc72:	6021      	streq	r1, [r4, #0]
 800cc74:	e7ed      	b.n	800cc52 <_free_r+0x22>
 800cc76:	461a      	mov	r2, r3
 800cc78:	685b      	ldr	r3, [r3, #4]
 800cc7a:	b10b      	cbz	r3, 800cc80 <_free_r+0x50>
 800cc7c:	42a3      	cmp	r3, r4
 800cc7e:	d9fa      	bls.n	800cc76 <_free_r+0x46>
 800cc80:	6811      	ldr	r1, [r2, #0]
 800cc82:	1855      	adds	r5, r2, r1
 800cc84:	42a5      	cmp	r5, r4
 800cc86:	d10b      	bne.n	800cca0 <_free_r+0x70>
 800cc88:	6824      	ldr	r4, [r4, #0]
 800cc8a:	4421      	add	r1, r4
 800cc8c:	1854      	adds	r4, r2, r1
 800cc8e:	42a3      	cmp	r3, r4
 800cc90:	6011      	str	r1, [r2, #0]
 800cc92:	d1e0      	bne.n	800cc56 <_free_r+0x26>
 800cc94:	681c      	ldr	r4, [r3, #0]
 800cc96:	685b      	ldr	r3, [r3, #4]
 800cc98:	6053      	str	r3, [r2, #4]
 800cc9a:	4421      	add	r1, r4
 800cc9c:	6011      	str	r1, [r2, #0]
 800cc9e:	e7da      	b.n	800cc56 <_free_r+0x26>
 800cca0:	d902      	bls.n	800cca8 <_free_r+0x78>
 800cca2:	230c      	movs	r3, #12
 800cca4:	6003      	str	r3, [r0, #0]
 800cca6:	e7d6      	b.n	800cc56 <_free_r+0x26>
 800cca8:	6825      	ldr	r5, [r4, #0]
 800ccaa:	1961      	adds	r1, r4, r5
 800ccac:	428b      	cmp	r3, r1
 800ccae:	bf04      	itt	eq
 800ccb0:	6819      	ldreq	r1, [r3, #0]
 800ccb2:	685b      	ldreq	r3, [r3, #4]
 800ccb4:	6063      	str	r3, [r4, #4]
 800ccb6:	bf04      	itt	eq
 800ccb8:	1949      	addeq	r1, r1, r5
 800ccba:	6021      	streq	r1, [r4, #0]
 800ccbc:	6054      	str	r4, [r2, #4]
 800ccbe:	e7ca      	b.n	800cc56 <_free_r+0x26>
 800ccc0:	b003      	add	sp, #12
 800ccc2:	bd30      	pop	{r4, r5, pc}
 800ccc4:	200048fc 	.word	0x200048fc

0800ccc8 <__sfputc_r>:
 800ccc8:	6893      	ldr	r3, [r2, #8]
 800ccca:	3b01      	subs	r3, #1
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	b410      	push	{r4}
 800ccd0:	6093      	str	r3, [r2, #8]
 800ccd2:	da08      	bge.n	800cce6 <__sfputc_r+0x1e>
 800ccd4:	6994      	ldr	r4, [r2, #24]
 800ccd6:	42a3      	cmp	r3, r4
 800ccd8:	db01      	blt.n	800ccde <__sfputc_r+0x16>
 800ccda:	290a      	cmp	r1, #10
 800ccdc:	d103      	bne.n	800cce6 <__sfputc_r+0x1e>
 800ccde:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cce2:	f7fe bd23 	b.w	800b72c <__swbuf_r>
 800cce6:	6813      	ldr	r3, [r2, #0]
 800cce8:	1c58      	adds	r0, r3, #1
 800ccea:	6010      	str	r0, [r2, #0]
 800ccec:	7019      	strb	r1, [r3, #0]
 800ccee:	4608      	mov	r0, r1
 800ccf0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ccf4:	4770      	bx	lr

0800ccf6 <__sfputs_r>:
 800ccf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccf8:	4606      	mov	r6, r0
 800ccfa:	460f      	mov	r7, r1
 800ccfc:	4614      	mov	r4, r2
 800ccfe:	18d5      	adds	r5, r2, r3
 800cd00:	42ac      	cmp	r4, r5
 800cd02:	d101      	bne.n	800cd08 <__sfputs_r+0x12>
 800cd04:	2000      	movs	r0, #0
 800cd06:	e007      	b.n	800cd18 <__sfputs_r+0x22>
 800cd08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd0c:	463a      	mov	r2, r7
 800cd0e:	4630      	mov	r0, r6
 800cd10:	f7ff ffda 	bl	800ccc8 <__sfputc_r>
 800cd14:	1c43      	adds	r3, r0, #1
 800cd16:	d1f3      	bne.n	800cd00 <__sfputs_r+0xa>
 800cd18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cd1c <_vfiprintf_r>:
 800cd1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd20:	460d      	mov	r5, r1
 800cd22:	b09d      	sub	sp, #116	; 0x74
 800cd24:	4614      	mov	r4, r2
 800cd26:	4698      	mov	r8, r3
 800cd28:	4606      	mov	r6, r0
 800cd2a:	b118      	cbz	r0, 800cd34 <_vfiprintf_r+0x18>
 800cd2c:	6983      	ldr	r3, [r0, #24]
 800cd2e:	b90b      	cbnz	r3, 800cd34 <_vfiprintf_r+0x18>
 800cd30:	f7fd fbfe 	bl	800a530 <__sinit>
 800cd34:	4b89      	ldr	r3, [pc, #548]	; (800cf5c <_vfiprintf_r+0x240>)
 800cd36:	429d      	cmp	r5, r3
 800cd38:	d11b      	bne.n	800cd72 <_vfiprintf_r+0x56>
 800cd3a:	6875      	ldr	r5, [r6, #4]
 800cd3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cd3e:	07d9      	lsls	r1, r3, #31
 800cd40:	d405      	bmi.n	800cd4e <_vfiprintf_r+0x32>
 800cd42:	89ab      	ldrh	r3, [r5, #12]
 800cd44:	059a      	lsls	r2, r3, #22
 800cd46:	d402      	bmi.n	800cd4e <_vfiprintf_r+0x32>
 800cd48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cd4a:	f7fd fcb4 	bl	800a6b6 <__retarget_lock_acquire_recursive>
 800cd4e:	89ab      	ldrh	r3, [r5, #12]
 800cd50:	071b      	lsls	r3, r3, #28
 800cd52:	d501      	bpl.n	800cd58 <_vfiprintf_r+0x3c>
 800cd54:	692b      	ldr	r3, [r5, #16]
 800cd56:	b9eb      	cbnz	r3, 800cd94 <_vfiprintf_r+0x78>
 800cd58:	4629      	mov	r1, r5
 800cd5a:	4630      	mov	r0, r6
 800cd5c:	f7fe fd4a 	bl	800b7f4 <__swsetup_r>
 800cd60:	b1c0      	cbz	r0, 800cd94 <_vfiprintf_r+0x78>
 800cd62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cd64:	07dc      	lsls	r4, r3, #31
 800cd66:	d50e      	bpl.n	800cd86 <_vfiprintf_r+0x6a>
 800cd68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd6c:	b01d      	add	sp, #116	; 0x74
 800cd6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd72:	4b7b      	ldr	r3, [pc, #492]	; (800cf60 <_vfiprintf_r+0x244>)
 800cd74:	429d      	cmp	r5, r3
 800cd76:	d101      	bne.n	800cd7c <_vfiprintf_r+0x60>
 800cd78:	68b5      	ldr	r5, [r6, #8]
 800cd7a:	e7df      	b.n	800cd3c <_vfiprintf_r+0x20>
 800cd7c:	4b79      	ldr	r3, [pc, #484]	; (800cf64 <_vfiprintf_r+0x248>)
 800cd7e:	429d      	cmp	r5, r3
 800cd80:	bf08      	it	eq
 800cd82:	68f5      	ldreq	r5, [r6, #12]
 800cd84:	e7da      	b.n	800cd3c <_vfiprintf_r+0x20>
 800cd86:	89ab      	ldrh	r3, [r5, #12]
 800cd88:	0598      	lsls	r0, r3, #22
 800cd8a:	d4ed      	bmi.n	800cd68 <_vfiprintf_r+0x4c>
 800cd8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cd8e:	f7fd fc93 	bl	800a6b8 <__retarget_lock_release_recursive>
 800cd92:	e7e9      	b.n	800cd68 <_vfiprintf_r+0x4c>
 800cd94:	2300      	movs	r3, #0
 800cd96:	9309      	str	r3, [sp, #36]	; 0x24
 800cd98:	2320      	movs	r3, #32
 800cd9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cd9e:	f8cd 800c 	str.w	r8, [sp, #12]
 800cda2:	2330      	movs	r3, #48	; 0x30
 800cda4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cf68 <_vfiprintf_r+0x24c>
 800cda8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cdac:	f04f 0901 	mov.w	r9, #1
 800cdb0:	4623      	mov	r3, r4
 800cdb2:	469a      	mov	sl, r3
 800cdb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cdb8:	b10a      	cbz	r2, 800cdbe <_vfiprintf_r+0xa2>
 800cdba:	2a25      	cmp	r2, #37	; 0x25
 800cdbc:	d1f9      	bne.n	800cdb2 <_vfiprintf_r+0x96>
 800cdbe:	ebba 0b04 	subs.w	fp, sl, r4
 800cdc2:	d00b      	beq.n	800cddc <_vfiprintf_r+0xc0>
 800cdc4:	465b      	mov	r3, fp
 800cdc6:	4622      	mov	r2, r4
 800cdc8:	4629      	mov	r1, r5
 800cdca:	4630      	mov	r0, r6
 800cdcc:	f7ff ff93 	bl	800ccf6 <__sfputs_r>
 800cdd0:	3001      	adds	r0, #1
 800cdd2:	f000 80aa 	beq.w	800cf2a <_vfiprintf_r+0x20e>
 800cdd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cdd8:	445a      	add	r2, fp
 800cdda:	9209      	str	r2, [sp, #36]	; 0x24
 800cddc:	f89a 3000 	ldrb.w	r3, [sl]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	f000 80a2 	beq.w	800cf2a <_vfiprintf_r+0x20e>
 800cde6:	2300      	movs	r3, #0
 800cde8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cdec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cdf0:	f10a 0a01 	add.w	sl, sl, #1
 800cdf4:	9304      	str	r3, [sp, #16]
 800cdf6:	9307      	str	r3, [sp, #28]
 800cdf8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cdfc:	931a      	str	r3, [sp, #104]	; 0x68
 800cdfe:	4654      	mov	r4, sl
 800ce00:	2205      	movs	r2, #5
 800ce02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce06:	4858      	ldr	r0, [pc, #352]	; (800cf68 <_vfiprintf_r+0x24c>)
 800ce08:	f7f3 f9f2 	bl	80001f0 <memchr>
 800ce0c:	9a04      	ldr	r2, [sp, #16]
 800ce0e:	b9d8      	cbnz	r0, 800ce48 <_vfiprintf_r+0x12c>
 800ce10:	06d1      	lsls	r1, r2, #27
 800ce12:	bf44      	itt	mi
 800ce14:	2320      	movmi	r3, #32
 800ce16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce1a:	0713      	lsls	r3, r2, #28
 800ce1c:	bf44      	itt	mi
 800ce1e:	232b      	movmi	r3, #43	; 0x2b
 800ce20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce24:	f89a 3000 	ldrb.w	r3, [sl]
 800ce28:	2b2a      	cmp	r3, #42	; 0x2a
 800ce2a:	d015      	beq.n	800ce58 <_vfiprintf_r+0x13c>
 800ce2c:	9a07      	ldr	r2, [sp, #28]
 800ce2e:	4654      	mov	r4, sl
 800ce30:	2000      	movs	r0, #0
 800ce32:	f04f 0c0a 	mov.w	ip, #10
 800ce36:	4621      	mov	r1, r4
 800ce38:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce3c:	3b30      	subs	r3, #48	; 0x30
 800ce3e:	2b09      	cmp	r3, #9
 800ce40:	d94e      	bls.n	800cee0 <_vfiprintf_r+0x1c4>
 800ce42:	b1b0      	cbz	r0, 800ce72 <_vfiprintf_r+0x156>
 800ce44:	9207      	str	r2, [sp, #28]
 800ce46:	e014      	b.n	800ce72 <_vfiprintf_r+0x156>
 800ce48:	eba0 0308 	sub.w	r3, r0, r8
 800ce4c:	fa09 f303 	lsl.w	r3, r9, r3
 800ce50:	4313      	orrs	r3, r2
 800ce52:	9304      	str	r3, [sp, #16]
 800ce54:	46a2      	mov	sl, r4
 800ce56:	e7d2      	b.n	800cdfe <_vfiprintf_r+0xe2>
 800ce58:	9b03      	ldr	r3, [sp, #12]
 800ce5a:	1d19      	adds	r1, r3, #4
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	9103      	str	r1, [sp, #12]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	bfbb      	ittet	lt
 800ce64:	425b      	neglt	r3, r3
 800ce66:	f042 0202 	orrlt.w	r2, r2, #2
 800ce6a:	9307      	strge	r3, [sp, #28]
 800ce6c:	9307      	strlt	r3, [sp, #28]
 800ce6e:	bfb8      	it	lt
 800ce70:	9204      	strlt	r2, [sp, #16]
 800ce72:	7823      	ldrb	r3, [r4, #0]
 800ce74:	2b2e      	cmp	r3, #46	; 0x2e
 800ce76:	d10c      	bne.n	800ce92 <_vfiprintf_r+0x176>
 800ce78:	7863      	ldrb	r3, [r4, #1]
 800ce7a:	2b2a      	cmp	r3, #42	; 0x2a
 800ce7c:	d135      	bne.n	800ceea <_vfiprintf_r+0x1ce>
 800ce7e:	9b03      	ldr	r3, [sp, #12]
 800ce80:	1d1a      	adds	r2, r3, #4
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	9203      	str	r2, [sp, #12]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	bfb8      	it	lt
 800ce8a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ce8e:	3402      	adds	r4, #2
 800ce90:	9305      	str	r3, [sp, #20]
 800ce92:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cf78 <_vfiprintf_r+0x25c>
 800ce96:	7821      	ldrb	r1, [r4, #0]
 800ce98:	2203      	movs	r2, #3
 800ce9a:	4650      	mov	r0, sl
 800ce9c:	f7f3 f9a8 	bl	80001f0 <memchr>
 800cea0:	b140      	cbz	r0, 800ceb4 <_vfiprintf_r+0x198>
 800cea2:	2340      	movs	r3, #64	; 0x40
 800cea4:	eba0 000a 	sub.w	r0, r0, sl
 800cea8:	fa03 f000 	lsl.w	r0, r3, r0
 800ceac:	9b04      	ldr	r3, [sp, #16]
 800ceae:	4303      	orrs	r3, r0
 800ceb0:	3401      	adds	r4, #1
 800ceb2:	9304      	str	r3, [sp, #16]
 800ceb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ceb8:	482c      	ldr	r0, [pc, #176]	; (800cf6c <_vfiprintf_r+0x250>)
 800ceba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cebe:	2206      	movs	r2, #6
 800cec0:	f7f3 f996 	bl	80001f0 <memchr>
 800cec4:	2800      	cmp	r0, #0
 800cec6:	d03f      	beq.n	800cf48 <_vfiprintf_r+0x22c>
 800cec8:	4b29      	ldr	r3, [pc, #164]	; (800cf70 <_vfiprintf_r+0x254>)
 800ceca:	bb1b      	cbnz	r3, 800cf14 <_vfiprintf_r+0x1f8>
 800cecc:	9b03      	ldr	r3, [sp, #12]
 800cece:	3307      	adds	r3, #7
 800ced0:	f023 0307 	bic.w	r3, r3, #7
 800ced4:	3308      	adds	r3, #8
 800ced6:	9303      	str	r3, [sp, #12]
 800ced8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ceda:	443b      	add	r3, r7
 800cedc:	9309      	str	r3, [sp, #36]	; 0x24
 800cede:	e767      	b.n	800cdb0 <_vfiprintf_r+0x94>
 800cee0:	fb0c 3202 	mla	r2, ip, r2, r3
 800cee4:	460c      	mov	r4, r1
 800cee6:	2001      	movs	r0, #1
 800cee8:	e7a5      	b.n	800ce36 <_vfiprintf_r+0x11a>
 800ceea:	2300      	movs	r3, #0
 800ceec:	3401      	adds	r4, #1
 800ceee:	9305      	str	r3, [sp, #20]
 800cef0:	4619      	mov	r1, r3
 800cef2:	f04f 0c0a 	mov.w	ip, #10
 800cef6:	4620      	mov	r0, r4
 800cef8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cefc:	3a30      	subs	r2, #48	; 0x30
 800cefe:	2a09      	cmp	r2, #9
 800cf00:	d903      	bls.n	800cf0a <_vfiprintf_r+0x1ee>
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d0c5      	beq.n	800ce92 <_vfiprintf_r+0x176>
 800cf06:	9105      	str	r1, [sp, #20]
 800cf08:	e7c3      	b.n	800ce92 <_vfiprintf_r+0x176>
 800cf0a:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf0e:	4604      	mov	r4, r0
 800cf10:	2301      	movs	r3, #1
 800cf12:	e7f0      	b.n	800cef6 <_vfiprintf_r+0x1da>
 800cf14:	ab03      	add	r3, sp, #12
 800cf16:	9300      	str	r3, [sp, #0]
 800cf18:	462a      	mov	r2, r5
 800cf1a:	4b16      	ldr	r3, [pc, #88]	; (800cf74 <_vfiprintf_r+0x258>)
 800cf1c:	a904      	add	r1, sp, #16
 800cf1e:	4630      	mov	r0, r6
 800cf20:	f3af 8000 	nop.w
 800cf24:	4607      	mov	r7, r0
 800cf26:	1c78      	adds	r0, r7, #1
 800cf28:	d1d6      	bne.n	800ced8 <_vfiprintf_r+0x1bc>
 800cf2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf2c:	07d9      	lsls	r1, r3, #31
 800cf2e:	d405      	bmi.n	800cf3c <_vfiprintf_r+0x220>
 800cf30:	89ab      	ldrh	r3, [r5, #12]
 800cf32:	059a      	lsls	r2, r3, #22
 800cf34:	d402      	bmi.n	800cf3c <_vfiprintf_r+0x220>
 800cf36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf38:	f7fd fbbe 	bl	800a6b8 <__retarget_lock_release_recursive>
 800cf3c:	89ab      	ldrh	r3, [r5, #12]
 800cf3e:	065b      	lsls	r3, r3, #25
 800cf40:	f53f af12 	bmi.w	800cd68 <_vfiprintf_r+0x4c>
 800cf44:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cf46:	e711      	b.n	800cd6c <_vfiprintf_r+0x50>
 800cf48:	ab03      	add	r3, sp, #12
 800cf4a:	9300      	str	r3, [sp, #0]
 800cf4c:	462a      	mov	r2, r5
 800cf4e:	4b09      	ldr	r3, [pc, #36]	; (800cf74 <_vfiprintf_r+0x258>)
 800cf50:	a904      	add	r1, sp, #16
 800cf52:	4630      	mov	r0, r6
 800cf54:	f000 f880 	bl	800d058 <_printf_i>
 800cf58:	e7e4      	b.n	800cf24 <_vfiprintf_r+0x208>
 800cf5a:	bf00      	nop
 800cf5c:	0800dd14 	.word	0x0800dd14
 800cf60:	0800dd34 	.word	0x0800dd34
 800cf64:	0800dcf4 	.word	0x0800dcf4
 800cf68:	0800dfb4 	.word	0x0800dfb4
 800cf6c:	0800dfbe 	.word	0x0800dfbe
 800cf70:	00000000 	.word	0x00000000
 800cf74:	0800ccf7 	.word	0x0800ccf7
 800cf78:	0800dfba 	.word	0x0800dfba

0800cf7c <_printf_common>:
 800cf7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf80:	4616      	mov	r6, r2
 800cf82:	4699      	mov	r9, r3
 800cf84:	688a      	ldr	r2, [r1, #8]
 800cf86:	690b      	ldr	r3, [r1, #16]
 800cf88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cf8c:	4293      	cmp	r3, r2
 800cf8e:	bfb8      	it	lt
 800cf90:	4613      	movlt	r3, r2
 800cf92:	6033      	str	r3, [r6, #0]
 800cf94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cf98:	4607      	mov	r7, r0
 800cf9a:	460c      	mov	r4, r1
 800cf9c:	b10a      	cbz	r2, 800cfa2 <_printf_common+0x26>
 800cf9e:	3301      	adds	r3, #1
 800cfa0:	6033      	str	r3, [r6, #0]
 800cfa2:	6823      	ldr	r3, [r4, #0]
 800cfa4:	0699      	lsls	r1, r3, #26
 800cfa6:	bf42      	ittt	mi
 800cfa8:	6833      	ldrmi	r3, [r6, #0]
 800cfaa:	3302      	addmi	r3, #2
 800cfac:	6033      	strmi	r3, [r6, #0]
 800cfae:	6825      	ldr	r5, [r4, #0]
 800cfb0:	f015 0506 	ands.w	r5, r5, #6
 800cfb4:	d106      	bne.n	800cfc4 <_printf_common+0x48>
 800cfb6:	f104 0a19 	add.w	sl, r4, #25
 800cfba:	68e3      	ldr	r3, [r4, #12]
 800cfbc:	6832      	ldr	r2, [r6, #0]
 800cfbe:	1a9b      	subs	r3, r3, r2
 800cfc0:	42ab      	cmp	r3, r5
 800cfc2:	dc26      	bgt.n	800d012 <_printf_common+0x96>
 800cfc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cfc8:	1e13      	subs	r3, r2, #0
 800cfca:	6822      	ldr	r2, [r4, #0]
 800cfcc:	bf18      	it	ne
 800cfce:	2301      	movne	r3, #1
 800cfd0:	0692      	lsls	r2, r2, #26
 800cfd2:	d42b      	bmi.n	800d02c <_printf_common+0xb0>
 800cfd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cfd8:	4649      	mov	r1, r9
 800cfda:	4638      	mov	r0, r7
 800cfdc:	47c0      	blx	r8
 800cfde:	3001      	adds	r0, #1
 800cfe0:	d01e      	beq.n	800d020 <_printf_common+0xa4>
 800cfe2:	6823      	ldr	r3, [r4, #0]
 800cfe4:	68e5      	ldr	r5, [r4, #12]
 800cfe6:	6832      	ldr	r2, [r6, #0]
 800cfe8:	f003 0306 	and.w	r3, r3, #6
 800cfec:	2b04      	cmp	r3, #4
 800cfee:	bf08      	it	eq
 800cff0:	1aad      	subeq	r5, r5, r2
 800cff2:	68a3      	ldr	r3, [r4, #8]
 800cff4:	6922      	ldr	r2, [r4, #16]
 800cff6:	bf0c      	ite	eq
 800cff8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cffc:	2500      	movne	r5, #0
 800cffe:	4293      	cmp	r3, r2
 800d000:	bfc4      	itt	gt
 800d002:	1a9b      	subgt	r3, r3, r2
 800d004:	18ed      	addgt	r5, r5, r3
 800d006:	2600      	movs	r6, #0
 800d008:	341a      	adds	r4, #26
 800d00a:	42b5      	cmp	r5, r6
 800d00c:	d11a      	bne.n	800d044 <_printf_common+0xc8>
 800d00e:	2000      	movs	r0, #0
 800d010:	e008      	b.n	800d024 <_printf_common+0xa8>
 800d012:	2301      	movs	r3, #1
 800d014:	4652      	mov	r2, sl
 800d016:	4649      	mov	r1, r9
 800d018:	4638      	mov	r0, r7
 800d01a:	47c0      	blx	r8
 800d01c:	3001      	adds	r0, #1
 800d01e:	d103      	bne.n	800d028 <_printf_common+0xac>
 800d020:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d028:	3501      	adds	r5, #1
 800d02a:	e7c6      	b.n	800cfba <_printf_common+0x3e>
 800d02c:	18e1      	adds	r1, r4, r3
 800d02e:	1c5a      	adds	r2, r3, #1
 800d030:	2030      	movs	r0, #48	; 0x30
 800d032:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d036:	4422      	add	r2, r4
 800d038:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d03c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d040:	3302      	adds	r3, #2
 800d042:	e7c7      	b.n	800cfd4 <_printf_common+0x58>
 800d044:	2301      	movs	r3, #1
 800d046:	4622      	mov	r2, r4
 800d048:	4649      	mov	r1, r9
 800d04a:	4638      	mov	r0, r7
 800d04c:	47c0      	blx	r8
 800d04e:	3001      	adds	r0, #1
 800d050:	d0e6      	beq.n	800d020 <_printf_common+0xa4>
 800d052:	3601      	adds	r6, #1
 800d054:	e7d9      	b.n	800d00a <_printf_common+0x8e>
	...

0800d058 <_printf_i>:
 800d058:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d05c:	7e0f      	ldrb	r7, [r1, #24]
 800d05e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d060:	2f78      	cmp	r7, #120	; 0x78
 800d062:	4691      	mov	r9, r2
 800d064:	4680      	mov	r8, r0
 800d066:	460c      	mov	r4, r1
 800d068:	469a      	mov	sl, r3
 800d06a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d06e:	d807      	bhi.n	800d080 <_printf_i+0x28>
 800d070:	2f62      	cmp	r7, #98	; 0x62
 800d072:	d80a      	bhi.n	800d08a <_printf_i+0x32>
 800d074:	2f00      	cmp	r7, #0
 800d076:	f000 80d8 	beq.w	800d22a <_printf_i+0x1d2>
 800d07a:	2f58      	cmp	r7, #88	; 0x58
 800d07c:	f000 80a3 	beq.w	800d1c6 <_printf_i+0x16e>
 800d080:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d084:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d088:	e03a      	b.n	800d100 <_printf_i+0xa8>
 800d08a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d08e:	2b15      	cmp	r3, #21
 800d090:	d8f6      	bhi.n	800d080 <_printf_i+0x28>
 800d092:	a101      	add	r1, pc, #4	; (adr r1, 800d098 <_printf_i+0x40>)
 800d094:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d098:	0800d0f1 	.word	0x0800d0f1
 800d09c:	0800d105 	.word	0x0800d105
 800d0a0:	0800d081 	.word	0x0800d081
 800d0a4:	0800d081 	.word	0x0800d081
 800d0a8:	0800d081 	.word	0x0800d081
 800d0ac:	0800d081 	.word	0x0800d081
 800d0b0:	0800d105 	.word	0x0800d105
 800d0b4:	0800d081 	.word	0x0800d081
 800d0b8:	0800d081 	.word	0x0800d081
 800d0bc:	0800d081 	.word	0x0800d081
 800d0c0:	0800d081 	.word	0x0800d081
 800d0c4:	0800d211 	.word	0x0800d211
 800d0c8:	0800d135 	.word	0x0800d135
 800d0cc:	0800d1f3 	.word	0x0800d1f3
 800d0d0:	0800d081 	.word	0x0800d081
 800d0d4:	0800d081 	.word	0x0800d081
 800d0d8:	0800d233 	.word	0x0800d233
 800d0dc:	0800d081 	.word	0x0800d081
 800d0e0:	0800d135 	.word	0x0800d135
 800d0e4:	0800d081 	.word	0x0800d081
 800d0e8:	0800d081 	.word	0x0800d081
 800d0ec:	0800d1fb 	.word	0x0800d1fb
 800d0f0:	682b      	ldr	r3, [r5, #0]
 800d0f2:	1d1a      	adds	r2, r3, #4
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	602a      	str	r2, [r5, #0]
 800d0f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d0fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d100:	2301      	movs	r3, #1
 800d102:	e0a3      	b.n	800d24c <_printf_i+0x1f4>
 800d104:	6820      	ldr	r0, [r4, #0]
 800d106:	6829      	ldr	r1, [r5, #0]
 800d108:	0606      	lsls	r6, r0, #24
 800d10a:	f101 0304 	add.w	r3, r1, #4
 800d10e:	d50a      	bpl.n	800d126 <_printf_i+0xce>
 800d110:	680e      	ldr	r6, [r1, #0]
 800d112:	602b      	str	r3, [r5, #0]
 800d114:	2e00      	cmp	r6, #0
 800d116:	da03      	bge.n	800d120 <_printf_i+0xc8>
 800d118:	232d      	movs	r3, #45	; 0x2d
 800d11a:	4276      	negs	r6, r6
 800d11c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d120:	485e      	ldr	r0, [pc, #376]	; (800d29c <_printf_i+0x244>)
 800d122:	230a      	movs	r3, #10
 800d124:	e019      	b.n	800d15a <_printf_i+0x102>
 800d126:	680e      	ldr	r6, [r1, #0]
 800d128:	602b      	str	r3, [r5, #0]
 800d12a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d12e:	bf18      	it	ne
 800d130:	b236      	sxthne	r6, r6
 800d132:	e7ef      	b.n	800d114 <_printf_i+0xbc>
 800d134:	682b      	ldr	r3, [r5, #0]
 800d136:	6820      	ldr	r0, [r4, #0]
 800d138:	1d19      	adds	r1, r3, #4
 800d13a:	6029      	str	r1, [r5, #0]
 800d13c:	0601      	lsls	r1, r0, #24
 800d13e:	d501      	bpl.n	800d144 <_printf_i+0xec>
 800d140:	681e      	ldr	r6, [r3, #0]
 800d142:	e002      	b.n	800d14a <_printf_i+0xf2>
 800d144:	0646      	lsls	r6, r0, #25
 800d146:	d5fb      	bpl.n	800d140 <_printf_i+0xe8>
 800d148:	881e      	ldrh	r6, [r3, #0]
 800d14a:	4854      	ldr	r0, [pc, #336]	; (800d29c <_printf_i+0x244>)
 800d14c:	2f6f      	cmp	r7, #111	; 0x6f
 800d14e:	bf0c      	ite	eq
 800d150:	2308      	moveq	r3, #8
 800d152:	230a      	movne	r3, #10
 800d154:	2100      	movs	r1, #0
 800d156:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d15a:	6865      	ldr	r5, [r4, #4]
 800d15c:	60a5      	str	r5, [r4, #8]
 800d15e:	2d00      	cmp	r5, #0
 800d160:	bfa2      	ittt	ge
 800d162:	6821      	ldrge	r1, [r4, #0]
 800d164:	f021 0104 	bicge.w	r1, r1, #4
 800d168:	6021      	strge	r1, [r4, #0]
 800d16a:	b90e      	cbnz	r6, 800d170 <_printf_i+0x118>
 800d16c:	2d00      	cmp	r5, #0
 800d16e:	d04d      	beq.n	800d20c <_printf_i+0x1b4>
 800d170:	4615      	mov	r5, r2
 800d172:	fbb6 f1f3 	udiv	r1, r6, r3
 800d176:	fb03 6711 	mls	r7, r3, r1, r6
 800d17a:	5dc7      	ldrb	r7, [r0, r7]
 800d17c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d180:	4637      	mov	r7, r6
 800d182:	42bb      	cmp	r3, r7
 800d184:	460e      	mov	r6, r1
 800d186:	d9f4      	bls.n	800d172 <_printf_i+0x11a>
 800d188:	2b08      	cmp	r3, #8
 800d18a:	d10b      	bne.n	800d1a4 <_printf_i+0x14c>
 800d18c:	6823      	ldr	r3, [r4, #0]
 800d18e:	07de      	lsls	r6, r3, #31
 800d190:	d508      	bpl.n	800d1a4 <_printf_i+0x14c>
 800d192:	6923      	ldr	r3, [r4, #16]
 800d194:	6861      	ldr	r1, [r4, #4]
 800d196:	4299      	cmp	r1, r3
 800d198:	bfde      	ittt	le
 800d19a:	2330      	movle	r3, #48	; 0x30
 800d19c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d1a0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d1a4:	1b52      	subs	r2, r2, r5
 800d1a6:	6122      	str	r2, [r4, #16]
 800d1a8:	f8cd a000 	str.w	sl, [sp]
 800d1ac:	464b      	mov	r3, r9
 800d1ae:	aa03      	add	r2, sp, #12
 800d1b0:	4621      	mov	r1, r4
 800d1b2:	4640      	mov	r0, r8
 800d1b4:	f7ff fee2 	bl	800cf7c <_printf_common>
 800d1b8:	3001      	adds	r0, #1
 800d1ba:	d14c      	bne.n	800d256 <_printf_i+0x1fe>
 800d1bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d1c0:	b004      	add	sp, #16
 800d1c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1c6:	4835      	ldr	r0, [pc, #212]	; (800d29c <_printf_i+0x244>)
 800d1c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d1cc:	6829      	ldr	r1, [r5, #0]
 800d1ce:	6823      	ldr	r3, [r4, #0]
 800d1d0:	f851 6b04 	ldr.w	r6, [r1], #4
 800d1d4:	6029      	str	r1, [r5, #0]
 800d1d6:	061d      	lsls	r5, r3, #24
 800d1d8:	d514      	bpl.n	800d204 <_printf_i+0x1ac>
 800d1da:	07df      	lsls	r7, r3, #31
 800d1dc:	bf44      	itt	mi
 800d1de:	f043 0320 	orrmi.w	r3, r3, #32
 800d1e2:	6023      	strmi	r3, [r4, #0]
 800d1e4:	b91e      	cbnz	r6, 800d1ee <_printf_i+0x196>
 800d1e6:	6823      	ldr	r3, [r4, #0]
 800d1e8:	f023 0320 	bic.w	r3, r3, #32
 800d1ec:	6023      	str	r3, [r4, #0]
 800d1ee:	2310      	movs	r3, #16
 800d1f0:	e7b0      	b.n	800d154 <_printf_i+0xfc>
 800d1f2:	6823      	ldr	r3, [r4, #0]
 800d1f4:	f043 0320 	orr.w	r3, r3, #32
 800d1f8:	6023      	str	r3, [r4, #0]
 800d1fa:	2378      	movs	r3, #120	; 0x78
 800d1fc:	4828      	ldr	r0, [pc, #160]	; (800d2a0 <_printf_i+0x248>)
 800d1fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d202:	e7e3      	b.n	800d1cc <_printf_i+0x174>
 800d204:	0659      	lsls	r1, r3, #25
 800d206:	bf48      	it	mi
 800d208:	b2b6      	uxthmi	r6, r6
 800d20a:	e7e6      	b.n	800d1da <_printf_i+0x182>
 800d20c:	4615      	mov	r5, r2
 800d20e:	e7bb      	b.n	800d188 <_printf_i+0x130>
 800d210:	682b      	ldr	r3, [r5, #0]
 800d212:	6826      	ldr	r6, [r4, #0]
 800d214:	6961      	ldr	r1, [r4, #20]
 800d216:	1d18      	adds	r0, r3, #4
 800d218:	6028      	str	r0, [r5, #0]
 800d21a:	0635      	lsls	r5, r6, #24
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	d501      	bpl.n	800d224 <_printf_i+0x1cc>
 800d220:	6019      	str	r1, [r3, #0]
 800d222:	e002      	b.n	800d22a <_printf_i+0x1d2>
 800d224:	0670      	lsls	r0, r6, #25
 800d226:	d5fb      	bpl.n	800d220 <_printf_i+0x1c8>
 800d228:	8019      	strh	r1, [r3, #0]
 800d22a:	2300      	movs	r3, #0
 800d22c:	6123      	str	r3, [r4, #16]
 800d22e:	4615      	mov	r5, r2
 800d230:	e7ba      	b.n	800d1a8 <_printf_i+0x150>
 800d232:	682b      	ldr	r3, [r5, #0]
 800d234:	1d1a      	adds	r2, r3, #4
 800d236:	602a      	str	r2, [r5, #0]
 800d238:	681d      	ldr	r5, [r3, #0]
 800d23a:	6862      	ldr	r2, [r4, #4]
 800d23c:	2100      	movs	r1, #0
 800d23e:	4628      	mov	r0, r5
 800d240:	f7f2 ffd6 	bl	80001f0 <memchr>
 800d244:	b108      	cbz	r0, 800d24a <_printf_i+0x1f2>
 800d246:	1b40      	subs	r0, r0, r5
 800d248:	6060      	str	r0, [r4, #4]
 800d24a:	6863      	ldr	r3, [r4, #4]
 800d24c:	6123      	str	r3, [r4, #16]
 800d24e:	2300      	movs	r3, #0
 800d250:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d254:	e7a8      	b.n	800d1a8 <_printf_i+0x150>
 800d256:	6923      	ldr	r3, [r4, #16]
 800d258:	462a      	mov	r2, r5
 800d25a:	4649      	mov	r1, r9
 800d25c:	4640      	mov	r0, r8
 800d25e:	47d0      	blx	sl
 800d260:	3001      	adds	r0, #1
 800d262:	d0ab      	beq.n	800d1bc <_printf_i+0x164>
 800d264:	6823      	ldr	r3, [r4, #0]
 800d266:	079b      	lsls	r3, r3, #30
 800d268:	d413      	bmi.n	800d292 <_printf_i+0x23a>
 800d26a:	68e0      	ldr	r0, [r4, #12]
 800d26c:	9b03      	ldr	r3, [sp, #12]
 800d26e:	4298      	cmp	r0, r3
 800d270:	bfb8      	it	lt
 800d272:	4618      	movlt	r0, r3
 800d274:	e7a4      	b.n	800d1c0 <_printf_i+0x168>
 800d276:	2301      	movs	r3, #1
 800d278:	4632      	mov	r2, r6
 800d27a:	4649      	mov	r1, r9
 800d27c:	4640      	mov	r0, r8
 800d27e:	47d0      	blx	sl
 800d280:	3001      	adds	r0, #1
 800d282:	d09b      	beq.n	800d1bc <_printf_i+0x164>
 800d284:	3501      	adds	r5, #1
 800d286:	68e3      	ldr	r3, [r4, #12]
 800d288:	9903      	ldr	r1, [sp, #12]
 800d28a:	1a5b      	subs	r3, r3, r1
 800d28c:	42ab      	cmp	r3, r5
 800d28e:	dcf2      	bgt.n	800d276 <_printf_i+0x21e>
 800d290:	e7eb      	b.n	800d26a <_printf_i+0x212>
 800d292:	2500      	movs	r5, #0
 800d294:	f104 0619 	add.w	r6, r4, #25
 800d298:	e7f5      	b.n	800d286 <_printf_i+0x22e>
 800d29a:	bf00      	nop
 800d29c:	0800dfc5 	.word	0x0800dfc5
 800d2a0:	0800dfd6 	.word	0x0800dfd6

0800d2a4 <_read_r>:
 800d2a4:	b538      	push	{r3, r4, r5, lr}
 800d2a6:	4d07      	ldr	r5, [pc, #28]	; (800d2c4 <_read_r+0x20>)
 800d2a8:	4604      	mov	r4, r0
 800d2aa:	4608      	mov	r0, r1
 800d2ac:	4611      	mov	r1, r2
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	602a      	str	r2, [r5, #0]
 800d2b2:	461a      	mov	r2, r3
 800d2b4:	f7f5 f900 	bl	80024b8 <_read>
 800d2b8:	1c43      	adds	r3, r0, #1
 800d2ba:	d102      	bne.n	800d2c2 <_read_r+0x1e>
 800d2bc:	682b      	ldr	r3, [r5, #0]
 800d2be:	b103      	cbz	r3, 800d2c2 <_read_r+0x1e>
 800d2c0:	6023      	str	r3, [r4, #0]
 800d2c2:	bd38      	pop	{r3, r4, r5, pc}
 800d2c4:	20004904 	.word	0x20004904

0800d2c8 <nan>:
 800d2c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d2d0 <nan+0x8>
 800d2cc:	4770      	bx	lr
 800d2ce:	bf00      	nop
 800d2d0:	00000000 	.word	0x00000000
 800d2d4:	7ff80000 	.word	0x7ff80000

0800d2d8 <__ascii_wctomb>:
 800d2d8:	b149      	cbz	r1, 800d2ee <__ascii_wctomb+0x16>
 800d2da:	2aff      	cmp	r2, #255	; 0xff
 800d2dc:	bf85      	ittet	hi
 800d2de:	238a      	movhi	r3, #138	; 0x8a
 800d2e0:	6003      	strhi	r3, [r0, #0]
 800d2e2:	700a      	strbls	r2, [r1, #0]
 800d2e4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800d2e8:	bf98      	it	ls
 800d2ea:	2001      	movls	r0, #1
 800d2ec:	4770      	bx	lr
 800d2ee:	4608      	mov	r0, r1
 800d2f0:	4770      	bx	lr
	...

0800d2f4 <__assert_func>:
 800d2f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d2f6:	4614      	mov	r4, r2
 800d2f8:	461a      	mov	r2, r3
 800d2fa:	4b09      	ldr	r3, [pc, #36]	; (800d320 <__assert_func+0x2c>)
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	4605      	mov	r5, r0
 800d300:	68d8      	ldr	r0, [r3, #12]
 800d302:	b14c      	cbz	r4, 800d318 <__assert_func+0x24>
 800d304:	4b07      	ldr	r3, [pc, #28]	; (800d324 <__assert_func+0x30>)
 800d306:	9100      	str	r1, [sp, #0]
 800d308:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d30c:	4906      	ldr	r1, [pc, #24]	; (800d328 <__assert_func+0x34>)
 800d30e:	462b      	mov	r3, r5
 800d310:	f000 f80e 	bl	800d330 <fiprintf>
 800d314:	f000 f848 	bl	800d3a8 <abort>
 800d318:	4b04      	ldr	r3, [pc, #16]	; (800d32c <__assert_func+0x38>)
 800d31a:	461c      	mov	r4, r3
 800d31c:	e7f3      	b.n	800d306 <__assert_func+0x12>
 800d31e:	bf00      	nop
 800d320:	20000010 	.word	0x20000010
 800d324:	0800dfe7 	.word	0x0800dfe7
 800d328:	0800dff4 	.word	0x0800dff4
 800d32c:	0800e022 	.word	0x0800e022

0800d330 <fiprintf>:
 800d330:	b40e      	push	{r1, r2, r3}
 800d332:	b503      	push	{r0, r1, lr}
 800d334:	4601      	mov	r1, r0
 800d336:	ab03      	add	r3, sp, #12
 800d338:	4805      	ldr	r0, [pc, #20]	; (800d350 <fiprintf+0x20>)
 800d33a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d33e:	6800      	ldr	r0, [r0, #0]
 800d340:	9301      	str	r3, [sp, #4]
 800d342:	f7ff fceb 	bl	800cd1c <_vfiprintf_r>
 800d346:	b002      	add	sp, #8
 800d348:	f85d eb04 	ldr.w	lr, [sp], #4
 800d34c:	b003      	add	sp, #12
 800d34e:	4770      	bx	lr
 800d350:	20000010 	.word	0x20000010

0800d354 <_fstat_r>:
 800d354:	b538      	push	{r3, r4, r5, lr}
 800d356:	4d07      	ldr	r5, [pc, #28]	; (800d374 <_fstat_r+0x20>)
 800d358:	2300      	movs	r3, #0
 800d35a:	4604      	mov	r4, r0
 800d35c:	4608      	mov	r0, r1
 800d35e:	4611      	mov	r1, r2
 800d360:	602b      	str	r3, [r5, #0]
 800d362:	f7f5 f8ee 	bl	8002542 <_fstat>
 800d366:	1c43      	adds	r3, r0, #1
 800d368:	d102      	bne.n	800d370 <_fstat_r+0x1c>
 800d36a:	682b      	ldr	r3, [r5, #0]
 800d36c:	b103      	cbz	r3, 800d370 <_fstat_r+0x1c>
 800d36e:	6023      	str	r3, [r4, #0]
 800d370:	bd38      	pop	{r3, r4, r5, pc}
 800d372:	bf00      	nop
 800d374:	20004904 	.word	0x20004904

0800d378 <_isatty_r>:
 800d378:	b538      	push	{r3, r4, r5, lr}
 800d37a:	4d06      	ldr	r5, [pc, #24]	; (800d394 <_isatty_r+0x1c>)
 800d37c:	2300      	movs	r3, #0
 800d37e:	4604      	mov	r4, r0
 800d380:	4608      	mov	r0, r1
 800d382:	602b      	str	r3, [r5, #0]
 800d384:	f7f5 f8ed 	bl	8002562 <_isatty>
 800d388:	1c43      	adds	r3, r0, #1
 800d38a:	d102      	bne.n	800d392 <_isatty_r+0x1a>
 800d38c:	682b      	ldr	r3, [r5, #0]
 800d38e:	b103      	cbz	r3, 800d392 <_isatty_r+0x1a>
 800d390:	6023      	str	r3, [r4, #0]
 800d392:	bd38      	pop	{r3, r4, r5, pc}
 800d394:	20004904 	.word	0x20004904

0800d398 <malloc>:
 800d398:	4b02      	ldr	r3, [pc, #8]	; (800d3a4 <malloc+0xc>)
 800d39a:	4601      	mov	r1, r0
 800d39c:	6818      	ldr	r0, [r3, #0]
 800d39e:	f7fd b9c3 	b.w	800a728 <_malloc_r>
 800d3a2:	bf00      	nop
 800d3a4:	20000010 	.word	0x20000010

0800d3a8 <abort>:
 800d3a8:	b508      	push	{r3, lr}
 800d3aa:	2006      	movs	r0, #6
 800d3ac:	f000 f82c 	bl	800d408 <raise>
 800d3b0:	2001      	movs	r0, #1
 800d3b2:	f7f5 f877 	bl	80024a4 <_exit>

0800d3b6 <_raise_r>:
 800d3b6:	291f      	cmp	r1, #31
 800d3b8:	b538      	push	{r3, r4, r5, lr}
 800d3ba:	4604      	mov	r4, r0
 800d3bc:	460d      	mov	r5, r1
 800d3be:	d904      	bls.n	800d3ca <_raise_r+0x14>
 800d3c0:	2316      	movs	r3, #22
 800d3c2:	6003      	str	r3, [r0, #0]
 800d3c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d3c8:	bd38      	pop	{r3, r4, r5, pc}
 800d3ca:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d3cc:	b112      	cbz	r2, 800d3d4 <_raise_r+0x1e>
 800d3ce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d3d2:	b94b      	cbnz	r3, 800d3e8 <_raise_r+0x32>
 800d3d4:	4620      	mov	r0, r4
 800d3d6:	f000 f831 	bl	800d43c <_getpid_r>
 800d3da:	462a      	mov	r2, r5
 800d3dc:	4601      	mov	r1, r0
 800d3de:	4620      	mov	r0, r4
 800d3e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d3e4:	f000 b818 	b.w	800d418 <_kill_r>
 800d3e8:	2b01      	cmp	r3, #1
 800d3ea:	d00a      	beq.n	800d402 <_raise_r+0x4c>
 800d3ec:	1c59      	adds	r1, r3, #1
 800d3ee:	d103      	bne.n	800d3f8 <_raise_r+0x42>
 800d3f0:	2316      	movs	r3, #22
 800d3f2:	6003      	str	r3, [r0, #0]
 800d3f4:	2001      	movs	r0, #1
 800d3f6:	e7e7      	b.n	800d3c8 <_raise_r+0x12>
 800d3f8:	2400      	movs	r4, #0
 800d3fa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d3fe:	4628      	mov	r0, r5
 800d400:	4798      	blx	r3
 800d402:	2000      	movs	r0, #0
 800d404:	e7e0      	b.n	800d3c8 <_raise_r+0x12>
	...

0800d408 <raise>:
 800d408:	4b02      	ldr	r3, [pc, #8]	; (800d414 <raise+0xc>)
 800d40a:	4601      	mov	r1, r0
 800d40c:	6818      	ldr	r0, [r3, #0]
 800d40e:	f7ff bfd2 	b.w	800d3b6 <_raise_r>
 800d412:	bf00      	nop
 800d414:	20000010 	.word	0x20000010

0800d418 <_kill_r>:
 800d418:	b538      	push	{r3, r4, r5, lr}
 800d41a:	4d07      	ldr	r5, [pc, #28]	; (800d438 <_kill_r+0x20>)
 800d41c:	2300      	movs	r3, #0
 800d41e:	4604      	mov	r4, r0
 800d420:	4608      	mov	r0, r1
 800d422:	4611      	mov	r1, r2
 800d424:	602b      	str	r3, [r5, #0]
 800d426:	f7f5 f82d 	bl	8002484 <_kill>
 800d42a:	1c43      	adds	r3, r0, #1
 800d42c:	d102      	bne.n	800d434 <_kill_r+0x1c>
 800d42e:	682b      	ldr	r3, [r5, #0]
 800d430:	b103      	cbz	r3, 800d434 <_kill_r+0x1c>
 800d432:	6023      	str	r3, [r4, #0]
 800d434:	bd38      	pop	{r3, r4, r5, pc}
 800d436:	bf00      	nop
 800d438:	20004904 	.word	0x20004904

0800d43c <_getpid_r>:
 800d43c:	f7f5 b81a 	b.w	8002474 <_getpid>

0800d440 <atan>:
 800d440:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d444:	ec55 4b10 	vmov	r4, r5, d0
 800d448:	4bc3      	ldr	r3, [pc, #780]	; (800d758 <atan+0x318>)
 800d44a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d44e:	429e      	cmp	r6, r3
 800d450:	46ab      	mov	fp, r5
 800d452:	dd18      	ble.n	800d486 <atan+0x46>
 800d454:	4bc1      	ldr	r3, [pc, #772]	; (800d75c <atan+0x31c>)
 800d456:	429e      	cmp	r6, r3
 800d458:	dc01      	bgt.n	800d45e <atan+0x1e>
 800d45a:	d109      	bne.n	800d470 <atan+0x30>
 800d45c:	b144      	cbz	r4, 800d470 <atan+0x30>
 800d45e:	4622      	mov	r2, r4
 800d460:	462b      	mov	r3, r5
 800d462:	4620      	mov	r0, r4
 800d464:	4629      	mov	r1, r5
 800d466:	f7f2 ff19 	bl	800029c <__adddf3>
 800d46a:	4604      	mov	r4, r0
 800d46c:	460d      	mov	r5, r1
 800d46e:	e006      	b.n	800d47e <atan+0x3e>
 800d470:	f1bb 0f00 	cmp.w	fp, #0
 800d474:	f300 8131 	bgt.w	800d6da <atan+0x29a>
 800d478:	a59b      	add	r5, pc, #620	; (adr r5, 800d6e8 <atan+0x2a8>)
 800d47a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d47e:	ec45 4b10 	vmov	d0, r4, r5
 800d482:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d486:	4bb6      	ldr	r3, [pc, #728]	; (800d760 <atan+0x320>)
 800d488:	429e      	cmp	r6, r3
 800d48a:	dc14      	bgt.n	800d4b6 <atan+0x76>
 800d48c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800d490:	429e      	cmp	r6, r3
 800d492:	dc0d      	bgt.n	800d4b0 <atan+0x70>
 800d494:	a396      	add	r3, pc, #600	; (adr r3, 800d6f0 <atan+0x2b0>)
 800d496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d49a:	ee10 0a10 	vmov	r0, s0
 800d49e:	4629      	mov	r1, r5
 800d4a0:	f7f2 fefc 	bl	800029c <__adddf3>
 800d4a4:	4baf      	ldr	r3, [pc, #700]	; (800d764 <atan+0x324>)
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	f7f3 fb3e 	bl	8000b28 <__aeabi_dcmpgt>
 800d4ac:	2800      	cmp	r0, #0
 800d4ae:	d1e6      	bne.n	800d47e <atan+0x3e>
 800d4b0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800d4b4:	e02b      	b.n	800d50e <atan+0xce>
 800d4b6:	f000 f963 	bl	800d780 <fabs>
 800d4ba:	4bab      	ldr	r3, [pc, #684]	; (800d768 <atan+0x328>)
 800d4bc:	429e      	cmp	r6, r3
 800d4be:	ec55 4b10 	vmov	r4, r5, d0
 800d4c2:	f300 80bf 	bgt.w	800d644 <atan+0x204>
 800d4c6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800d4ca:	429e      	cmp	r6, r3
 800d4cc:	f300 80a0 	bgt.w	800d610 <atan+0x1d0>
 800d4d0:	ee10 2a10 	vmov	r2, s0
 800d4d4:	ee10 0a10 	vmov	r0, s0
 800d4d8:	462b      	mov	r3, r5
 800d4da:	4629      	mov	r1, r5
 800d4dc:	f7f2 fede 	bl	800029c <__adddf3>
 800d4e0:	4ba0      	ldr	r3, [pc, #640]	; (800d764 <atan+0x324>)
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	f7f2 fed8 	bl	8000298 <__aeabi_dsub>
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	4606      	mov	r6, r0
 800d4ec:	460f      	mov	r7, r1
 800d4ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d4f2:	4620      	mov	r0, r4
 800d4f4:	4629      	mov	r1, r5
 800d4f6:	f7f2 fed1 	bl	800029c <__adddf3>
 800d4fa:	4602      	mov	r2, r0
 800d4fc:	460b      	mov	r3, r1
 800d4fe:	4630      	mov	r0, r6
 800d500:	4639      	mov	r1, r7
 800d502:	f7f3 f9ab 	bl	800085c <__aeabi_ddiv>
 800d506:	f04f 0a00 	mov.w	sl, #0
 800d50a:	4604      	mov	r4, r0
 800d50c:	460d      	mov	r5, r1
 800d50e:	4622      	mov	r2, r4
 800d510:	462b      	mov	r3, r5
 800d512:	4620      	mov	r0, r4
 800d514:	4629      	mov	r1, r5
 800d516:	f7f3 f877 	bl	8000608 <__aeabi_dmul>
 800d51a:	4602      	mov	r2, r0
 800d51c:	460b      	mov	r3, r1
 800d51e:	4680      	mov	r8, r0
 800d520:	4689      	mov	r9, r1
 800d522:	f7f3 f871 	bl	8000608 <__aeabi_dmul>
 800d526:	a374      	add	r3, pc, #464	; (adr r3, 800d6f8 <atan+0x2b8>)
 800d528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d52c:	4606      	mov	r6, r0
 800d52e:	460f      	mov	r7, r1
 800d530:	f7f3 f86a 	bl	8000608 <__aeabi_dmul>
 800d534:	a372      	add	r3, pc, #456	; (adr r3, 800d700 <atan+0x2c0>)
 800d536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d53a:	f7f2 feaf 	bl	800029c <__adddf3>
 800d53e:	4632      	mov	r2, r6
 800d540:	463b      	mov	r3, r7
 800d542:	f7f3 f861 	bl	8000608 <__aeabi_dmul>
 800d546:	a370      	add	r3, pc, #448	; (adr r3, 800d708 <atan+0x2c8>)
 800d548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d54c:	f7f2 fea6 	bl	800029c <__adddf3>
 800d550:	4632      	mov	r2, r6
 800d552:	463b      	mov	r3, r7
 800d554:	f7f3 f858 	bl	8000608 <__aeabi_dmul>
 800d558:	a36d      	add	r3, pc, #436	; (adr r3, 800d710 <atan+0x2d0>)
 800d55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d55e:	f7f2 fe9d 	bl	800029c <__adddf3>
 800d562:	4632      	mov	r2, r6
 800d564:	463b      	mov	r3, r7
 800d566:	f7f3 f84f 	bl	8000608 <__aeabi_dmul>
 800d56a:	a36b      	add	r3, pc, #428	; (adr r3, 800d718 <atan+0x2d8>)
 800d56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d570:	f7f2 fe94 	bl	800029c <__adddf3>
 800d574:	4632      	mov	r2, r6
 800d576:	463b      	mov	r3, r7
 800d578:	f7f3 f846 	bl	8000608 <__aeabi_dmul>
 800d57c:	a368      	add	r3, pc, #416	; (adr r3, 800d720 <atan+0x2e0>)
 800d57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d582:	f7f2 fe8b 	bl	800029c <__adddf3>
 800d586:	4642      	mov	r2, r8
 800d588:	464b      	mov	r3, r9
 800d58a:	f7f3 f83d 	bl	8000608 <__aeabi_dmul>
 800d58e:	a366      	add	r3, pc, #408	; (adr r3, 800d728 <atan+0x2e8>)
 800d590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d594:	4680      	mov	r8, r0
 800d596:	4689      	mov	r9, r1
 800d598:	4630      	mov	r0, r6
 800d59a:	4639      	mov	r1, r7
 800d59c:	f7f3 f834 	bl	8000608 <__aeabi_dmul>
 800d5a0:	a363      	add	r3, pc, #396	; (adr r3, 800d730 <atan+0x2f0>)
 800d5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5a6:	f7f2 fe77 	bl	8000298 <__aeabi_dsub>
 800d5aa:	4632      	mov	r2, r6
 800d5ac:	463b      	mov	r3, r7
 800d5ae:	f7f3 f82b 	bl	8000608 <__aeabi_dmul>
 800d5b2:	a361      	add	r3, pc, #388	; (adr r3, 800d738 <atan+0x2f8>)
 800d5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5b8:	f7f2 fe6e 	bl	8000298 <__aeabi_dsub>
 800d5bc:	4632      	mov	r2, r6
 800d5be:	463b      	mov	r3, r7
 800d5c0:	f7f3 f822 	bl	8000608 <__aeabi_dmul>
 800d5c4:	a35e      	add	r3, pc, #376	; (adr r3, 800d740 <atan+0x300>)
 800d5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ca:	f7f2 fe65 	bl	8000298 <__aeabi_dsub>
 800d5ce:	4632      	mov	r2, r6
 800d5d0:	463b      	mov	r3, r7
 800d5d2:	f7f3 f819 	bl	8000608 <__aeabi_dmul>
 800d5d6:	a35c      	add	r3, pc, #368	; (adr r3, 800d748 <atan+0x308>)
 800d5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5dc:	f7f2 fe5c 	bl	8000298 <__aeabi_dsub>
 800d5e0:	4632      	mov	r2, r6
 800d5e2:	463b      	mov	r3, r7
 800d5e4:	f7f3 f810 	bl	8000608 <__aeabi_dmul>
 800d5e8:	4602      	mov	r2, r0
 800d5ea:	460b      	mov	r3, r1
 800d5ec:	4640      	mov	r0, r8
 800d5ee:	4649      	mov	r1, r9
 800d5f0:	f7f2 fe54 	bl	800029c <__adddf3>
 800d5f4:	4622      	mov	r2, r4
 800d5f6:	462b      	mov	r3, r5
 800d5f8:	f7f3 f806 	bl	8000608 <__aeabi_dmul>
 800d5fc:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800d600:	4602      	mov	r2, r0
 800d602:	460b      	mov	r3, r1
 800d604:	d14b      	bne.n	800d69e <atan+0x25e>
 800d606:	4620      	mov	r0, r4
 800d608:	4629      	mov	r1, r5
 800d60a:	f7f2 fe45 	bl	8000298 <__aeabi_dsub>
 800d60e:	e72c      	b.n	800d46a <atan+0x2a>
 800d610:	ee10 0a10 	vmov	r0, s0
 800d614:	4b53      	ldr	r3, [pc, #332]	; (800d764 <atan+0x324>)
 800d616:	2200      	movs	r2, #0
 800d618:	4629      	mov	r1, r5
 800d61a:	f7f2 fe3d 	bl	8000298 <__aeabi_dsub>
 800d61e:	4b51      	ldr	r3, [pc, #324]	; (800d764 <atan+0x324>)
 800d620:	4606      	mov	r6, r0
 800d622:	460f      	mov	r7, r1
 800d624:	2200      	movs	r2, #0
 800d626:	4620      	mov	r0, r4
 800d628:	4629      	mov	r1, r5
 800d62a:	f7f2 fe37 	bl	800029c <__adddf3>
 800d62e:	4602      	mov	r2, r0
 800d630:	460b      	mov	r3, r1
 800d632:	4630      	mov	r0, r6
 800d634:	4639      	mov	r1, r7
 800d636:	f7f3 f911 	bl	800085c <__aeabi_ddiv>
 800d63a:	f04f 0a01 	mov.w	sl, #1
 800d63e:	4604      	mov	r4, r0
 800d640:	460d      	mov	r5, r1
 800d642:	e764      	b.n	800d50e <atan+0xce>
 800d644:	4b49      	ldr	r3, [pc, #292]	; (800d76c <atan+0x32c>)
 800d646:	429e      	cmp	r6, r3
 800d648:	da1d      	bge.n	800d686 <atan+0x246>
 800d64a:	ee10 0a10 	vmov	r0, s0
 800d64e:	4b48      	ldr	r3, [pc, #288]	; (800d770 <atan+0x330>)
 800d650:	2200      	movs	r2, #0
 800d652:	4629      	mov	r1, r5
 800d654:	f7f2 fe20 	bl	8000298 <__aeabi_dsub>
 800d658:	4b45      	ldr	r3, [pc, #276]	; (800d770 <atan+0x330>)
 800d65a:	4606      	mov	r6, r0
 800d65c:	460f      	mov	r7, r1
 800d65e:	2200      	movs	r2, #0
 800d660:	4620      	mov	r0, r4
 800d662:	4629      	mov	r1, r5
 800d664:	f7f2 ffd0 	bl	8000608 <__aeabi_dmul>
 800d668:	4b3e      	ldr	r3, [pc, #248]	; (800d764 <atan+0x324>)
 800d66a:	2200      	movs	r2, #0
 800d66c:	f7f2 fe16 	bl	800029c <__adddf3>
 800d670:	4602      	mov	r2, r0
 800d672:	460b      	mov	r3, r1
 800d674:	4630      	mov	r0, r6
 800d676:	4639      	mov	r1, r7
 800d678:	f7f3 f8f0 	bl	800085c <__aeabi_ddiv>
 800d67c:	f04f 0a02 	mov.w	sl, #2
 800d680:	4604      	mov	r4, r0
 800d682:	460d      	mov	r5, r1
 800d684:	e743      	b.n	800d50e <atan+0xce>
 800d686:	462b      	mov	r3, r5
 800d688:	ee10 2a10 	vmov	r2, s0
 800d68c:	4939      	ldr	r1, [pc, #228]	; (800d774 <atan+0x334>)
 800d68e:	2000      	movs	r0, #0
 800d690:	f7f3 f8e4 	bl	800085c <__aeabi_ddiv>
 800d694:	f04f 0a03 	mov.w	sl, #3
 800d698:	4604      	mov	r4, r0
 800d69a:	460d      	mov	r5, r1
 800d69c:	e737      	b.n	800d50e <atan+0xce>
 800d69e:	4b36      	ldr	r3, [pc, #216]	; (800d778 <atan+0x338>)
 800d6a0:	4e36      	ldr	r6, [pc, #216]	; (800d77c <atan+0x33c>)
 800d6a2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800d6a6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800d6aa:	e9da 2300 	ldrd	r2, r3, [sl]
 800d6ae:	f7f2 fdf3 	bl	8000298 <__aeabi_dsub>
 800d6b2:	4622      	mov	r2, r4
 800d6b4:	462b      	mov	r3, r5
 800d6b6:	f7f2 fdef 	bl	8000298 <__aeabi_dsub>
 800d6ba:	4602      	mov	r2, r0
 800d6bc:	460b      	mov	r3, r1
 800d6be:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d6c2:	f7f2 fde9 	bl	8000298 <__aeabi_dsub>
 800d6c6:	f1bb 0f00 	cmp.w	fp, #0
 800d6ca:	4604      	mov	r4, r0
 800d6cc:	460d      	mov	r5, r1
 800d6ce:	f6bf aed6 	bge.w	800d47e <atan+0x3e>
 800d6d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d6d6:	461d      	mov	r5, r3
 800d6d8:	e6d1      	b.n	800d47e <atan+0x3e>
 800d6da:	a51d      	add	r5, pc, #116	; (adr r5, 800d750 <atan+0x310>)
 800d6dc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d6e0:	e6cd      	b.n	800d47e <atan+0x3e>
 800d6e2:	bf00      	nop
 800d6e4:	f3af 8000 	nop.w
 800d6e8:	54442d18 	.word	0x54442d18
 800d6ec:	bff921fb 	.word	0xbff921fb
 800d6f0:	8800759c 	.word	0x8800759c
 800d6f4:	7e37e43c 	.word	0x7e37e43c
 800d6f8:	e322da11 	.word	0xe322da11
 800d6fc:	3f90ad3a 	.word	0x3f90ad3a
 800d700:	24760deb 	.word	0x24760deb
 800d704:	3fa97b4b 	.word	0x3fa97b4b
 800d708:	a0d03d51 	.word	0xa0d03d51
 800d70c:	3fb10d66 	.word	0x3fb10d66
 800d710:	c54c206e 	.word	0xc54c206e
 800d714:	3fb745cd 	.word	0x3fb745cd
 800d718:	920083ff 	.word	0x920083ff
 800d71c:	3fc24924 	.word	0x3fc24924
 800d720:	5555550d 	.word	0x5555550d
 800d724:	3fd55555 	.word	0x3fd55555
 800d728:	2c6a6c2f 	.word	0x2c6a6c2f
 800d72c:	bfa2b444 	.word	0xbfa2b444
 800d730:	52defd9a 	.word	0x52defd9a
 800d734:	3fadde2d 	.word	0x3fadde2d
 800d738:	af749a6d 	.word	0xaf749a6d
 800d73c:	3fb3b0f2 	.word	0x3fb3b0f2
 800d740:	fe231671 	.word	0xfe231671
 800d744:	3fbc71c6 	.word	0x3fbc71c6
 800d748:	9998ebc4 	.word	0x9998ebc4
 800d74c:	3fc99999 	.word	0x3fc99999
 800d750:	54442d18 	.word	0x54442d18
 800d754:	3ff921fb 	.word	0x3ff921fb
 800d758:	440fffff 	.word	0x440fffff
 800d75c:	7ff00000 	.word	0x7ff00000
 800d760:	3fdbffff 	.word	0x3fdbffff
 800d764:	3ff00000 	.word	0x3ff00000
 800d768:	3ff2ffff 	.word	0x3ff2ffff
 800d76c:	40038000 	.word	0x40038000
 800d770:	3ff80000 	.word	0x3ff80000
 800d774:	bff00000 	.word	0xbff00000
 800d778:	0800e148 	.word	0x0800e148
 800d77c:	0800e128 	.word	0x0800e128

0800d780 <fabs>:
 800d780:	ec51 0b10 	vmov	r0, r1, d0
 800d784:	ee10 2a10 	vmov	r2, s0
 800d788:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d78c:	ec43 2b10 	vmov	d0, r2, r3
 800d790:	4770      	bx	lr

0800d792 <atan2>:
 800d792:	f000 b801 	b.w	800d798 <__ieee754_atan2>
	...

0800d798 <__ieee754_atan2>:
 800d798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d79c:	ec57 6b11 	vmov	r6, r7, d1
 800d7a0:	4273      	negs	r3, r6
 800d7a2:	f8df e184 	ldr.w	lr, [pc, #388]	; 800d928 <__ieee754_atan2+0x190>
 800d7a6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800d7aa:	4333      	orrs	r3, r6
 800d7ac:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800d7b0:	4573      	cmp	r3, lr
 800d7b2:	ec51 0b10 	vmov	r0, r1, d0
 800d7b6:	ee11 8a10 	vmov	r8, s2
 800d7ba:	d80a      	bhi.n	800d7d2 <__ieee754_atan2+0x3a>
 800d7bc:	4244      	negs	r4, r0
 800d7be:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d7c2:	4304      	orrs	r4, r0
 800d7c4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800d7c8:	4574      	cmp	r4, lr
 800d7ca:	ee10 9a10 	vmov	r9, s0
 800d7ce:	468c      	mov	ip, r1
 800d7d0:	d907      	bls.n	800d7e2 <__ieee754_atan2+0x4a>
 800d7d2:	4632      	mov	r2, r6
 800d7d4:	463b      	mov	r3, r7
 800d7d6:	f7f2 fd61 	bl	800029c <__adddf3>
 800d7da:	ec41 0b10 	vmov	d0, r0, r1
 800d7de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7e2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800d7e6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d7ea:	4334      	orrs	r4, r6
 800d7ec:	d103      	bne.n	800d7f6 <__ieee754_atan2+0x5e>
 800d7ee:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7f2:	f7ff be25 	b.w	800d440 <atan>
 800d7f6:	17bc      	asrs	r4, r7, #30
 800d7f8:	f004 0402 	and.w	r4, r4, #2
 800d7fc:	ea53 0909 	orrs.w	r9, r3, r9
 800d800:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800d804:	d107      	bne.n	800d816 <__ieee754_atan2+0x7e>
 800d806:	2c02      	cmp	r4, #2
 800d808:	d060      	beq.n	800d8cc <__ieee754_atan2+0x134>
 800d80a:	2c03      	cmp	r4, #3
 800d80c:	d1e5      	bne.n	800d7da <__ieee754_atan2+0x42>
 800d80e:	a142      	add	r1, pc, #264	; (adr r1, 800d918 <__ieee754_atan2+0x180>)
 800d810:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d814:	e7e1      	b.n	800d7da <__ieee754_atan2+0x42>
 800d816:	ea52 0808 	orrs.w	r8, r2, r8
 800d81a:	d106      	bne.n	800d82a <__ieee754_atan2+0x92>
 800d81c:	f1bc 0f00 	cmp.w	ip, #0
 800d820:	da5f      	bge.n	800d8e2 <__ieee754_atan2+0x14a>
 800d822:	a13f      	add	r1, pc, #252	; (adr r1, 800d920 <__ieee754_atan2+0x188>)
 800d824:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d828:	e7d7      	b.n	800d7da <__ieee754_atan2+0x42>
 800d82a:	4572      	cmp	r2, lr
 800d82c:	d10f      	bne.n	800d84e <__ieee754_atan2+0xb6>
 800d82e:	4293      	cmp	r3, r2
 800d830:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800d834:	d107      	bne.n	800d846 <__ieee754_atan2+0xae>
 800d836:	2c02      	cmp	r4, #2
 800d838:	d84c      	bhi.n	800d8d4 <__ieee754_atan2+0x13c>
 800d83a:	4b35      	ldr	r3, [pc, #212]	; (800d910 <__ieee754_atan2+0x178>)
 800d83c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800d840:	e9d4 0100 	ldrd	r0, r1, [r4]
 800d844:	e7c9      	b.n	800d7da <__ieee754_atan2+0x42>
 800d846:	2c02      	cmp	r4, #2
 800d848:	d848      	bhi.n	800d8dc <__ieee754_atan2+0x144>
 800d84a:	4b32      	ldr	r3, [pc, #200]	; (800d914 <__ieee754_atan2+0x17c>)
 800d84c:	e7f6      	b.n	800d83c <__ieee754_atan2+0xa4>
 800d84e:	4573      	cmp	r3, lr
 800d850:	d0e4      	beq.n	800d81c <__ieee754_atan2+0x84>
 800d852:	1a9b      	subs	r3, r3, r2
 800d854:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800d858:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d85c:	da1e      	bge.n	800d89c <__ieee754_atan2+0x104>
 800d85e:	2f00      	cmp	r7, #0
 800d860:	da01      	bge.n	800d866 <__ieee754_atan2+0xce>
 800d862:	323c      	adds	r2, #60	; 0x3c
 800d864:	db1e      	blt.n	800d8a4 <__ieee754_atan2+0x10c>
 800d866:	4632      	mov	r2, r6
 800d868:	463b      	mov	r3, r7
 800d86a:	f7f2 fff7 	bl	800085c <__aeabi_ddiv>
 800d86e:	ec41 0b10 	vmov	d0, r0, r1
 800d872:	f7ff ff85 	bl	800d780 <fabs>
 800d876:	f7ff fde3 	bl	800d440 <atan>
 800d87a:	ec51 0b10 	vmov	r0, r1, d0
 800d87e:	2c01      	cmp	r4, #1
 800d880:	d013      	beq.n	800d8aa <__ieee754_atan2+0x112>
 800d882:	2c02      	cmp	r4, #2
 800d884:	d015      	beq.n	800d8b2 <__ieee754_atan2+0x11a>
 800d886:	2c00      	cmp	r4, #0
 800d888:	d0a7      	beq.n	800d7da <__ieee754_atan2+0x42>
 800d88a:	a319      	add	r3, pc, #100	; (adr r3, 800d8f0 <__ieee754_atan2+0x158>)
 800d88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d890:	f7f2 fd02 	bl	8000298 <__aeabi_dsub>
 800d894:	a318      	add	r3, pc, #96	; (adr r3, 800d8f8 <__ieee754_atan2+0x160>)
 800d896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d89a:	e014      	b.n	800d8c6 <__ieee754_atan2+0x12e>
 800d89c:	a118      	add	r1, pc, #96	; (adr r1, 800d900 <__ieee754_atan2+0x168>)
 800d89e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d8a2:	e7ec      	b.n	800d87e <__ieee754_atan2+0xe6>
 800d8a4:	2000      	movs	r0, #0
 800d8a6:	2100      	movs	r1, #0
 800d8a8:	e7e9      	b.n	800d87e <__ieee754_atan2+0xe6>
 800d8aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d8ae:	4619      	mov	r1, r3
 800d8b0:	e793      	b.n	800d7da <__ieee754_atan2+0x42>
 800d8b2:	a30f      	add	r3, pc, #60	; (adr r3, 800d8f0 <__ieee754_atan2+0x158>)
 800d8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8b8:	f7f2 fcee 	bl	8000298 <__aeabi_dsub>
 800d8bc:	4602      	mov	r2, r0
 800d8be:	460b      	mov	r3, r1
 800d8c0:	a10d      	add	r1, pc, #52	; (adr r1, 800d8f8 <__ieee754_atan2+0x160>)
 800d8c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d8c6:	f7f2 fce7 	bl	8000298 <__aeabi_dsub>
 800d8ca:	e786      	b.n	800d7da <__ieee754_atan2+0x42>
 800d8cc:	a10a      	add	r1, pc, #40	; (adr r1, 800d8f8 <__ieee754_atan2+0x160>)
 800d8ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d8d2:	e782      	b.n	800d7da <__ieee754_atan2+0x42>
 800d8d4:	a10c      	add	r1, pc, #48	; (adr r1, 800d908 <__ieee754_atan2+0x170>)
 800d8d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d8da:	e77e      	b.n	800d7da <__ieee754_atan2+0x42>
 800d8dc:	2000      	movs	r0, #0
 800d8de:	2100      	movs	r1, #0
 800d8e0:	e77b      	b.n	800d7da <__ieee754_atan2+0x42>
 800d8e2:	a107      	add	r1, pc, #28	; (adr r1, 800d900 <__ieee754_atan2+0x168>)
 800d8e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d8e8:	e777      	b.n	800d7da <__ieee754_atan2+0x42>
 800d8ea:	bf00      	nop
 800d8ec:	f3af 8000 	nop.w
 800d8f0:	33145c07 	.word	0x33145c07
 800d8f4:	3ca1a626 	.word	0x3ca1a626
 800d8f8:	54442d18 	.word	0x54442d18
 800d8fc:	400921fb 	.word	0x400921fb
 800d900:	54442d18 	.word	0x54442d18
 800d904:	3ff921fb 	.word	0x3ff921fb
 800d908:	54442d18 	.word	0x54442d18
 800d90c:	3fe921fb 	.word	0x3fe921fb
 800d910:	0800e168 	.word	0x0800e168
 800d914:	0800e180 	.word	0x0800e180
 800d918:	54442d18 	.word	0x54442d18
 800d91c:	c00921fb 	.word	0xc00921fb
 800d920:	54442d18 	.word	0x54442d18
 800d924:	bff921fb 	.word	0xbff921fb
 800d928:	7ff00000 	.word	0x7ff00000

0800d92c <_init>:
 800d92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d92e:	bf00      	nop
 800d930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d932:	bc08      	pop	{r3}
 800d934:	469e      	mov	lr, r3
 800d936:	4770      	bx	lr

0800d938 <_fini>:
 800d938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d93a:	bf00      	nop
 800d93c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d93e:	bc08      	pop	{r3}
 800d940:	469e      	mov	lr, r3
 800d942:	4770      	bx	lr
